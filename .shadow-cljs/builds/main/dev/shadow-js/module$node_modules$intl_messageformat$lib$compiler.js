["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/intl-messageformat/lib/compiler.js"],"~:js","shadow$provide.module$node_modules$intl_messageformat$lib$compiler=function(global,process,require,module,exports,shadow$shims){function Compiler(locales,formats,pluralFn){this.locales=locales;this.formats=formats;this.pluralFn=pluralFn}function StringFormat(id){this.id=id}function PluralFormat(id,useOrdinal,offset,options,pluralFn){this.id=id;this.useOrdinal=useOrdinal;this.offset=offset;this.options=options;this.pluralFn=pluralFn}function PluralOffsetString(id,offset,numberFormat,string){this.id=\nid;this.offset=offset;this.numberFormat=numberFormat;this.string=string}function SelectFormat(id,options){this.id=id;this.options=options}exports[\"default\"]=Compiler;Compiler.prototype.compile=function(ast){this.pluralStack=[];this.pluralNumberFormat=this.currentPlural=null;return this.compileMessage(ast)};Compiler.prototype.compileMessage=function(ast){if(!ast||\"messageFormatPattern\"!==ast.type)throw Error('Message AST is not of type: \"messageFormatPattern\"');ast=ast.elements;var pattern=[],len;\nvar i=0;for(len=ast.length;i<len;i+=1){var element=ast[i];switch(element.type){case \"messageTextElement\":pattern.push(this.compileMessageText(element));break;case \"argumentElement\":pattern.push(this.compileArgument(element));break;default:throw Error(\"Message element does not have a valid type\");}}return pattern};Compiler.prototype.compileMessageText=function(element){return this.currentPlural&&/(^|[^\\\\])#/g.test(element.value)?(this.pluralNumberFormat||(this.pluralNumberFormat=new Intl.NumberFormat(this.locales)),\nnew PluralOffsetString(this.currentPlural.id,this.currentPlural.format.offset,this.pluralNumberFormat,element.value)):element.value.replace(/\\\\#/g,\"#\")};Compiler.prototype.compileArgument=function(element){var format=element.format;if(!format)return new StringFormat(element.id);var formats=this.formats,locales=this.locales,pluralFn=this.pluralFn;switch(format.type){case \"numberFormat\":return formats=formats.number[format.style],{id:element.id,format:(new Intl.NumberFormat(locales,formats)).format};\ncase \"dateFormat\":return formats=formats.date[format.style],{id:element.id,format:(new Intl.DateTimeFormat(locales,formats)).format};case \"timeFormat\":return formats=formats.time[format.style],{id:element.id,format:(new Intl.DateTimeFormat(locales,formats)).format};case \"pluralFormat\":return formats=this.compileOptions(element),new PluralFormat(element.id,format.ordinal,format.offset,formats,pluralFn);case \"selectFormat\":return formats=this.compileOptions(element),new SelectFormat(element.id,formats);\ndefault:throw Error(\"Message element does not have a valid format type\");}};Compiler.prototype.compileOptions=function(element){var format=element.format,options=format.options,optionsHash={};this.pluralStack.push(this.currentPlural);this.currentPlural=\"pluralFormat\"===format.type?element:null;element=0;for(format=options.length;element<format;element+=1){var option=options[element];optionsHash[option.selector]=this.compileMessage(option.value)}this.currentPlural=this.pluralStack.pop();return optionsHash};\nStringFormat.prototype.format=function(value){return value||\"number\"===typeof value?\"string\"===typeof value?value:String(value):\"\"};PluralFormat.prototype.getOption=function(value){var options=this.options;return options[\"\\x3d\"+value]||options[this.pluralFn(value-this.offset,this.useOrdinal)]||options.other};PluralOffsetString.prototype.format=function(value){value=this.numberFormat.format(value-this.offset);return this.string.replace(/(^|[^\\\\])#/g,\"$1\"+value).replace(/\\\\#/g,\"#\")};SelectFormat.prototype.getOption=\nfunction(value){var options=this.options;return options[value]||options.other}}","~:source","shadow$provide[\"module$node_modules$intl_messageformat$lib$compiler\"] = function(global,process,require,module,exports,shadow$shims) {\n/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n/* jslint esnext: true */\n\n\"use strict\";\nexports[\"default\"] = Compiler;\n\nfunction Compiler(locales, formats, pluralFn) {\n    this.locales  = locales;\n    this.formats  = formats;\n    this.pluralFn = pluralFn;\n}\n\nCompiler.prototype.compile = function (ast) {\n    this.pluralStack        = [];\n    this.currentPlural      = null;\n    this.pluralNumberFormat = null;\n\n    return this.compileMessage(ast);\n};\n\nCompiler.prototype.compileMessage = function (ast) {\n    if (!(ast && ast.type === 'messageFormatPattern')) {\n        throw new Error('Message AST is not of type: \"messageFormatPattern\"');\n    }\n\n    var elements = ast.elements,\n        pattern  = [];\n\n    var i, len, element;\n\n    for (i = 0, len = elements.length; i < len; i += 1) {\n        element = elements[i];\n\n        switch (element.type) {\n            case 'messageTextElement':\n                pattern.push(this.compileMessageText(element));\n                break;\n\n            case 'argumentElement':\n                pattern.push(this.compileArgument(element));\n                break;\n\n            default:\n                throw new Error('Message element does not have a valid type');\n        }\n    }\n\n    return pattern;\n};\n\nCompiler.prototype.compileMessageText = function (element) {\n    // When this `element` is part of plural sub-pattern and its value contains\n    // an unescaped '#', use a `PluralOffsetString` helper to properly output\n    // the number with the correct offset in the string.\n    if (this.currentPlural && /(^|[^\\\\])#/g.test(element.value)) {\n        // Create a cache a NumberFormat instance that can be reused for any\n        // PluralOffsetString instance in this message.\n        if (!this.pluralNumberFormat) {\n            this.pluralNumberFormat = new Intl.NumberFormat(this.locales);\n        }\n\n        return new PluralOffsetString(\n                this.currentPlural.id,\n                this.currentPlural.format.offset,\n                this.pluralNumberFormat,\n                element.value);\n    }\n\n    // Unescape the escaped '#'s in the message text.\n    return element.value.replace(/\\\\#/g, '#');\n};\n\nCompiler.prototype.compileArgument = function (element) {\n    var format = element.format;\n\n    if (!format) {\n        return new StringFormat(element.id);\n    }\n\n    var formats  = this.formats,\n        locales  = this.locales,\n        pluralFn = this.pluralFn,\n        options;\n\n    switch (format.type) {\n        case 'numberFormat':\n            options = formats.number[format.style];\n            return {\n                id    : element.id,\n                format: new Intl.NumberFormat(locales, options).format\n            };\n\n        case 'dateFormat':\n            options = formats.date[format.style];\n            return {\n                id    : element.id,\n                format: new Intl.DateTimeFormat(locales, options).format\n            };\n\n        case 'timeFormat':\n            options = formats.time[format.style];\n            return {\n                id    : element.id,\n                format: new Intl.DateTimeFormat(locales, options).format\n            };\n\n        case 'pluralFormat':\n            options = this.compileOptions(element);\n            return new PluralFormat(\n                element.id, format.ordinal, format.offset, options, pluralFn\n            );\n\n        case 'selectFormat':\n            options = this.compileOptions(element);\n            return new SelectFormat(element.id, options);\n\n        default:\n            throw new Error('Message element does not have a valid format type');\n    }\n};\n\nCompiler.prototype.compileOptions = function (element) {\n    var format      = element.format,\n        options     = format.options,\n        optionsHash = {};\n\n    // Save the current plural element, if any, then set it to a new value when\n    // compiling the options sub-patterns. This conforms the spec's algorithm\n    // for handling `\"#\"` syntax in message text.\n    this.pluralStack.push(this.currentPlural);\n    this.currentPlural = format.type === 'pluralFormat' ? element : null;\n\n    var i, len, option;\n\n    for (i = 0, len = options.length; i < len; i += 1) {\n        option = options[i];\n\n        // Compile the sub-pattern and save it under the options's selector.\n        optionsHash[option.selector] = this.compileMessage(option.value);\n    }\n\n    // Pop the plural stack to put back the original current plural value.\n    this.currentPlural = this.pluralStack.pop();\n\n    return optionsHash;\n};\n\n// -- Compiler Helper Classes --------------------------------------------------\n\nfunction StringFormat(id) {\n    this.id = id;\n}\n\nStringFormat.prototype.format = function (value) {\n    if (!value && typeof value !== 'number') {\n        return '';\n    }\n\n    return typeof value === 'string' ? value : String(value);\n};\n\nfunction PluralFormat(id, useOrdinal, offset, options, pluralFn) {\n    this.id         = id;\n    this.useOrdinal = useOrdinal;\n    this.offset     = offset;\n    this.options    = options;\n    this.pluralFn   = pluralFn;\n}\n\nPluralFormat.prototype.getOption = function (value) {\n    var options = this.options;\n\n    var option = options['=' + value] ||\n            options[this.pluralFn(value - this.offset, this.useOrdinal)];\n\n    return option || options.other;\n};\n\nfunction PluralOffsetString(id, offset, numberFormat, string) {\n    this.id           = id;\n    this.offset       = offset;\n    this.numberFormat = numberFormat;\n    this.string       = string;\n}\n\nPluralOffsetString.prototype.format = function (value) {\n    var number = this.numberFormat.format(value - this.offset);\n\n    return this.string\n            .replace(/(^|[^\\\\])#/g, '$1' + number)\n            .replace(/\\\\#/g, '#');\n};\n\nfunction SelectFormat(id, options) {\n    this.id      = id;\n    this.options = options;\n}\n\nSelectFormat.prototype.getOption = function (value) {\n    var options = this.options;\n    return options[value] || options.other;\n};\n\n//# sourceMappingURL=compiler.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["string","compileMessage","offset","id","pluralFn","locales","compileArgument","pluralNumberFormat","compileOptions","compileMessageText","useOrdinal","compile","currentPlural","formats","pluralStack","numberFormat","options","getOption","format"]],"~:compiled-at",1537360491136,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$intl_messageformat$lib$compiler.js\",\n\"lineCount\":8,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/intl-messageformat/lib/compiler.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$intl_messageformat$lib$compiler\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/*\\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\\nCopyrights licensed under the New BSD License.\\nSee the accompanying LICENSE file for terms.\\n*/\\n\\n/* jslint esnext: true */\\n\\n\\\"use strict\\\";\\nexports[\\\"default\\\"] = Compiler;\\n\\nfunction Compiler(locales, formats, pluralFn) {\\n    this.locales  = locales;\\n    this.formats  = formats;\\n    this.pluralFn = pluralFn;\\n}\\n\\nCompiler.prototype.compile = function (ast) {\\n    this.pluralStack        = [];\\n    this.currentPlural      = null;\\n    this.pluralNumberFormat = null;\\n\\n    return this.compileMessage(ast);\\n};\\n\\nCompiler.prototype.compileMessage = function (ast) {\\n    if (!(ast && ast.type === 'messageFormatPattern')) {\\n        throw new Error('Message AST is not of type: \\\"messageFormatPattern\\\"');\\n    }\\n\\n    var elements = ast.elements,\\n        pattern  = [];\\n\\n    var i, len, element;\\n\\n    for (i = 0, len = elements.length; i < len; i += 1) {\\n        element = elements[i];\\n\\n        switch (element.type) {\\n            case 'messageTextElement':\\n                pattern.push(this.compileMessageText(element));\\n                break;\\n\\n            case 'argumentElement':\\n                pattern.push(this.compileArgument(element));\\n                break;\\n\\n            default:\\n                throw new Error('Message element does not have a valid type');\\n        }\\n    }\\n\\n    return pattern;\\n};\\n\\nCompiler.prototype.compileMessageText = function (element) {\\n    // When this `element` is part of plural sub-pattern and its value contains\\n    // an unescaped '#', use a `PluralOffsetString` helper to properly output\\n    // the number with the correct offset in the string.\\n    if (this.currentPlural && /(^|[^\\\\\\\\])#/g.test(element.value)) {\\n        // Create a cache a NumberFormat instance that can be reused for any\\n        // PluralOffsetString instance in this message.\\n        if (!this.pluralNumberFormat) {\\n            this.pluralNumberFormat = new Intl.NumberFormat(this.locales);\\n        }\\n\\n        return new PluralOffsetString(\\n                this.currentPlural.id,\\n                this.currentPlural.format.offset,\\n                this.pluralNumberFormat,\\n                element.value);\\n    }\\n\\n    // Unescape the escaped '#'s in the message text.\\n    return element.value.replace(/\\\\\\\\#/g, '#');\\n};\\n\\nCompiler.prototype.compileArgument = function (element) {\\n    var format = element.format;\\n\\n    if (!format) {\\n        return new StringFormat(element.id);\\n    }\\n\\n    var formats  = this.formats,\\n        locales  = this.locales,\\n        pluralFn = this.pluralFn,\\n        options;\\n\\n    switch (format.type) {\\n        case 'numberFormat':\\n            options = formats.number[format.style];\\n            return {\\n                id    : element.id,\\n                format: new Intl.NumberFormat(locales, options).format\\n            };\\n\\n        case 'dateFormat':\\n            options = formats.date[format.style];\\n            return {\\n                id    : element.id,\\n                format: new Intl.DateTimeFormat(locales, options).format\\n            };\\n\\n        case 'timeFormat':\\n            options = formats.time[format.style];\\n            return {\\n                id    : element.id,\\n                format: new Intl.DateTimeFormat(locales, options).format\\n            };\\n\\n        case 'pluralFormat':\\n            options = this.compileOptions(element);\\n            return new PluralFormat(\\n                element.id, format.ordinal, format.offset, options, pluralFn\\n            );\\n\\n        case 'selectFormat':\\n            options = this.compileOptions(element);\\n            return new SelectFormat(element.id, options);\\n\\n        default:\\n            throw new Error('Message element does not have a valid format type');\\n    }\\n};\\n\\nCompiler.prototype.compileOptions = function (element) {\\n    var format      = element.format,\\n        options     = format.options,\\n        optionsHash = {};\\n\\n    // Save the current plural element, if any, then set it to a new value when\\n    // compiling the options sub-patterns. This conforms the spec's algorithm\\n    // for handling `\\\"#\\\"` syntax in message text.\\n    this.pluralStack.push(this.currentPlural);\\n    this.currentPlural = format.type === 'pluralFormat' ? element : null;\\n\\n    var i, len, option;\\n\\n    for (i = 0, len = options.length; i < len; i += 1) {\\n        option = options[i];\\n\\n        // Compile the sub-pattern and save it under the options's selector.\\n        optionsHash[option.selector] = this.compileMessage(option.value);\\n    }\\n\\n    // Pop the plural stack to put back the original current plural value.\\n    this.currentPlural = this.pluralStack.pop();\\n\\n    return optionsHash;\\n};\\n\\n// -- Compiler Helper Classes --------------------------------------------------\\n\\nfunction StringFormat(id) {\\n    this.id = id;\\n}\\n\\nStringFormat.prototype.format = function (value) {\\n    if (!value && typeof value !== 'number') {\\n        return '';\\n    }\\n\\n    return typeof value === 'string' ? value : String(value);\\n};\\n\\nfunction PluralFormat(id, useOrdinal, offset, options, pluralFn) {\\n    this.id         = id;\\n    this.useOrdinal = useOrdinal;\\n    this.offset     = offset;\\n    this.options    = options;\\n    this.pluralFn   = pluralFn;\\n}\\n\\nPluralFormat.prototype.getOption = function (value) {\\n    var options = this.options;\\n\\n    var option = options['=' + value] ||\\n            options[this.pluralFn(value - this.offset, this.useOrdinal)];\\n\\n    return option || options.other;\\n};\\n\\nfunction PluralOffsetString(id, offset, numberFormat, string) {\\n    this.id           = id;\\n    this.offset       = offset;\\n    this.numberFormat = numberFormat;\\n    this.string       = string;\\n}\\n\\nPluralOffsetString.prototype.format = function (value) {\\n    var number = this.numberFormat.format(value - this.offset);\\n\\n    return this.string\\n            .replace(/(^|[^\\\\\\\\])#/g, '$1' + number)\\n            .replace(/\\\\\\\\#/g, '#');\\n};\\n\\nfunction SelectFormat(id, options) {\\n    this.id      = id;\\n    this.options = options;\\n}\\n\\nSelectFormat.prototype.getOption = function (value) {\\n    var options = this.options;\\n    return options[value] || options.other;\\n};\\n\\n//# sourceMappingURL=compiler.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"Compiler\",\"locales\",\"formats\",\"pluralFn\",\"StringFormat\",\"id\",\"PluralFormat\",\"useOrdinal\",\"offset\",\"options\",\"PluralOffsetString\",\"numberFormat\",\"string\",\"SelectFormat\",\"prototype\",\"compile\",\"Compiler.prototype.compile\",\"ast\",\"pluralStack\",\"pluralNumberFormat\",\"currentPlural\",\"compileMessage\",\"Compiler.prototype.compileMessage\",\"type\",\"Error\",\"elements\",\"pattern\",\"len\",\"i\",\"length\",\"element\",\"push\",\"compileMessageText\",\"compileArgument\",\"Compiler.prototype.compileMessageText\",\"test\",\"value\",\"Intl\",\"NumberFormat\",\"format\",\"replace\",\"Compiler.prototype.compileArgument\",\"number\",\"style\",\"date\",\"DateTimeFormat\",\"time\",\"compileOptions\",\"ordinal\",\"Compiler.prototype.compileOptions\",\"optionsHash\",\"option\",\"selector\",\"pop\",\"StringFormat.prototype.format\",\"String\",\"getOption\",\"PluralFormat.prototype.getOption\",\"other\",\"PluralOffsetString.prototype.format\",\"SelectFormat.prototype.getOption\"]\n}\n"]