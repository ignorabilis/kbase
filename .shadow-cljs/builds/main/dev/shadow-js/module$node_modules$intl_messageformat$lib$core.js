["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/intl-messageformat/lib/core.js"],"~:js","shadow$provide.module$node_modules$intl_messageformat$lib$core=function(global,process,require,module,exports,shadow$shims){function MessageFormat(message,locales,formats){var ast=\"string\"===typeof message?MessageFormat.__parse(message):message;if(!ast||\"messageFormatPattern\"!==ast.type)throw new TypeError(\"A message must be provided as a String or AST.\");formats=this._mergeFormats(MessageFormat.formats,formats);src$es5$$.defineProperty(this,\"_locale\",{value:this._resolveLocale(locales)});var pluralFn=\nthis._findPluralRuleFunction(this._locale),pattern=this._compilePattern(ast,locales,formats,pluralFn),messageFormat=this;this.format=function(values){try{return messageFormat._format(pattern,values)}catch(e){if(e.variableId)throw Error(\"The intl string context variable '\"+e.variableId+\"' was not provided to the string '\"+message+\"'\");throw e;}}}var src$utils$$=require(\"module$node_modules$intl_messageformat$lib$utils\"),src$es5$$=require(\"module$node_modules$intl_messageformat$lib$es5\"),src$compiler$$=\nrequire(\"module$node_modules$intl_messageformat$lib$compiler\");global=require(\"module$node_modules$intl_messageformat_parser$index\");exports[\"default\"]=MessageFormat;src$es5$$.defineProperty(MessageFormat,\"formats\",{enumerable:!0,value:{number:{currency:{style:\"currency\"},percent:{style:\"percent\"}},date:{\"short\":{month:\"numeric\",day:\"numeric\",year:\"2-digit\"},medium:{month:\"short\",day:\"numeric\",year:\"numeric\"},\"long\":{month:\"long\",day:\"numeric\",year:\"numeric\"},full:{weekday:\"long\",month:\"long\",day:\"numeric\",\nyear:\"numeric\"}},time:{\"short\":{hour:\"numeric\",minute:\"numeric\"},medium:{hour:\"numeric\",minute:\"numeric\",second:\"numeric\"},\"long\":{hour:\"numeric\",minute:\"numeric\",second:\"numeric\",timeZoneName:\"short\"},full:{hour:\"numeric\",minute:\"numeric\",second:\"numeric\",timeZoneName:\"short\"}}}});src$es5$$.defineProperty(MessageFormat,\"__localeData__\",{value:src$es5$$.objCreate(null)});src$es5$$.defineProperty(MessageFormat,\"__addLocaleData\",{value:function(data){if(!data||!data.locale)throw Error(\"Locale data provided to IntlMessageFormat is missing a `locale` property\");\nMessageFormat.__localeData__[data.locale.toLowerCase()]=data}});src$es5$$.defineProperty(MessageFormat,\"__parse\",{value:global[\"default\"].parse});src$es5$$.defineProperty(MessageFormat,\"defaultLocale\",{enumerable:!0,writable:!0,value:void 0});MessageFormat.prototype.resolvedOptions=function(){return{locale:this._locale}};MessageFormat.prototype._compilePattern=function(ast,locales,formats,pluralFn){return(new src$compiler$$[\"default\"](locales,formats,pluralFn)).compile(ast)};MessageFormat.prototype._findPluralRuleFunction=\nfunction(locale){for(var localeData=MessageFormat.__localeData__,data=localeData[locale.toLowerCase()];data;){if(data.pluralRuleFunction)return data.pluralRuleFunction;data=data.parentLocale&&localeData[data.parentLocale.toLowerCase()]}throw Error(\"Locale data added to IntlMessageFormat is missing a `pluralRuleFunction` for :\"+locale);};MessageFormat.prototype._format=function(pattern,values){var result=\"\",len;var i=0;for(len=pattern.length;i<len;i+=1){var part=pattern[i];if(\"string\"===typeof part)result+=\npart;else{var id=part.id;if(!values||!src$utils$$.hop.call(values,id))throw pattern=Error(\"A value must be provided for: \"+id),pattern.variableId=id,pattern;id=values[id];result=part.options?result+this._format(part.getOption(id),values):result+part.format(id)}}return result};MessageFormat.prototype._mergeFormats=function(defaults,formats){var mergedFormats={},type,mergedType;for(type in defaults)src$utils$$.hop.call(defaults,type)&&(mergedFormats[type]=mergedType=src$es5$$.objCreate(defaults[type]),\nformats&&src$utils$$.hop.call(formats,type)&&src$utils$$.extend(mergedType,formats[type]));return mergedFormats};MessageFormat.prototype._resolveLocale=function(locales){\"string\"===typeof locales&&(locales=[locales]);locales=(locales||[]).concat(MessageFormat.defaultLocale);var localeData=MessageFormat.__localeData__,len,localeParts,data;var i=0;for(len=locales.length;i<len;i+=1)for(localeParts=locales[i].toLowerCase().split(\"-\");localeParts.length;){if(data=localeData[localeParts.join(\"-\")])return data.locale;\nlocaleParts.pop()}localeData=locales.pop();throw Error(\"No locale data has been added to IntlMessageFormat for: \"+locales.join(\", \")+\", or the default locale: \"+localeData);}}","~:source","shadow$provide[\"module$node_modules$intl_messageformat$lib$core\"] = function(global,process,require,module,exports,shadow$shims) {\n/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n/* jslint esnext: true */\n\n\"use strict\";\nvar src$utils$$ = require(\"./utils\"), src$es5$$ = require(\"./es5\"), src$compiler$$ = require(\"./compiler\"), intl$messageformat$parser$$ = require(\"intl-messageformat-parser\");\nexports[\"default\"] = MessageFormat;\n\n// -- MessageFormat --------------------------------------------------------\n\nfunction MessageFormat(message, locales, formats) {\n    // Parse string messages into an AST.\n    var ast = typeof message === 'string' ?\n            MessageFormat.__parse(message) : message;\n\n    if (!(ast && ast.type === 'messageFormatPattern')) {\n        throw new TypeError('A message must be provided as a String or AST.');\n    }\n\n    // Creates a new object with the specified `formats` merged with the default\n    // formats.\n    formats = this._mergeFormats(MessageFormat.formats, formats);\n\n    // Defined first because it's used to build the format pattern.\n    src$es5$$.defineProperty(this, '_locale',  {value: this._resolveLocale(locales)});\n\n    // Compile the `ast` to a pattern that is highly optimized for repeated\n    // `format()` invocations. **Note:** This passes the `locales` set provided\n    // to the constructor instead of just the resolved locale.\n    var pluralFn = this._findPluralRuleFunction(this._locale);\n    var pattern  = this._compilePattern(ast, locales, formats, pluralFn);\n\n    // \"Bind\" `format()` method to `this` so it can be passed by reference like\n    // the other `Intl` APIs.\n    var messageFormat = this;\n    this.format = function (values) {\n      try {\n        return messageFormat._format(pattern, values);\n      } catch (e) {\n        if (e.variableId) {\n          throw new Error(\n            'The intl string context variable \\'' + e.variableId + '\\'' +\n            ' was not provided to the string \\'' + message + '\\''\n          );\n        } else {\n          throw e;\n        }\n      }\n    };\n}\n\n// Default format options used as the prototype of the `formats` provided to the\n// constructor. These are used when constructing the internal Intl.NumberFormat\n// and Intl.DateTimeFormat instances.\nsrc$es5$$.defineProperty(MessageFormat, 'formats', {\n    enumerable: true,\n\n    value: {\n        number: {\n            'currency': {\n                style: 'currency'\n            },\n\n            'percent': {\n                style: 'percent'\n            }\n        },\n\n        date: {\n            'short': {\n                month: 'numeric',\n                day  : 'numeric',\n                year : '2-digit'\n            },\n\n            'medium': {\n                month: 'short',\n                day  : 'numeric',\n                year : 'numeric'\n            },\n\n            'long': {\n                month: 'long',\n                day  : 'numeric',\n                year : 'numeric'\n            },\n\n            'full': {\n                weekday: 'long',\n                month  : 'long',\n                day    : 'numeric',\n                year   : 'numeric'\n            }\n        },\n\n        time: {\n            'short': {\n                hour  : 'numeric',\n                minute: 'numeric'\n            },\n\n            'medium':  {\n                hour  : 'numeric',\n                minute: 'numeric',\n                second: 'numeric'\n            },\n\n            'long': {\n                hour        : 'numeric',\n                minute      : 'numeric',\n                second      : 'numeric',\n                timeZoneName: 'short'\n            },\n\n            'full': {\n                hour        : 'numeric',\n                minute      : 'numeric',\n                second      : 'numeric',\n                timeZoneName: 'short'\n            }\n        }\n    }\n});\n\n// Define internal private properties for dealing with locale data.\nsrc$es5$$.defineProperty(MessageFormat, '__localeData__', {value: src$es5$$.objCreate(null)});\nsrc$es5$$.defineProperty(MessageFormat, '__addLocaleData', {value: function (data) {\n    if (!(data && data.locale)) {\n        throw new Error(\n            'Locale data provided to IntlMessageFormat is missing a ' +\n            '`locale` property'\n        );\n    }\n\n    MessageFormat.__localeData__[data.locale.toLowerCase()] = data;\n}});\n\n// Defines `__parse()` static method as an exposed private.\nsrc$es5$$.defineProperty(MessageFormat, '__parse', {value: intl$messageformat$parser$$[\"default\"].parse});\n\n// Define public `defaultLocale` property which defaults to English, but can be\n// set by the developer.\nsrc$es5$$.defineProperty(MessageFormat, 'defaultLocale', {\n    enumerable: true,\n    writable  : true,\n    value     : undefined\n});\n\nMessageFormat.prototype.resolvedOptions = function () {\n    // TODO: Provide anything else?\n    return {\n        locale: this._locale\n    };\n};\n\nMessageFormat.prototype._compilePattern = function (ast, locales, formats, pluralFn) {\n    var compiler = new src$compiler$$[\"default\"](locales, formats, pluralFn);\n    return compiler.compile(ast);\n};\n\nMessageFormat.prototype._findPluralRuleFunction = function (locale) {\n    var localeData = MessageFormat.__localeData__;\n    var data       = localeData[locale.toLowerCase()];\n\n    // The locale data is de-duplicated, so we have to traverse the locale's\n    // hierarchy until we find a `pluralRuleFunction` to return.\n    while (data) {\n        if (data.pluralRuleFunction) {\n            return data.pluralRuleFunction;\n        }\n\n        data = data.parentLocale && localeData[data.parentLocale.toLowerCase()];\n    }\n\n    throw new Error(\n        'Locale data added to IntlMessageFormat is missing a ' +\n        '`pluralRuleFunction` for :' + locale\n    );\n};\n\nMessageFormat.prototype._format = function (pattern, values) {\n    var result = '',\n        i, len, part, id, value, err;\n\n    for (i = 0, len = pattern.length; i < len; i += 1) {\n        part = pattern[i];\n\n        // Exist early for string parts.\n        if (typeof part === 'string') {\n            result += part;\n            continue;\n        }\n\n        id = part.id;\n\n        // Enforce that all required values are provided by the caller.\n        if (!(values && src$utils$$.hop.call(values, id))) {\n          err = new Error('A value must be provided for: ' + id);\n          err.variableId = id;\n          throw err;\n        }\n\n        value = values[id];\n\n        // Recursively format plural and select parts' option — which can be a\n        // nested pattern structure. The choosing of the option to use is\n        // abstracted-by and delegated-to the part helper object.\n        if (part.options) {\n            result += this._format(part.getOption(value), values);\n        } else {\n            result += part.format(value);\n        }\n    }\n\n    return result;\n};\n\nMessageFormat.prototype._mergeFormats = function (defaults, formats) {\n    var mergedFormats = {},\n        type, mergedType;\n\n    for (type in defaults) {\n        if (!src$utils$$.hop.call(defaults, type)) { continue; }\n\n        mergedFormats[type] = mergedType = src$es5$$.objCreate(defaults[type]);\n\n        if (formats && src$utils$$.hop.call(formats, type)) {\n            src$utils$$.extend(mergedType, formats[type]);\n        }\n    }\n\n    return mergedFormats;\n};\n\nMessageFormat.prototype._resolveLocale = function (locales) {\n    if (typeof locales === 'string') {\n        locales = [locales];\n    }\n\n    // Create a copy of the array so we can push on the default locale.\n    locales = (locales || []).concat(MessageFormat.defaultLocale);\n\n    var localeData = MessageFormat.__localeData__;\n    var i, len, localeParts, data;\n\n    // Using the set of locales + the default locale, we look for the first one\n    // which that has been registered. When data does not exist for a locale, we\n    // traverse its ancestors to find something that's been registered within\n    // its hierarchy of locales. Since we lack the proper `parentLocale` data\n    // here, we must take a naive approach to traversal.\n    for (i = 0, len = locales.length; i < len; i += 1) {\n        localeParts = locales[i].toLowerCase().split('-');\n\n        while (localeParts.length) {\n            data = localeData[localeParts.join('-')];\n            if (data) {\n                // Return the normalized locale string; e.g., we return \"en-US\",\n                // instead of \"en-us\".\n                return data.locale;\n            }\n\n            localeParts.pop();\n        }\n    }\n\n    var defaultLocale = locales.pop();\n    throw new Error(\n        'No locale data has been added to IntlMessageFormat for: ' +\n        locales.join(', ') + ', or the default locale: ' + defaultLocale\n    );\n};\n\n//# sourceMappingURL=core.js.map\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$intl_messageformat$lib$utils","~$module$node_modules$intl_messageformat_parser$index","~$module$node_modules$intl_messageformat$lib$es5","~$shadow.js","~$module$node_modules$intl_messageformat$lib$compiler"]],"~:properties",["^5",["percent","_format","variableId","_findPluralRuleFunction","currency","long","second","medium","hour","short","locale","style","value","full","enumerable","_compilePattern","writable","number","time","weekday","year","minute","date","timeZoneName","_resolveLocale","_mergeFormats","month","day","resolvedOptions","format"]],"~:compiled-at",1537360491140,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$intl_messageformat$lib$core.js\",\n\"lineCount\":9,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/intl-messageformat/lib/core.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$intl_messageformat$lib$core\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/*\\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\\nCopyrights licensed under the New BSD License.\\nSee the accompanying LICENSE file for terms.\\n*/\\n\\n/* jslint esnext: true */\\n\\n\\\"use strict\\\";\\nvar src$utils$$ = require(\\\"./utils\\\"), src$es5$$ = require(\\\"./es5\\\"), src$compiler$$ = require(\\\"./compiler\\\"), intl$messageformat$parser$$ = require(\\\"intl-messageformat-parser\\\");\\nexports[\\\"default\\\"] = MessageFormat;\\n\\n// -- MessageFormat --------------------------------------------------------\\n\\nfunction MessageFormat(message, locales, formats) {\\n    // Parse string messages into an AST.\\n    var ast = typeof message === 'string' ?\\n            MessageFormat.__parse(message) : message;\\n\\n    if (!(ast && ast.type === 'messageFormatPattern')) {\\n        throw new TypeError('A message must be provided as a String or AST.');\\n    }\\n\\n    // Creates a new object with the specified `formats` merged with the default\\n    // formats.\\n    formats = this._mergeFormats(MessageFormat.formats, formats);\\n\\n    // Defined first because it's used to build the format pattern.\\n    src$es5$$.defineProperty(this, '_locale',  {value: this._resolveLocale(locales)});\\n\\n    // Compile the `ast` to a pattern that is highly optimized for repeated\\n    // `format()` invocations. **Note:** This passes the `locales` set provided\\n    // to the constructor instead of just the resolved locale.\\n    var pluralFn = this._findPluralRuleFunction(this._locale);\\n    var pattern  = this._compilePattern(ast, locales, formats, pluralFn);\\n\\n    // \\\"Bind\\\" `format()` method to `this` so it can be passed by reference like\\n    // the other `Intl` APIs.\\n    var messageFormat = this;\\n    this.format = function (values) {\\n      try {\\n        return messageFormat._format(pattern, values);\\n      } catch (e) {\\n        if (e.variableId) {\\n          throw new Error(\\n            'The intl string context variable \\\\'' + e.variableId + '\\\\'' +\\n            ' was not provided to the string \\\\'' + message + '\\\\''\\n          );\\n        } else {\\n          throw e;\\n        }\\n      }\\n    };\\n}\\n\\n// Default format options used as the prototype of the `formats` provided to the\\n// constructor. These are used when constructing the internal Intl.NumberFormat\\n// and Intl.DateTimeFormat instances.\\nsrc$es5$$.defineProperty(MessageFormat, 'formats', {\\n    enumerable: true,\\n\\n    value: {\\n        number: {\\n            'currency': {\\n                style: 'currency'\\n            },\\n\\n            'percent': {\\n                style: 'percent'\\n            }\\n        },\\n\\n        date: {\\n            'short': {\\n                month: 'numeric',\\n                day  : 'numeric',\\n                year : '2-digit'\\n            },\\n\\n            'medium': {\\n                month: 'short',\\n                day  : 'numeric',\\n                year : 'numeric'\\n            },\\n\\n            'long': {\\n                month: 'long',\\n                day  : 'numeric',\\n                year : 'numeric'\\n            },\\n\\n            'full': {\\n                weekday: 'long',\\n                month  : 'long',\\n                day    : 'numeric',\\n                year   : 'numeric'\\n            }\\n        },\\n\\n        time: {\\n            'short': {\\n                hour  : 'numeric',\\n                minute: 'numeric'\\n            },\\n\\n            'medium':  {\\n                hour  : 'numeric',\\n                minute: 'numeric',\\n                second: 'numeric'\\n            },\\n\\n            'long': {\\n                hour        : 'numeric',\\n                minute      : 'numeric',\\n                second      : 'numeric',\\n                timeZoneName: 'short'\\n            },\\n\\n            'full': {\\n                hour        : 'numeric',\\n                minute      : 'numeric',\\n                second      : 'numeric',\\n                timeZoneName: 'short'\\n            }\\n        }\\n    }\\n});\\n\\n// Define internal private properties for dealing with locale data.\\nsrc$es5$$.defineProperty(MessageFormat, '__localeData__', {value: src$es5$$.objCreate(null)});\\nsrc$es5$$.defineProperty(MessageFormat, '__addLocaleData', {value: function (data) {\\n    if (!(data && data.locale)) {\\n        throw new Error(\\n            'Locale data provided to IntlMessageFormat is missing a ' +\\n            '`locale` property'\\n        );\\n    }\\n\\n    MessageFormat.__localeData__[data.locale.toLowerCase()] = data;\\n}});\\n\\n// Defines `__parse()` static method as an exposed private.\\nsrc$es5$$.defineProperty(MessageFormat, '__parse', {value: intl$messageformat$parser$$[\\\"default\\\"].parse});\\n\\n// Define public `defaultLocale` property which defaults to English, but can be\\n// set by the developer.\\nsrc$es5$$.defineProperty(MessageFormat, 'defaultLocale', {\\n    enumerable: true,\\n    writable  : true,\\n    value     : undefined\\n});\\n\\nMessageFormat.prototype.resolvedOptions = function () {\\n    // TODO: Provide anything else?\\n    return {\\n        locale: this._locale\\n    };\\n};\\n\\nMessageFormat.prototype._compilePattern = function (ast, locales, formats, pluralFn) {\\n    var compiler = new src$compiler$$[\\\"default\\\"](locales, formats, pluralFn);\\n    return compiler.compile(ast);\\n};\\n\\nMessageFormat.prototype._findPluralRuleFunction = function (locale) {\\n    var localeData = MessageFormat.__localeData__;\\n    var data       = localeData[locale.toLowerCase()];\\n\\n    // The locale data is de-duplicated, so we have to traverse the locale's\\n    // hierarchy until we find a `pluralRuleFunction` to return.\\n    while (data) {\\n        if (data.pluralRuleFunction) {\\n            return data.pluralRuleFunction;\\n        }\\n\\n        data = data.parentLocale && localeData[data.parentLocale.toLowerCase()];\\n    }\\n\\n    throw new Error(\\n        'Locale data added to IntlMessageFormat is missing a ' +\\n        '`pluralRuleFunction` for :' + locale\\n    );\\n};\\n\\nMessageFormat.prototype._format = function (pattern, values) {\\n    var result = '',\\n        i, len, part, id, value, err;\\n\\n    for (i = 0, len = pattern.length; i < len; i += 1) {\\n        part = pattern[i];\\n\\n        // Exist early for string parts.\\n        if (typeof part === 'string') {\\n            result += part;\\n            continue;\\n        }\\n\\n        id = part.id;\\n\\n        // Enforce that all required values are provided by the caller.\\n        if (!(values && src$utils$$.hop.call(values, id))) {\\n          err = new Error('A value must be provided for: ' + id);\\n          err.variableId = id;\\n          throw err;\\n        }\\n\\n        value = values[id];\\n\\n        // Recursively format plural and select parts' option \\u2014 which can be a\\n        // nested pattern structure. The choosing of the option to use is\\n        // abstracted-by and delegated-to the part helper object.\\n        if (part.options) {\\n            result += this._format(part.getOption(value), values);\\n        } else {\\n            result += part.format(value);\\n        }\\n    }\\n\\n    return result;\\n};\\n\\nMessageFormat.prototype._mergeFormats = function (defaults, formats) {\\n    var mergedFormats = {},\\n        type, mergedType;\\n\\n    for (type in defaults) {\\n        if (!src$utils$$.hop.call(defaults, type)) { continue; }\\n\\n        mergedFormats[type] = mergedType = src$es5$$.objCreate(defaults[type]);\\n\\n        if (formats && src$utils$$.hop.call(formats, type)) {\\n            src$utils$$.extend(mergedType, formats[type]);\\n        }\\n    }\\n\\n    return mergedFormats;\\n};\\n\\nMessageFormat.prototype._resolveLocale = function (locales) {\\n    if (typeof locales === 'string') {\\n        locales = [locales];\\n    }\\n\\n    // Create a copy of the array so we can push on the default locale.\\n    locales = (locales || []).concat(MessageFormat.defaultLocale);\\n\\n    var localeData = MessageFormat.__localeData__;\\n    var i, len, localeParts, data;\\n\\n    // Using the set of locales + the default locale, we look for the first one\\n    // which that has been registered. When data does not exist for a locale, we\\n    // traverse its ancestors to find something that's been registered within\\n    // its hierarchy of locales. Since we lack the proper `parentLocale` data\\n    // here, we must take a naive approach to traversal.\\n    for (i = 0, len = locales.length; i < len; i += 1) {\\n        localeParts = locales[i].toLowerCase().split('-');\\n\\n        while (localeParts.length) {\\n            data = localeData[localeParts.join('-')];\\n            if (data) {\\n                // Return the normalized locale string; e.g., we return \\\"en-US\\\",\\n                // instead of \\\"en-us\\\".\\n                return data.locale;\\n            }\\n\\n            localeParts.pop();\\n        }\\n    }\\n\\n    var defaultLocale = locales.pop();\\n    throw new Error(\\n        'No locale data has been added to IntlMessageFormat for: ' +\\n        locales.join(', ') + ', or the default locale: ' + defaultLocale\\n    );\\n};\\n\\n//# sourceMappingURL=core.js.map\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"MessageFormat\",\"message\",\"locales\",\"formats\",\"ast\",\"__parse\",\"type\",\"TypeError\",\"_mergeFormats\",\"src$es5$$\",\"defineProperty\",\"value\",\"_resolveLocale\",\"pluralFn\",\"_findPluralRuleFunction\",\"_locale\",\"pattern\",\"_compilePattern\",\"messageFormat\",\"format\",\"this.format\",\"values\",\"_format\",\"e\",\"variableId\",\"Error\",\"src$utils$$\",\"src$compiler$$\",\"intl$messageformat$parser$$\",\"enumerable\",\"number\",\"style\",\"date\",\"month\",\"day\",\"year\",\"weekday\",\"time\",\"hour\",\"minute\",\"second\",\"timeZoneName\",\"objCreate\",\"data\",\"locale\",\"__localeData__\",\"toLowerCase\",\"parse\",\"writable\",\"undefined\",\"prototype\",\"resolvedOptions\",\"MessageFormat.prototype.resolvedOptions\",\"MessageFormat.prototype._compilePattern\",\"compile\",\"compiler\",\"MessageFormat.prototype._findPluralRuleFunction\",\"localeData\",\"pluralRuleFunction\",\"parentLocale\",\"MessageFormat.prototype._format\",\"result\",\"len\",\"i\",\"length\",\"part\",\"id\",\"hop\",\"call\",\"err\",\"options\",\"getOption\",\"MessageFormat.prototype._mergeFormats\",\"defaults\",\"mergedFormats\",\"mergedType\",\"extend\",\"MessageFormat.prototype._resolveLocale\",\"concat\",\"defaultLocale\",\"localeParts\",\"split\",\"join\",\"pop\"]\n}\n"]