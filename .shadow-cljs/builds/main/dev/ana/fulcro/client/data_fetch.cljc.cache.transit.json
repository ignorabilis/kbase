["^ ","~:output",["^ ","~:js","goog.provide('fulcro.client.data_fetch');\r\ngoog.require('cljs.core');\r\ngoog.require('clojure.walk');\r\ngoog.require('fulcro.client.primitives');\r\ngoog.require('fulcro.client.impl.data_fetch');\r\ngoog.require('fulcro.client.impl.data_targeting');\r\ngoog.require('fulcro.client.mutations');\r\ngoog.require('fulcro.logging');\r\ngoog.require('fulcro.client');\r\ngoog.require('fulcro.util');\r\ngoog.require('clojure.set');\r\n\r\n\r\n\r\nfulcro.client.data_fetch.bool_QMARK_ = (function fulcro$client$data_fetch$bool_QMARK_(v){\r\nreturn cljs.core.boolean_QMARK_(v);\r\n});\r\n/**\r\n * The name of the table in which fulcro load markers are stored\r\n */\r\nfulcro.client.data_fetch.marker_table = fulcro.client.impl.data_fetch.marker_table;\r\nfulcro.client.data_fetch.multiple_targets = (function fulcro$client$data_fetch$multiple_targets(var_args){\r\nvar args__4534__auto__ = [];\r\nvar len__4531__auto___46323 = arguments.length;\r\nvar i__4532__auto___46324 = (0);\r\nwhile(true){\r\nif((i__4532__auto___46324 < len__4531__auto___46323)){\r\nargs__4534__auto__.push((arguments[i__4532__auto___46324]));\r\n\r\nvar G__46325 = (i__4532__auto___46324 + (1));\r\ni__4532__auto___46324 = G__46325;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4535__auto__ = ((((0) < args__4534__auto__.length))?(new cljs.core.IndexedSeq(args__4534__auto__.slice((0)),(0),null)):null);\r\nreturn fulcro.client.data_fetch.multiple_targets.cljs$core$IFn$_invoke$arity$variadic(argseq__4535__auto__);\r\n});\r\n\r\nfulcro.client.data_fetch.multiple_targets.cljs$core$IFn$_invoke$arity$variadic = (function (targets){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(fulcro.client.impl.data_targeting.multiple_targets,targets);\r\n});\r\n\r\nfulcro.client.data_fetch.multiple_targets.cljs$lang$maxFixedArity = (0);\r\n\r\n/** @this {Function} */\r\nfulcro.client.data_fetch.multiple_targets.cljs$lang$applyTo = (function (seq46321){\r\nvar self__4519__auto__ = this;\r\nreturn self__4519__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq46321));\r\n});\r\n\r\nfulcro.client.data_fetch.prepend_to = (function fulcro$client$data_fetch$prepend_to(target){\r\nreturn fulcro.client.impl.data_targeting.prepend_to(target);\r\n});\r\nfulcro.client.data_fetch.append_to = (function fulcro$client$data_fetch$append_to(target){\r\nreturn fulcro.client.impl.data_targeting.append_to(target);\r\n});\r\nfulcro.client.data_fetch.replace_at = (function fulcro$client$data_fetch$replace_at(target){\r\nreturn fulcro.client.impl.data_targeting.replace_at(target);\r\n});\r\n/**\r\n * Remove items from a query that have a key listed in the elision-set\r\n */\r\nfulcro.client.data_fetch.elide_query_nodes = (function fulcro$client$data_fetch$elide_query_nodes(query,elision_set){\r\nreturn fulcro.client.primitives.ast__GT_query(fulcro.client.impl.data_fetch.elide_ast_nodes(fulcro.client.primitives.query__GT_ast(query),elision_set));\r\n});\r\n/**\r\n * Computes the refresh for the load by ensuring the loaded data is on the\r\n *   list of things to re-render.\r\n */\r\nfulcro.client.data_fetch.computed_refresh = (function fulcro$client$data_fetch$computed_refresh(explicit_refresh,load_key,target){\r\nreturn cljs.core.vec((function (){var result = cljs.core.conj.cljs$core$IFn$_invoke$arity$1(cljs.core.set(explicit_refresh));\r\nvar result__$1 = (((((target == null)) || (fulcro.util.ident_QMARK_(load_key))))?cljs.core.conj.cljs$core$IFn$_invoke$arity$2(result,load_key):result);\r\nvar add_target = ((function (result,result__$1){\r\nreturn (function (r,t){\r\nif(((cljs.core.vector_QMARK_(t)) && ((cljs.core.count(t) >= (2))))){\r\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(r,cljs.core.vec(cljs.core.take.cljs$core$IFn$_invoke$arity$2((2),t)));\r\n} else {\r\nif(cljs.core.vector_QMARK_(t)){\r\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(r,cljs.core.first(t));\r\n} else {\r\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(r,t);\r\n\r\n}\r\n}\r\n});})(result,result__$1))\r\n;\r\nif(cljs.core.truth_(fulcro.client.impl.data_fetch.multiple_targets_QMARK_(target))){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (result,result__$1,add_target){\r\nreturn (function (refresh,t){\r\nreturn add_target(refresh,t);\r\n});})(result,result__$1,add_target))\r\n,result__$1,target);\r\n} else {\r\nif(cljs.core.truth_(target)){\r\nreturn add_target(result__$1,target);\r\n} else {\r\nreturn result__$1;\r\n\r\n}\r\n}\r\n})());\r\n});\r\n/**\r\n * Internal function to validate and process the parameters of `load` and `load-action`.\r\n */\r\nfulcro.client.data_fetch.load_params_STAR_ = (function fulcro$client$data_fetch$load_params_STAR_(state_map,server_property_or_ident,class_or_factory,p__46350){\r\nvar map__46351 = p__46350;\r\nvar map__46351__$1 = ((((!((map__46351 == null)))?(((((map__46351.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46351.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46351):map__46351);\r\nvar target = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46351__$1,new cljs.core.Keyword(null,\"target\",\"target\",253001721));\r\nvar abort_id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46351__$1,new cljs.core.Keyword(null,\"abort-id\",\"abort-id\",1559937819));\r\nvar remote = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__46351__$1,new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576));\r\nvar update_query = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46351__$1,new cljs.core.Keyword(null,\"update-query\",\"update-query\",-1566885791));\r\nvar refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__46351__$1,new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525),cljs.core.PersistentVector.EMPTY);\r\nvar parallel = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__46351__$1,new cljs.core.Keyword(null,\"parallel\",\"parallel\",-1863607128),false);\r\nvar fallback = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46351__$1,new cljs.core.Keyword(null,\"fallback\",\"fallback\",761637929));\r\nvar marker = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__46351__$1,new cljs.core.Keyword(null,\"marker\",\"marker\",865118313),true);\r\nvar params = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46351__$1,new cljs.core.Keyword(null,\"params\",\"params\",710516235));\r\nvar post_mutation = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46351__$1,new cljs.core.Keyword(null,\"post-mutation\",\"post-mutation\",-1076606705));\r\nvar without = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__46351__$1,new cljs.core.Keyword(null,\"without\",\"without\",1107036688),cljs.core.PersistentHashSet.EMPTY);\r\nvar initialize = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__46351__$1,new cljs.core.Keyword(null,\"initialize\",\"initialize\",609952913),false);\r\nvar post_mutation_params = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46351__$1,new cljs.core.Keyword(null,\"post-mutation-params\",\"post-mutation-params\",-849425897));\r\nvar focus = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46351__$1,new cljs.core.Keyword(null,\"focus\",\"focus\",234677911));\r\nif((((target == null)) || (cljs.core.vector_QMARK_(target)))){\r\n} else {\r\nthrow (new Error(\"Assert failed: (or (nil? target) (vector? target))\"));\r\n}\r\n\r\nif((((post_mutation == null)) || ((post_mutation instanceof cljs.core.Symbol)))){\r\n} else {\r\nthrow (new Error(\"Assert failed: (or (nil? post-mutation) (symbol? post-mutation))\"));\r\n}\r\n\r\nif((((fallback == null)) || ((fallback instanceof cljs.core.Symbol)))){\r\n} else {\r\nthrow (new Error(\"Assert failed: (or (nil? fallback) (symbol? fallback))\"));\r\n}\r\n\r\nif((((post_mutation_params == null)) || (cljs.core.map_QMARK_(post_mutation_params)))){\r\n} else {\r\nthrow (new Error(\"Assert failed: (or (nil? post-mutation-params) (map? post-mutation-params))\"));\r\n}\r\n\r\nif(cljs.core.vector_QMARK_(refresh)){\r\n} else {\r\nthrow (new Error(\"Assert failed: (vector? refresh)\"));\r\n}\r\n\r\nif((((params == null)) || (cljs.core.map_QMARK_(params)))){\r\n} else {\r\nthrow (new Error(\"Assert failed: (or (nil? params) (map? params))\"));\r\n}\r\n\r\nif(cljs.core.set_QMARK_(without)){\r\n} else {\r\nthrow (new Error(\"Assert failed: (set? without)\"));\r\n}\r\n\r\nif((((focus == null)) || (cljs.core.vector_QMARK_(focus)))){\r\n} else {\r\nthrow (new Error(\"Assert failed: (or (nil? focus) (vector? focus))\"));\r\n}\r\n\r\nif(((fulcro.util.ident_QMARK_(server_property_or_ident)) || ((server_property_or_ident instanceof cljs.core.Keyword)))){\r\n} else {\r\nthrow (new Error(\"Assert failed: (or (util/ident? server-property-or-ident) (keyword? server-property-or-ident))\"));\r\n}\r\n\r\nvar query_SINGLEQUOTE_ = (cljs.core.truth_(class_or_factory)?(function (){var G__46358 = fulcro.client.primitives.get_query.cljs$core$IFn$_invoke$arity$2(class_or_factory,state_map);\r\nvar G__46358__$1 = (cljs.core.truth_(focus)?fulcro.client.primitives.focus_subquery(G__46358,focus):G__46358);\r\nif(cljs.core.truth_(update_query)){\r\nreturn (update_query.cljs$core$IFn$_invoke$arity$1 ? update_query.cljs$core$IFn$_invoke$arity$1(G__46358__$1) : update_query.call(null,G__46358__$1));\r\n} else {\r\nreturn G__46358__$1;\r\n}\r\n})():null);\r\nvar query = (cljs.core.truth_((function (){var and__3938__auto__ = class_or_factory;\r\nif(cljs.core.truth_(and__3938__auto__)){\r\nreturn cljs.core.map_QMARK_(params);\r\n} else {\r\nreturn and__3938__auto__;\r\n}\r\n})())?cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$1((new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2((new cljs.core.List(null,server_property_or_ident,null,(1),null)),(new cljs.core.List(null,query_SINGLEQUOTE_,null,(1),null)))))),null,(1),null)),(new cljs.core.List(null,params,null,(1),null))))),null,(1),null)))))):(cljs.core.truth_(class_or_factory)?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentArrayMap.createAsIfByAssoc([server_property_or_ident,query_SINGLEQUOTE_])], null):((cljs.core.map_QMARK_(params))?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.List(null,server_property_or_ident,(new cljs.core.List(null,params,null,(1),null)),(2),null))], null):new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [server_property_or_ident], null)\r\n)));\r\nvar marker__$1 = (cljs.core.truth_((function (){var and__3938__auto__ = marker === true;\r\nif(and__3938__auto__){\r\nreturn fulcro.client.impl.data_fetch.special_target_QMARK_(target);\r\n} else {\r\nreturn and__3938__auto__;\r\n}\r\n})())?(function (){\r\ntry{fulcro.logging._log.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),\"fulcro.client.data-fetch\",new cljs.core.Keyword(null,\"line\",\"line\",212345235),85], null),new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"Load of \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(server_property_or_ident),\": Boolean load marker not allowed. Turned off so load target will not overwrite a to-many relation. To fix this warning, set :marker to false or a marker ID.\"].join('')], 0));\r\n}catch (e46361){if((e46361 instanceof Error)){\r\nvar e__31518__auto___46370 = e46361;\r\nfulcro.logging._log.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),\"fulcro.client.data-fetch\",new cljs.core.Keyword(null,\"line\",\"line\",212345235),85], null),new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Log statement failed (arguments did not evaluate).\",e__31518__auto___46370], 0));\r\n} else {\r\nthrow e46361;\r\n\r\n}\r\n}\r\nreturn false;\r\n})()\r\n:marker);\r\nreturn cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525),new cljs.core.Keyword(null,\"parallel\",\"parallel\",-1863607128),new cljs.core.Keyword(null,\"fallback\",\"fallback\",761637929),new cljs.core.Keyword(null,\"marker\",\"marker\",865118313),new cljs.core.Keyword(null,\"post-mutation\",\"post-mutation\",-1076606705),new cljs.core.Keyword(null,\"without\",\"without\",1107036688),new cljs.core.Keyword(null,\"initialize\",\"initialize\",609952913),new cljs.core.Keyword(null,\"post-mutation-params\",\"post-mutation-params\",-849425897),new cljs.core.Keyword(null,\"focus\",\"focus\",234677911),new cljs.core.Keyword(null,\"target\",\"target\",253001721),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(null,\"abort-id\",\"abort-id\",1559937819)],[remote,fulcro.client.data_fetch.computed_refresh(refresh,server_property_or_ident,target),parallel,fallback,marker__$1,post_mutation,without,(cljs.core.truth_((function (){var and__3938__auto__ = initialize;\r\nif(cljs.core.truth_(and__3938__auto__)){\r\nvar and__3938__auto____$1 = class_or_factory;\r\nif(cljs.core.truth_(and__3938__auto____$1)){\r\nreturn server_property_or_ident;\r\n} else {\r\nreturn and__3938__auto____$1;\r\n}\r\n} else {\r\nreturn and__3938__auto__;\r\n}\r\n})())?(function (){var class$ = (function (){var temp__5455__auto__ = new cljs.core.Keyword(null,\"class\",\"class\",-2030961996).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(class_or_factory));\r\nif(cljs.core.truth_(temp__5455__auto__)){\r\nvar c = temp__5455__auto__;\r\nreturn c;\r\n} else {\r\nreturn class_or_factory;\r\n}\r\n})();\r\nreturn cljs.core.PersistentArrayMap.createAsIfByAssoc([server_property_or_ident,((cljs.core.map_QMARK_(initialize))?initialize:(cljs.core.truth_((function (){var and__3938__auto__ = initialize;\r\nif(cljs.core.truth_(and__3938__auto__)){\r\nreturn fulcro.client.primitives.has_initial_app_state_QMARK_(class$);\r\n} else {\r\nreturn and__3938__auto__;\r\n}\r\n})())?fulcro.client.primitives.get_initial_state(class$,cljs.core.PersistentArrayMap.EMPTY):cljs.core.PersistentArrayMap.EMPTY\r\n))]);\r\n})():null),post_mutation_params,focus,target,query,abort_id]);\r\n});\r\n/**\r\n * Generates a transaction expression for a load mutation. It includes a follow-on read for :ui/loading-data. The args\r\n *   must be a map of the parameters usable from `load`. Returns a complete tx (as a vector), not just the mutation\r\n *   since follow-on reads are part of the mutation. You may use `concat` to join this with additional expressions.\r\n */\r\nfulcro.client.data_fetch.load_mutation = (function fulcro$client$data_fetch$load_mutation(load_args){\r\nif((((new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525).cljs$core$IFn$_invoke$arity$1(load_args) == null)) || (cljs.core.vector_QMARK_(new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525).cljs$core$IFn$_invoke$arity$1(load_args))))){\r\n} else {\r\nthrow (new Error(\"Assert failed: (or (nil? (:refresh load-args)) (vector? (:refresh load-args)))\"));\r\n}\r\n\r\nvar refresh = (function (){var or__3949__auto__ = new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525).cljs$core$IFn$_invoke$arity$1(load_args);\r\nif(cljs.core.truth_(or__3949__auto__)){\r\nreturn or__3949__auto__;\r\n} else {\r\nreturn cljs.core.PersistentVector.EMPTY;\r\n}\r\n})();\r\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.List(null,new cljs.core.Symbol(\"fulcro\",\"load\",\"fulcro/load\",-1361504416,null),(new cljs.core.List(null,load_args,null,(1),null)),(2),null)),new cljs.core.Keyword(\"ui\",\"loading-data\",\"ui/loading-data\",-1566515143)], null),refresh);\r\n});\r\n/**\r\n * Load data from the server.\r\n * \r\n *   This function triggers a server interaction and normalizes the server response into your app state database. During\r\n *   operation it also adds (by default) fetch markers into the app state so you can show busy indicators on the UI\r\n *   components that are waiting for data. The `:target` parameter can be used to place the data somewhere besides app\r\n *   state root (which is the default).\r\n * \r\n *   The server will receive a query of the form: [({server-property (prim/get-query class-or-factory)} params)], which\r\n *   a Fulcro parser will correctly parse as a join on server-property with the given subquery and params. See the AST and\r\n *   instructions on parsing queries in the developer's guide.\r\n * \r\n *   Parameters:\r\n *   - `app-or-comp-or-reconciler` : A component instance, Fulcro application, or reconciler\r\n *   - `server-property-or-ident` : A keyword or ident that represents the root of the query to send to the server. If this is an ident\r\n *   you are loading a specific entity from the database into a local app db table. A custom target will be ignored.\r\n *   - `class-or-factory` : A component that implements IQuery, or a factory for it (if using dynamic queries). This will be combined with `server-property` into a join for the server query. Needed to normalize results.\r\n *  class-or-factory can be nil, in which case the resulting server query will not be a join.\r\n *   - `config` : A map of load configuration parameters.\r\n * \r\n *   Config (all optional):\r\n *   - `target` - An assoc-in path at which to put the result of the Subquery (as an edge (normalized) or value (not normalized)).\r\n *  Can also be special targets (multiple-targets, append-to,\r\n *  prepend-to, or replace-at). If you are loading by keyword (into root), then this relocates the result (ident or value) after load.\r\n *  When loading an entity (by ident), then this option will place additional idents at the target path(s) that point to that entity.\r\n *   - `initialize` - Optional. If `true`, uses `get-initial-state` on class-or-factory to  get a basis for merge of the result. This allows you\r\n *  to use initial state to pre-populate loads with things like UI concerns. If `:initialize` is passed a map, then it uses that as\r\n *  the base target merge value for class-or-factory instead.\r\n *   - `remote` - Optional. Keyword name of the remote that this load should come from.\r\n *   - `params` - Optional parameters to add to the generated query\r\n *   - `marker` - Boolean to determine if you want a fetch-state marker in your app state. Defaults to true. Add `:ui/fetch-state` to the\r\n *   target component in order to see this data in your component.\r\n *   - `refresh` - A vector of keywords that will cause component re-renders after the final load/mutations. Same as follow-on\r\n *   reads in normal `transact!`\r\n *   - `parallel` - If true, indicates that this load does not have to go through the sequential network queue. Defaults to false.\r\n *   - `post-mutation` - A mutation (symbol) to run after the data is merged. Note, if target is supplied be sure your post mutation\r\n *   should expect the data at the targeted location. The `env` of that mutation will be the env of the load (if available), but will also include `:load-request`.\r\n *   - `post-mutation-params` - An optional map  that will be passed to the post-mutation when it is called. May only contain raw data, not code!\r\n *   - `fallback` - A mutation (symbol) to run if there is a server/network error. The `env` of the fallback will be the env of the load (if available), but will also include `:load-request`.\r\n *   - `update-query` - A optional function that can transform the component query before sending to remote.\r\n *    For example, to focus a subquery using update-query:\r\n *        {:update-query #(prim/focus-subquery % [:my {:sub [:query]}])}\r\n * \r\n *    Removing properties (like previous :without option):\r\n *        {:update-query #(df/elide-query-nodes % #{:my :elisions})}\r\n *   - `focus` - An optional subquery to focus on some parts of the original query.\r\n *   - `without` - An optional set of keywords that should (recursively) be removed from the query.\r\n *   - `abort-id` - An ID (typically a keyword) that you can use to cancel the load via `fulcro.client/abort`.\r\n * \r\n *   Notes on UI Refresh:\r\n *   The refresh list will automatically include what you load (as a non-duplicate):\r\n *   - When target is set and has 2+ elements: refresh will include an ident of the first two elements\r\n *   - e.g. `:target [:a 1 :thing]` -> `:refresh [[:a 1]]`\r\n *   - When target has a single element, refresh will include that element as a keyword\r\n *   - e.g. `:target [:thing]` -> `:refresh [:thing]`\r\n *   - When there is no target:\r\n *   - If prop-or-ident is a kw -> `:refresh [kw]`\r\n *   - If prop-or-ident is an ident -> `:refresh [ident]`\r\n *   In all cases, any explicit refresh things you include will not be dropped. The computed refresh list\r\n *   is essentially a `(-> original-refresh-list set add-computed-bits vec)`.\r\n *   \r\n */\r\nfulcro.client.data_fetch.load = (function fulcro$client$data_fetch$load(var_args){\r\nvar G__46380 = arguments.length;\r\nswitch (G__46380) {\r\ncase 3:\r\nreturn fulcro.client.data_fetch.load.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ncase 4:\r\nreturn fulcro.client.data_fetch.load.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\nfulcro.client.data_fetch.load.cljs$core$IFn$_invoke$arity$3 = (function (app_or_comp_or_reconciler,server_property_or_ident,class_or_factory){\r\nreturn fulcro.client.data_fetch.load.cljs$core$IFn$_invoke$arity$4(app_or_comp_or_reconciler,server_property_or_ident,class_or_factory,cljs.core.PersistentArrayMap.EMPTY);\r\n});\r\n\r\nfulcro.client.data_fetch.load.cljs$core$IFn$_invoke$arity$4 = (function (app_or_comp_or_reconciler,server_property_or_ident,class_or_factory,config){\r\nif((function (){var or__3949__auto__ = fulcro.client.primitives.component_QMARK_(app_or_comp_or_reconciler);\r\nif(or__3949__auto__){\r\nreturn or__3949__auto__;\r\n} else {\r\nvar or__3949__auto____$1 = fulcro.client.primitives.reconciler_QMARK_(app_or_comp_or_reconciler);\r\nif(or__3949__auto____$1){\r\nreturn or__3949__auto____$1;\r\n} else {\r\nif(!((app_or_comp_or_reconciler == null))){\r\nif(((false) || ((cljs.core.PROTOCOL_SENTINEL === app_or_comp_or_reconciler.fulcro$client$FulcroApplication$)))){\r\nreturn true;\r\n} else {\r\nreturn false;\r\n}\r\n} else {\r\nreturn false;\r\n}\r\n}\r\n}\r\n})()){\r\n} else {\r\nthrow (new Error(\"Assert failed: (or (prim/component? app-or-comp-or-reconciler) (prim/reconciler? app-or-comp-or-reconciler) (implements? fc/FulcroApplication app-or-comp-or-reconciler))\"));\r\n}\r\n\r\nvar config__$1 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"marker\",\"marker\",865118313),true,new cljs.core.Keyword(null,\"parallel\",\"parallel\",-1863607128),false,new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"without\",\"without\",1107036688),cljs.core.PersistentHashSet.EMPTY], null),config], 0));\r\nvar component_or_reconciler = ((((!((app_or_comp_or_reconciler == null)))?((((false) || ((cljs.core.PROTOCOL_SENTINEL === app_or_comp_or_reconciler.fulcro$client$FulcroApplication$))))?true:false):false))?cljs.core.get.cljs$core$IFn$_invoke$arity$2(app_or_comp_or_reconciler,new cljs.core.Keyword(null,\"reconciler\",\"reconciler\",-1832826966)):app_or_comp_or_reconciler);\r\nvar reconciler = ((fulcro.client.primitives.reconciler_QMARK_(component_or_reconciler))?component_or_reconciler:fulcro.client.primitives.get_reconciler(component_or_reconciler));\r\nvar state = fulcro.client.primitives.app_state(reconciler);\r\nvar mutation_args = fulcro.client.data_fetch.load_params_STAR_(cljs.core.deref(state),server_property_or_ident,class_or_factory,config__$1);\r\nreturn fulcro.client.primitives.transact_BANG_.cljs$core$IFn$_invoke$arity$2(component_or_reconciler,fulcro.client.data_fetch.load_mutation(mutation_args));\r\n});\r\n\r\nfulcro.client.data_fetch.load.cljs$lang$maxFixedArity = 4;\r\n\r\n/**\r\n * \r\n *   See `load` for descriptions of parameters and config.\r\n * \r\n *   Queue up a remote load from within an already-running mutation. Similar to `load`, but usable from\r\n *   within a mutation. IMPORTANT: Make sure you specify the `:remote` parameter to this function, as\r\n *   well as including a `remote-load` for that remote.\r\n * \r\n *   Note the `:refresh` parameter is supported, and defaults to empty. If you want anything to refresh other than\r\n *   the targeted component you will want to include the :refresh parameter.\r\n * \r\n *   To use this function make sure your mutation specifies a return value with a remote. The remote\r\n *   should use the helper function `remote-load` as it's value:\r\n * \r\n *   { :remote (df/remote-load env)\r\n *     ; NOTE: :remote must be the keyword name of a legal remote in your system; however,\r\n *     ; You must still name the remote in the `load-action` if it is something other than default.\r\n *     :action (fn []\r\n *        (load-action env ...)\r\n *        ; other optimistic updates/state changes)}\r\n * \r\n *   `env` is the mutation's environment parameter.\r\n */\r\nfulcro.client.data_fetch.load_action = (function fulcro$client$data_fetch$load_action(var_args){\r\nvar G__46396 = arguments.length;\r\nswitch (G__46396) {\r\ncase 3:\r\nreturn fulcro.client.data_fetch.load_action.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ncase 4:\r\nreturn fulcro.client.data_fetch.load_action.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\nfulcro.client.data_fetch.load_action.cljs$core$IFn$_invoke$arity$3 = (function (env,server_property_or_ident,SubqueryClass){\r\nreturn fulcro.client.data_fetch.load_action.cljs$core$IFn$_invoke$arity$4(env,server_property_or_ident,SubqueryClass,cljs.core.PersistentArrayMap.EMPTY);\r\n});\r\n\r\nfulcro.client.data_fetch.load_action.cljs$core$IFn$_invoke$arity$4 = (function (env,server_property_or_ident,SubqueryClass,config){\r\nif(((cljs.core.map_QMARK_(env)) && (cljs.core.contains_QMARK_(env,new cljs.core.Keyword(null,\"state\",\"state\",-1988618099))))){\r\n} else {\r\nthrow (new Error(\"Assert failed: (and (map? env) (contains? env :state))\"));\r\n}\r\n\r\nvar config__$1 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"marker\",\"marker\",865118313),true,new cljs.core.Keyword(null,\"parallel\",\"parallel\",-1863607128),false,new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"without\",\"without\",1107036688),cljs.core.PersistentHashSet.EMPTY], null),config], 0));\r\nvar state_map = cljs.core.deref(new cljs.core.Keyword(null,\"state\",\"state\",-1988618099).cljs$core$IFn$_invoke$arity$1(env));\r\nreturn fulcro.client.impl.data_fetch.mark_ready(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(fulcro.client.data_fetch.load_params_STAR_(state_map,server_property_or_ident,SubqueryClass,config__$1),new cljs.core.Keyword(null,\"env\",\"env\",-1815813235),env));\r\n});\r\n\r\nfulcro.client.data_fetch.load_action.cljs$lang$maxFixedArity = 4;\r\n\r\n/**\r\n * Load a field of the current component. Runs `prim/transact!`.\r\n * \r\n *   Parameters\r\n *   - `component`: The component (**instance**, not class). This component MUST have an Ident.\r\n *   - `field`: A field on the component's query that you wish to load.\r\n *   - `parameters` : A map of: (will also accept as named parameters)\r\n * \r\n *  - `without`: See `load`\r\n *  - `params`: See `load`\r\n *  - `post-mutation`: See `load`\r\n *  - `post-mutation-params`: See `load`\r\n *  - `parallel`: See `load`\r\n *  - `fallback`: See `load`\r\n *  - `marker`: See `load`\r\n *  - `remote`: See `load`\r\n *  - `refresh`: See `load`\r\n *  - `abort-id`: See `load`\r\n * \r\n *   NOTE: The :ui/loading-data attribute is always included in refresh. This means you probably don't want to\r\n *   query for that attribute near the root of your UI. Instead, create some leaf component with an ident that queries for :ui/loading-data\r\n *   using a link  query (e.g. `[:ui/loading-data '_]`). The presence of the ident on components will enable query optimization, which can\r\n *   improve your frame rate because we will not have to run a full root query.\r\n * \r\n *   WARNING: If you're using dynamic queries, you won't really know what factory your parent is using,\r\n *   nor can you pass it as a parameter to this function. Therefore, it is not recommended to use load-field from within\r\n *   a component that has a dynamic query unless you can base it on the original static query (which\r\n *   is what this function will use).\r\n *   \r\n */\r\nfulcro.client.data_fetch.load_field = (function fulcro$client$data_fetch$load_field(var_args){\r\nvar args__4534__auto__ = [];\r\nvar len__4531__auto___46409 = arguments.length;\r\nvar i__4532__auto___46410 = (0);\r\nwhile(true){\r\nif((i__4532__auto___46410 < len__4531__auto___46409)){\r\nargs__4534__auto__.push((arguments[i__4532__auto___46410]));\r\n\r\nvar G__46412 = (i__4532__auto___46410 + (1));\r\ni__4532__auto___46410 = G__46412;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4535__auto__ = ((((2) < args__4534__auto__.length))?(new cljs.core.IndexedSeq(args__4534__auto__.slice((2)),(0),null)):null);\r\nreturn fulcro.client.data_fetch.load_field.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4535__auto__);\r\n});\r\n\r\nfulcro.client.data_fetch.load_field.cljs$core$IFn$_invoke$arity$variadic = (function (component,field,params){\r\nvar params__$1 = ((cljs.core.map_QMARK_(cljs.core.first(params)))?cljs.core.first(params):params);\r\nvar map__46406 = params__$1;\r\nvar map__46406__$1 = ((((!((map__46406 == null)))?(((((map__46406.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46406.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46406):map__46406);\r\nvar abort_id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46406__$1,new cljs.core.Keyword(null,\"abort-id\",\"abort-id\",1559937819));\r\nvar remote = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__46406__$1,new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576));\r\nvar refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__46406__$1,new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525),cljs.core.PersistentVector.EMPTY);\r\nvar parallel = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46406__$1,new cljs.core.Keyword(null,\"parallel\",\"parallel\",-1863607128));\r\nvar fallback = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46406__$1,new cljs.core.Keyword(null,\"fallback\",\"fallback\",761637929));\r\nvar marker = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__46406__$1,new cljs.core.Keyword(null,\"marker\",\"marker\",865118313),true);\r\nvar params__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46406__$1,new cljs.core.Keyword(null,\"params\",\"params\",710516235));\r\nvar post_mutation = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46406__$1,new cljs.core.Keyword(null,\"post-mutation\",\"post-mutation\",-1076606705));\r\nvar without = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46406__$1,new cljs.core.Keyword(null,\"without\",\"without\",1107036688));\r\nvar post_mutation_params = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46406__$1,new cljs.core.Keyword(null,\"post-mutation-params\",\"post-mutation-params\",-849425897));\r\nvar state_map = (function (){var G__46408 = component;\r\nvar G__46408__$1 = (((G__46408 == null))?null:fulcro.client.primitives.get_reconciler(G__46408));\r\nvar G__46408__$2 = (((G__46408__$1 == null))?null:fulcro.client.primitives.app_state(G__46408__$1));\r\nif((G__46408__$2 == null)){\r\nreturn null;\r\n} else {\r\nreturn cljs.core.deref(G__46408__$2);\r\n}\r\n})();\r\nif(cljs.core.truth_(fallback)){\r\nif((fallback instanceof cljs.core.Symbol)){\r\n} else {\r\nthrow (new Error([\"Assert failed: \",\"Fallback must be a mutation symbol.\",\"\\n\",\"(symbol? fallback)\"].join('')));\r\n}\r\n} else {\r\n}\r\n\r\nreturn fulcro.client.primitives.transact_BANG_.cljs$core$IFn$_invoke$arity$2(component,cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.List(null,new cljs.core.Symbol(\"fulcro\",\"load\",\"fulcro/load\",-1361504416,null),(new cljs.core.List(null,cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525),new cljs.core.Keyword(null,\"parallel\",\"parallel\",-1863607128),new cljs.core.Keyword(null,\"fallback\",\"fallback\",761637929),new cljs.core.Keyword(null,\"marker\",\"marker\",865118313),new cljs.core.Keyword(null,\"params\",\"params\",710516235),new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),new cljs.core.Keyword(null,\"post-mutation\",\"post-mutation\",-1076606705),new cljs.core.Keyword(null,\"without\",\"without\",1107036688),new cljs.core.Keyword(null,\"ident\",\"ident\",-742346),new cljs.core.Keyword(null,\"post-mutation-params\",\"post-mutation-params\",-849425897),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(null,\"abort-id\",\"abort-id\",1559937819)],[remote,refresh,parallel,fallback,marker,params__$2,field,post_mutation,without,fulcro.client.primitives.get_ident.cljs$core$IFn$_invoke$arity$1(component),post_mutation_params,fulcro.client.primitives.focus_query(fulcro.client.primitives.get_query.cljs$core$IFn$_invoke$arity$2(component,state_map),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [field], null)),abort_id]),null,(1),null)),(2),null)),new cljs.core.Keyword(\"ui\",\"loading-data\",\"ui/loading-data\",-1566515143),new cljs.core.Keyword(\"ui.fulcro.client.data-fetch.load-markers\",\"by-id\",\"ui.fulcro.client.data-fetch.load-markers/by-id\",763321486),fulcro.client.primitives.get_ident.cljs$core$IFn$_invoke$arity$1(component)], null),refresh));\r\n});\r\n\r\nfulcro.client.data_fetch.load_field.cljs$lang$maxFixedArity = (2);\r\n\r\n/** @this {Function} */\r\nfulcro.client.data_fetch.load_field.cljs$lang$applyTo = (function (seq46403){\r\nvar G__46404 = cljs.core.first(seq46403);\r\nvar seq46403__$1 = cljs.core.next(seq46403);\r\nvar G__46405 = cljs.core.first(seq46403__$1);\r\nvar seq46403__$2 = cljs.core.next(seq46403__$1);\r\nvar self__4518__auto__ = this;\r\nreturn self__4518__auto__.cljs$core$IFn$_invoke$arity$variadic(G__46404,G__46405,seq46403__$2);\r\n});\r\n\r\n/**\r\n * Queue up a remote load of a component's field from within an already-running mutation. Similar to `load-field`\r\n *   but usable from within a mutation. Note the `:refresh` parameter is supported, and defaults to nothing, even for\r\n *   fields, in actions. If you want anything to refresh other than the targeted component you will want to use the\r\n *   :refresh parameter.\r\n * \r\n *   `params` can be a map or named parameters, just like in `load-field`.\r\n * \r\n *   To use this function make sure your mutation specifies a return value with a remote. The remote\r\n *   should use the helper function `remote-load` as it's value:\r\n * \r\n *   { :remote (df/remote-load env)\r\n *  ; NOTE: :remote must be the keyword name of a legal remote in your system; however,\r\n *  ; You must still name the remote in the `load-action` if it is something other than default.\r\n *  :action (fn []\r\n *     (load-field-action ...)\r\n *     ; other optimistic updates/state changes)}\r\n * \r\n *   It is preferable that you use `env` instead of `app-state` for the first argument, as this allows more details to\r\n *   be available for post mutations and fallbacks.\r\n *   \r\n */\r\nfulcro.client.data_fetch.load_field_action = (function fulcro$client$data_fetch$load_field_action(var_args){\r\nvar args__4534__auto__ = [];\r\nvar len__4531__auto___46460 = arguments.length;\r\nvar i__4532__auto___46461 = (0);\r\nwhile(true){\r\nif((i__4532__auto___46461 < len__4531__auto___46460)){\r\nargs__4534__auto__.push((arguments[i__4532__auto___46461]));\r\n\r\nvar G__46463 = (i__4532__auto___46461 + (1));\r\ni__4532__auto___46461 = G__46463;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4535__auto__ = ((((4) < args__4534__auto__.length))?(new cljs.core.IndexedSeq(args__4534__auto__.slice((4)),(0),null)):null);\r\nreturn fulcro.client.data_fetch.load_field_action.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),argseq__4535__auto__);\r\n});\r\n\r\nfulcro.client.data_fetch.load_field_action.cljs$core$IFn$_invoke$arity$variadic = (function (env_or_app_state,component_class,ident,field,params){\r\nvar params__$1 = ((cljs.core.map_QMARK_(cljs.core.first(params)))?cljs.core.first(params):params);\r\nvar map__46439 = params__$1;\r\nvar map__46439__$1 = ((((!((map__46439 == null)))?(((((map__46439.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46439.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46439):map__46439);\r\nvar abort_id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46439__$1,new cljs.core.Keyword(null,\"abort-id\",\"abort-id\",1559937819));\r\nvar remote = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__46439__$1,new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576));\r\nvar refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__46439__$1,new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525),cljs.core.PersistentVector.EMPTY);\r\nvar parallel = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46439__$1,new cljs.core.Keyword(null,\"parallel\",\"parallel\",-1863607128));\r\nvar fallback = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46439__$1,new cljs.core.Keyword(null,\"fallback\",\"fallback\",761637929));\r\nvar marker = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__46439__$1,new cljs.core.Keyword(null,\"marker\",\"marker\",865118313),true);\r\nvar params__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46439__$1,new cljs.core.Keyword(null,\"params\",\"params\",710516235));\r\nvar post_mutation = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46439__$1,new cljs.core.Keyword(null,\"post-mutation\",\"post-mutation\",-1076606705));\r\nvar without = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46439__$1,new cljs.core.Keyword(null,\"without\",\"without\",1107036688));\r\nvar post_mutation_params = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46439__$1,new cljs.core.Keyword(null,\"post-mutation-params\",\"post-mutation-params\",-849425897));\r\nvar env = ((((cljs.core.map_QMARK_(env_or_app_state)) && (cljs.core.contains_QMARK_(env_or_app_state,new cljs.core.Keyword(null,\"state\",\"state\",-1988618099)))))?env_or_app_state:new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),env_or_app_state], null));\r\nvar state_map = (function (){var G__46447 = env;\r\nvar G__46447__$1 = (((G__46447 == null))?null:new cljs.core.Keyword(null,\"state\",\"state\",-1988618099).cljs$core$IFn$_invoke$arity$1(G__46447));\r\nif((G__46447__$1 == null)){\r\nreturn null;\r\n} else {\r\nreturn cljs.core.deref(G__46447__$1);\r\n}\r\n})();\r\nreturn fulcro.client.impl.data_fetch.mark_ready(cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525),new cljs.core.Keyword(null,\"parallel\",\"parallel\",-1863607128),new cljs.core.Keyword(null,\"fallback\",\"fallback\",761637929),new cljs.core.Keyword(null,\"marker\",\"marker\",865118313),new cljs.core.Keyword(null,\"params\",\"params\",710516235),new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),new cljs.core.Keyword(null,\"env\",\"env\",-1815813235),new cljs.core.Keyword(null,\"post-mutation\",\"post-mutation\",-1076606705),new cljs.core.Keyword(null,\"without\",\"without\",1107036688),new cljs.core.Keyword(null,\"ident\",\"ident\",-742346),new cljs.core.Keyword(null,\"post-mutation-params\",\"post-mutation-params\",-849425897),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(null,\"abort-id\",\"abort-id\",1559937819)],[remote,refresh,parallel,fallback,marker,params__$2,field,env,post_mutation,without,ident,post_mutation_params,fulcro.client.primitives.focus_query(fulcro.client.primitives.get_query.cljs$core$IFn$_invoke$arity$2(component_class,state_map),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [field], null)),abort_id]));\r\n});\r\n\r\nfulcro.client.data_fetch.load_field_action.cljs$lang$maxFixedArity = (4);\r\n\r\n/** @this {Function} */\r\nfulcro.client.data_fetch.load_field_action.cljs$lang$applyTo = (function (seq46434){\r\nvar G__46435 = cljs.core.first(seq46434);\r\nvar seq46434__$1 = cljs.core.next(seq46434);\r\nvar G__46436 = cljs.core.first(seq46434__$1);\r\nvar seq46434__$2 = cljs.core.next(seq46434__$1);\r\nvar G__46437 = cljs.core.first(seq46434__$2);\r\nvar seq46434__$3 = cljs.core.next(seq46434__$2);\r\nvar G__46438 = cljs.core.first(seq46434__$3);\r\nvar seq46434__$4 = cljs.core.next(seq46434__$3);\r\nvar self__4518__auto__ = this;\r\nreturn self__4518__auto__.cljs$core$IFn$_invoke$arity$variadic(G__46435,G__46436,G__46437,G__46438,seq46434__$4);\r\n});\r\n\r\n/**\r\n * Returns the correct value for the `:remote` side of a mutation that should act as a\r\n *   trigger for remote loads. Must be used in conjunction with running `load-action` or\r\n *   `load-field-action` in the `:action` side of the mutation (which queues the exact things to\r\n *   load).\r\n */\r\nfulcro.client.data_fetch.remote_load = (function fulcro$client$data_fetch$remote_load(parsing_env){\r\nvar ast = new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068).cljs$core$IFn$_invoke$arity$1(parsing_env);\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(ast,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587),new cljs.core.Symbol(\"fulcro\",\"load\",\"fulcro/load\",-1361504416,null),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510),new cljs.core.Symbol(\"fulcro\",\"load\",\"fulcro/load\",-1361504416,null)], 0));\r\n});\r\nfulcro.client.data_fetch.data_state_QMARK_ = (function fulcro$client$data_fetch$data_state_QMARK_(state){\r\nreturn fulcro.client.impl.data_fetch.data_state_QMARK_(state);\r\n});\r\nfulcro.client.data_fetch.ready_QMARK_ = (function fulcro$client$data_fetch$ready_QMARK_(state){\r\nreturn fulcro.client.impl.data_fetch.ready_QMARK_(state);\r\n});\r\nfulcro.client.data_fetch.loading_QMARK_ = (function fulcro$client$data_fetch$loading_QMARK_(state){\r\nreturn fulcro.client.impl.data_fetch.loading_QMARK_(state);\r\n});\r\nfulcro.client.data_fetch.failed_QMARK_ = (function fulcro$client$data_fetch$failed_QMARK_(state){\r\nreturn fulcro.client.impl.data_fetch.failed_QMARK_(state);\r\n});\r\n/**\r\n * Custom rendering for use while data is being lazily loaded using the data fetch methods\r\n *   load-collection and load-field.\r\n * \r\n *   `data-render` : the render method to call once the data has been successfully loaded from\r\n *   the server. Can be a factory method or a React rendering function.\r\n * \r\n *   `props` : the React properties for the element to be loaded.\r\n * \r\n *   Optional:\r\n * \r\n *   `ready-render` : the render method to call when the desired data has been marked as ready\r\n *   to load, but the server request has not yet been sent.\r\n * \r\n *   `loading-render` : render method once the server request has been sent, and UI is waiting\r\n *   on the response\r\n * \r\n *   `failed-render` : render method when the server returns a failure state for the requested data\r\n * \r\n *   `not-present-render` : called when props is nil (helpful for differentiating between a nil and\r\n *   empty response from the server).\r\n * \r\n *   Example Usage:\r\n * \r\n *   ```\r\n *   (defui Thing\r\n *  static prim/IQuery\r\n *  (query [this] [{:thing2 (prim/get-query Thing2)}])\r\n *  Object\r\n *  (componentDidMount [this]\r\n *     (load-field this :thing2))\r\n * \r\n *  (render [this]\r\n *    (let [thing2 (:thing2 (prim/props this))]\r\n *      (lazily-loaded ui-thing2 thing2))))\r\n * \r\n *   (defui Thing2\r\n *  static prim/IQuery\r\n *  (query [this] [:ui/fetch-state])\r\n *  Object\r\n *  (render [this]\r\n *    (display-thing-2))\r\n * \r\n *   (def ui-thing2 (prim/factory Thing2))\r\n *   ```\r\n */\r\nfulcro.client.data_fetch.lazily_loaded = (function fulcro$client$data_fetch$lazily_loaded(var_args){\r\nvar args__4534__auto__ = [];\r\nvar len__4531__auto___46582 = arguments.length;\r\nvar i__4532__auto___46583 = (0);\r\nwhile(true){\r\nif((i__4532__auto___46583 < len__4531__auto___46582)){\r\nargs__4534__auto__.push((arguments[i__4532__auto___46583]));\r\n\r\nvar G__46587 = (i__4532__auto___46583 + (1));\r\ni__4532__auto___46583 = G__46587;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4535__auto__ = ((((2) < args__4534__auto__.length))?(new cljs.core.IndexedSeq(args__4534__auto__.slice((2)),(0),null)):null);\r\nreturn fulcro.client.data_fetch.lazily_loaded.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4535__auto__);\r\n});\r\n\r\nfulcro.client.data_fetch.lazily_loaded.cljs$core$IFn$_invoke$arity$variadic = (function (data_render,props,p__46558){\r\nvar map__46559 = p__46558;\r\nvar map__46559__$1 = ((((!((map__46559 == null)))?(((((map__46559.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46559.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46559):map__46559);\r\nvar ready_render = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__46559__$1,new cljs.core.Keyword(null,\"ready-render\",\"ready-render\",-1421004936),((function (map__46559,map__46559__$1){\r\nreturn (function (_){\r\nreturn \"Queued\";\r\n});})(map__46559,map__46559__$1))\r\n);\r\nvar loading_render = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__46559__$1,new cljs.core.Keyword(null,\"loading-render\",\"loading-render\",-1821208169),((function (map__46559,map__46559__$1,ready_render){\r\nreturn (function (_){\r\nreturn \"Loading...\";\r\n});})(map__46559,map__46559__$1,ready_render))\r\n);\r\nvar failed_render = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__46559__$1,new cljs.core.Keyword(null,\"failed-render\",\"failed-render\",-433071277),((function (map__46559,map__46559__$1,ready_render,loading_render){\r\nreturn (function (_){\r\nreturn \"Loading error!\";\r\n});})(map__46559,map__46559__$1,ready_render,loading_render))\r\n);\r\nvar not_present_render = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46559__$1,new cljs.core.Keyword(null,\"not-present-render\",\"not-present-render\",-946766938));\r\nvar state = new cljs.core.Keyword(\"ui\",\"fetch-state\",\"ui/fetch-state\",1030289927).cljs$core$IFn$_invoke$arity$1(props);\r\nif(cljs.core.truth_(fulcro.client.data_fetch.ready_QMARK_(state))){\r\nreturn (ready_render.cljs$core$IFn$_invoke$arity$1 ? ready_render.cljs$core$IFn$_invoke$arity$1(props) : ready_render.call(null,props));\r\n} else {\r\nif(cljs.core.truth_(fulcro.client.data_fetch.loading_QMARK_(state))){\r\nreturn (loading_render.cljs$core$IFn$_invoke$arity$1 ? loading_render.cljs$core$IFn$_invoke$arity$1(props) : loading_render.call(null,props));\r\n} else {\r\nif(cljs.core.truth_(fulcro.client.data_fetch.failed_QMARK_(state))){\r\nreturn (failed_render.cljs$core$IFn$_invoke$arity$1 ? failed_render.cljs$core$IFn$_invoke$arity$1(props) : failed_render.call(null,props));\r\n} else {\r\nif(cljs.core.truth_((function (){var and__3938__auto__ = not_present_render;\r\nif(cljs.core.truth_(and__3938__auto__)){\r\nreturn (props == null);\r\n} else {\r\nreturn and__3938__auto__;\r\n}\r\n})())){\r\nreturn (not_present_render.cljs$core$IFn$_invoke$arity$1 ? not_present_render.cljs$core$IFn$_invoke$arity$1(props) : not_present_render.call(null,props));\r\n} else {\r\nreturn (data_render.cljs$core$IFn$_invoke$arity$1 ? data_render.cljs$core$IFn$_invoke$arity$1(props) : data_render.call(null,props));\r\n\r\n}\r\n}\r\n}\r\n}\r\n});\r\n\r\nfulcro.client.data_fetch.lazily_loaded.cljs$lang$maxFixedArity = (2);\r\n\r\n/** @this {Function} */\r\nfulcro.client.data_fetch.lazily_loaded.cljs$lang$applyTo = (function (seq46548){\r\nvar G__46549 = cljs.core.first(seq46548);\r\nvar seq46548__$1 = cljs.core.next(seq46548);\r\nvar G__46550 = cljs.core.first(seq46548__$1);\r\nvar seq46548__$2 = cljs.core.next(seq46548__$1);\r\nvar self__4518__auto__ = this;\r\nreturn self__4518__auto__.cljs$core$IFn$_invoke$arity$variadic(G__46549,G__46550,seq46548__$2);\r\n});\r\n\r\nfulcro.client.data_fetch.refresh_BANG_ = (function fulcro$client$data_fetch$refresh_BANG_(var_args){\r\nvar G__46600 = arguments.length;\r\nswitch (G__46600) {\r\ncase 2:\r\nreturn fulcro.client.data_fetch.refresh_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 1:\r\nreturn fulcro.client.data_fetch.refresh_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\nfulcro.client.data_fetch.refresh_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (component,load_options){\r\nreturn fulcro.client.data_fetch.load.cljs$core$IFn$_invoke$arity$4(component,fulcro.client.primitives.get_ident.cljs$core$IFn$_invoke$arity$1(component),fulcro.client.primitives.react_type(component),load_options);\r\n});\r\n\r\nfulcro.client.data_fetch.refresh_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (component){\r\nreturn fulcro.client.data_fetch.load.cljs$core$IFn$_invoke$arity$3(component,fulcro.client.primitives.get_ident.cljs$core$IFn$_invoke$arity$1(component),fulcro.client.primitives.react_type(component));\r\n});\r\n\r\nfulcro.client.data_fetch.refresh_BANG_.cljs$lang$maxFixedArity = 2;\r\n\r\nfulcro.client.data_fetch.load_STAR_ = (function fulcro$client$data_fetch$load_STAR_(env,p__46605){\r\nvar map__46606 = p__46605;\r\nvar map__46606__$1 = ((((!((map__46606 == null)))?(((((map__46606.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46606.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46606):map__46606);\r\nvar config = map__46606__$1;\r\nvar post_mutation = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46606__$1,new cljs.core.Keyword(null,\"post-mutation\",\"post-mutation\",-1076606705));\r\nvar remote = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46606__$1,new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576));\r\nif(cljs.core.truth_((function (){var and__3938__auto__ = post_mutation;\r\nif(cljs.core.truth_(and__3938__auto__)){\r\nreturn !((post_mutation instanceof cljs.core.Symbol));\r\n} else {\r\nreturn and__3938__auto__;\r\n}\r\n})())){\r\ntry{fulcro.logging._log.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),\"fulcro.client.data-fetch\",new cljs.core.Keyword(null,\"line\",\"line\",212345235),400], null),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"post-mutation must be a symbol or nil\"], 0));\r\n}catch (e46608){if((e46608 instanceof Error)){\r\nvar e__31518__auto___46611 = e46608;\r\nfulcro.logging._log.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),\"fulcro.client.data-fetch\",new cljs.core.Keyword(null,\"line\",\"line\",212345235),400], null),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Log statement failed (arguments did not evaluate).\",e__31518__auto___46611], 0));\r\n} else {\r\nthrow e46608;\r\n\r\n}\r\n}} else {\r\n}\r\n\r\nreturn cljs.core.PersistentArrayMap.createAsIfByAssoc([(cljs.core.truth_(remote)?remote:new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576)),true,new cljs.core.Keyword(null,\"action\",\"action\",-811238024),((function (map__46606,map__46606__$1,config,post_mutation,remote){\r\nreturn (function (){\r\nreturn fulcro.client.impl.data_fetch.mark_ready(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(config,new cljs.core.Keyword(null,\"env\",\"env\",-1815813235),env));\r\n});})(map__46606,map__46606__$1,config,post_mutation,remote))\r\n]);\r\n});\r\ncljs.core._add_method(fulcro.client.mutations.mutate,new cljs.core.Symbol(\"fulcro\",\"load\",\"fulcro/load\",-1361504416,null),(function (env,_,params){\r\nreturn fulcro.client.data_fetch.load_STAR_(env,params);\r\n}));\r\ncljs.core._add_method(fulcro.client.mutations.mutate,new cljs.core.Symbol(\"fulcro.client.data-fetch\",\"load\",\"fulcro.client.data-fetch/load\",-1506599212,null),(function (env,_,params){\r\nreturn fulcro.client.data_fetch.load_STAR_(env,params);\r\n}));\r\ncljs.core._add_method(fulcro.client.mutations.mutate,new cljs.core.Symbol(\"fulcro.client.data-fetch\",\"run-deferred-transaction\",\"fulcro.client.data-fetch/run-deferred-transaction\",934105139,null),(function (env46621,_,p__46622){\r\nvar map__46623 = p__46622;\r\nvar map__46623__$1 = ((((!((map__46623 == null)))?(((((map__46623.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46623.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46623):map__46623);\r\nvar tx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46623__$1,new cljs.core.Keyword(null,\"tx\",\"tx\",466630418));\r\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46623__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\r\nvar reconciler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46623__$1,new cljs.core.Keyword(null,\"reconciler\",\"reconciler\",-1832826966));\r\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (){var env = env46621;\r\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"action\",\"action\",-811238024),((function (env,map__46623,map__46623__$1,tx,ref,reconciler){\r\nreturn (function (){\r\nvar reconciler__$1 = new cljs.core.Keyword(null,\"reconciler\",\"reconciler\",-1832826966).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(reconciler));\r\nreturn setTimeout(((function (reconciler__$1,env,map__46623,map__46623__$1,tx,ref,reconciler){\r\nreturn (function (){\r\nreturn fulcro.client.primitives.transact_BANG_.cljs$core$IFn$_invoke$arity$3(reconciler__$1,ref,tx);\r\n});})(reconciler__$1,env,map__46623,map__46623__$1,tx,ref,reconciler))\r\n,(1));\r\n});})(env,map__46623,map__46623__$1,tx,ref,reconciler))\r\n], null);\r\n})(),(function (){var env = env46621;\r\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),false], null);\r\n})()], 0));\r\n}));\r\ncljs.core._add_method(fulcro.client.mutations.mutate,new cljs.core.Symbol(\"fulcro.client.data-fetch\",\"deferred-transaction\",\"fulcro.client.data-fetch/deferred-transaction\",574929731,null),(function (env46634,_,p__46636){\r\nvar map__46637 = p__46636;\r\nvar map__46637__$1 = ((((!((map__46637 == null)))?(((((map__46637.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46637.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46637):map__46637);\r\nvar tx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46637__$1,new cljs.core.Keyword(null,\"tx\",\"tx\",466630418));\r\nvar remote = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46637__$1,new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576));\r\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46637__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\r\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (){var env = env46634;\r\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"action\",\"action\",-811238024),((function (env,map__46637,map__46637__$1,tx,remote,ref){\r\nreturn (function (){\r\nvar map__46639 = env;\r\nvar map__46639__$1 = ((((!((map__46639 == null)))?(((((map__46639.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46639.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46639):map__46639);\r\nvar env__$1 = map__46639__$1;\r\nvar reconciler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46639__$1,new cljs.core.Keyword(null,\"reconciler\",\"reconciler\",-1832826966));\r\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46639__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\r\nvar reconciler__$1 = (cljs.core.truth_(reconciler)?reconciler:(cljs.core.truth_(component)?fulcro.client.primitives.get_reconciler(component):null\r\n));\r\nif(cljs.core.truth_(reconciler__$1)){\r\nreturn fulcro.client.data_fetch.load_action.cljs$core$IFn$_invoke$arity$4(env__$1,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"deferred-transaction\",\"fulcro.client.impl.data-fetch/deferred-transaction\",1662063962),null,new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"post-mutation\",\"post-mutation\",-1076606705),new cljs.core.Symbol(\"fulcro.client.data-fetch\",\"run-deferred-transaction\",\"fulcro.client.data-fetch/run-deferred-transaction\",934105139,null),new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),remote,new cljs.core.Keyword(null,\"marker\",\"marker\",865118313),false,new cljs.core.Keyword(null,\"post-mutation-params\",\"post-mutation-params\",-849425897),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"tx\",\"tx\",466630418),tx,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967),ref,new cljs.core.Keyword(null,\"reconciler\",\"reconciler\",-1832826966),cljs.core.with_meta(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"reconciler\",\"reconciler\",-1832826966),reconciler__$1], null))], null)], null));\r\n} else {\r\ntry{return fulcro.logging._log.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),\"fulcro.client.data-fetch\",new cljs.core.Keyword(null,\"line\",\"line\",212345235),427], null),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Cannot defer transaction. Reconciler was not available. Tx = \",tx], 0));\r\n}catch (e46641){if((e46641 instanceof Error)){\r\nvar e__31518__auto__ = e46641;\r\nreturn fulcro.logging._log.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),\"fulcro.client.data-fetch\",new cljs.core.Keyword(null,\"line\",\"line\",212345235),427], null),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Log statement failed (arguments did not evaluate).\",e__31518__auto__], 0));\r\n} else {\r\nthrow e46641;\r\n\r\n}\r\n}}\r\n});})(env,map__46637,map__46637__$1,tx,remote,ref))\r\n], null);\r\n})(),(function (){var env = env46634;\r\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),fulcro.client.data_fetch.remote_load(env)], null);\r\n})()], 0));\r\n}));\r\nfulcro.client.data_fetch.fallback_action_STAR_ = (function fulcro$client$data_fetch$fallback_action_STAR_(env,p__46644){\r\nvar map__46645 = p__46644;\r\nvar map__46645__$1 = ((((!((map__46645 == null)))?(((((map__46645.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46645.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46645):map__46645);\r\nvar params = map__46645__$1;\r\nvar action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46645__$1,new cljs.core.Keyword(null,\"action\",\"action\",-811238024));\r\nvar G__46647 = (function (){var G__46648 = env;\r\nvar G__46649 = action;\r\nvar G__46650 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(params,new cljs.core.Keyword(null,\"action\",\"action\",-811238024),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"execute\",\"execute\",-129499188)], 0));\r\nreturn (fulcro.client.mutations.mutate.cljs$core$IFn$_invoke$arity$3 ? fulcro.client.mutations.mutate.cljs$core$IFn$_invoke$arity$3(G__46648,G__46649,G__46650) : fulcro.client.mutations.mutate.call(null,G__46648,G__46649,G__46650));\r\n})();\r\nvar G__46647__$1 = (((G__46647 == null))?null:new cljs.core.Keyword(null,\"action\",\"action\",-811238024).cljs$core$IFn$_invoke$arity$1(G__46647));\r\nif((G__46647__$1 == null)){\r\nreturn null;\r\n} else {\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(G__46647__$1,cljs.core.PersistentVector.EMPTY);\r\n}\r\n});\r\ncljs.core._add_method(fulcro.client.mutations.mutate,new cljs.core.Symbol(\"tx\",\"fallback\",\"tx/fallback\",-1892802308,null),(function (p__46651,_,p__46652){\r\nvar map__46653 = p__46651;\r\nvar map__46653__$1 = ((((!((map__46653 == null)))?(((((map__46653.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46653.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46653):map__46653);\r\nvar env = map__46653__$1;\r\nvar target = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46653__$1,new cljs.core.Keyword(null,\"target\",\"target\",253001721));\r\nvar ast = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46653__$1,new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068));\r\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46653__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\r\nvar map__46654 = p__46652;\r\nvar map__46654__$1 = ((((!((map__46654 == null)))?(((((map__46654.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46654.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46654):map__46654);\r\nvar params = map__46654__$1;\r\nvar execute = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46654__$1,new cljs.core.Keyword(null,\"execute\",\"execute\",-129499188));\r\nvar action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46654__$1,new cljs.core.Keyword(null,\"action\",\"action\",-811238024));\r\nif(cljs.core.truth_(execute)){\r\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"action\",\"action\",-811238024),((function (map__46653,map__46653__$1,env,target,ast,ref,map__46654,map__46654__$1,params,execute,action){\r\nreturn (function (){\r\nreturn fulcro.client.data_fetch.fallback_action_STAR_(env,params);\r\n});})(map__46653,map__46653__$1,env,target,ast,ref,map__46654,map__46654__$1,params,execute,action))\r\n], null);\r\n} else {\r\nif(cljs.core.truth_(target)){\r\nreturn cljs.core.PersistentArrayMap.createAsIfByAssoc([target,(cljs.core.truth_(ref)?cljs.core.update.cljs$core$IFn$_invoke$arity$5(ast,new cljs.core.Keyword(null,\"params\",\"params\",710516235),cljs.core.assoc,new cljs.core.Keyword(\"fulcro.client.primitives\",\"ref\",\"fulcro.client.primitives/ref\",-1451073405),ref):true)]);\r\n} else {\r\nreturn null;\r\n\r\n}\r\n}\r\n}));\r\ncljs.core._add_method(fulcro.client.mutations.mutate,new cljs.core.Symbol(\"fulcro.client.data-fetch\",\"fallback\",\"fulcro.client.data-fetch/fallback\",1556791555,null),(function (env,_,params){\r\nvar G__46657 = env;\r\nvar G__46658 = new cljs.core.Symbol(\"tx\",\"fallback\",\"tx/fallback\",-1892802308,null);\r\nvar G__46659 = params;\r\nreturn (fulcro.client.mutations.mutate.cljs$core$IFn$_invoke$arity$3 ? fulcro.client.mutations.mutate.cljs$core$IFn$_invoke$arity$3(G__46657,G__46658,G__46659) : fulcro.client.mutations.mutate.call(null,G__46657,G__46658,G__46659));\r\n}));\r\n/**\r\n * Mutation: Add a fallback to the current tx. `action` is the symbol of the mutation to run if this tx fails due to\r\n *   network or server errors (bad status codes).\r\n */\r\nfulcro.client.data_fetch.fallback = (function fulcro$client$data_fetch$fallback(p__46660){\r\nvar map__46661 = p__46660;\r\nvar map__46661__$1 = ((((!((map__46661 == null)))?(((((map__46661.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46661.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46661):map__46661);\r\nvar action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46661__$1,new cljs.core.Keyword(null,\"action\",\"action\",-811238024));\r\nreturn null;\r\n});\r\n/**\r\n * Returns the remote against which the given mutation will try to execute. Returns nil if it is not a remote mutation.\r\n *   `legal-remotes` is a set of legal remote names. Defaults to `#{:remote}`.\r\n * \r\n *   Returns a set of the remotes that will be triggered for this mutation, which may be empty.\r\n *   \r\n */\r\nfulcro.client.data_fetch.get_remotes = (function fulcro$client$data_fetch$get_remotes(var_args){\r\nvar G__46665 = arguments.length;\r\nswitch (G__46665) {\r\ncase 2:\r\nreturn fulcro.client.data_fetch.get_remotes.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn fulcro.client.data_fetch.get_remotes.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\nfulcro.client.data_fetch.get_remotes.cljs$core$IFn$_invoke$arity$2 = (function (state_map,dispatch_symbol){\r\nreturn fulcro.client.data_fetch.get_remotes.cljs$core$IFn$_invoke$arity$3(state_map,dispatch_symbol,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),null], null), null));\r\n});\r\n\r\nfulcro.client.data_fetch.get_remotes.cljs$core$IFn$_invoke$arity$3 = (function (state_map,dispatch_symbol,legal_remotes){\r\nvar run_mutation = (function fulcro$client$data_fetch$run_mutation(remote){\r\nvar G__46669 = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),fulcro.client.primitives.query__GT_ast1(cljs.core.vec(cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$1((new cljs.core.List(null,cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$1((new cljs.core.List(null,dispatch_symbol,null,(1),null))))),null,(1),null))))))),new cljs.core.Keyword(null,\"parser\",\"parser\",-1543495310),cljs.core.constantly(null),new cljs.core.Keyword(null,\"target\",\"target\",253001721),remote,new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),cljs.core.atom.cljs$core$IFn$_invoke$arity$1(state_map)], null);\r\nvar G__46670 = dispatch_symbol;\r\nvar G__46671 = cljs.core.PersistentArrayMap.EMPTY;\r\nreturn (fulcro.client.mutations.mutate.cljs$core$IFn$_invoke$arity$3 ? fulcro.client.mutations.mutate.cljs$core$IFn$_invoke$arity$3(G__46669,G__46670,G__46671) : fulcro.client.mutations.mutate.call(null,G__46669,G__46670,G__46671));\r\n});\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (remotes,r){\r\ntry{var mutation_map = run_mutation(r);\r\nvar ks = cljs.core.set(cljs.core.keys(mutation_map));\r\nvar possible_remotes = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(ks,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525),null,new cljs.core.Keyword(null,\"value\",\"value\",305978217),null,new cljs.core.Keyword(null,\"keys\",\"keys\",1068423698),null,new cljs.core.Keyword(null,\"action\",\"action\",-811238024),null], null), null));\r\nvar active_now_QMARK_ = ((function (mutation_map,ks,possible_remotes){\r\nreturn (function (p1__46663_SHARP_){\r\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(mutation_map,p1__46663_SHARP_,false);\r\n});})(mutation_map,ks,possible_remotes))\r\n;\r\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(remotes,cljs.core.filter.cljs$core$IFn$_invoke$arity$2(active_now_QMARK_,possible_remotes));\r\n}catch (e46672){var e = e46672;\r\ntry{fulcro.logging._log.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),\"fulcro.client.data-fetch\",new cljs.core.Keyword(null,\"line\",\"line\",212345235),476], null),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Attempting to get the remotes for mutation \",dispatch_symbol,\" threw an exception. Make sure that mutation is side-effect free!\",e], 0));\r\n}catch (e46673){if((e46673 instanceof Error)){\r\nvar e__31518__auto___46675 = e46673;\r\nfulcro.logging._log.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),\"fulcro.client.data-fetch\",new cljs.core.Keyword(null,\"line\",\"line\",212345235),476], null),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Log statement failed (arguments did not evaluate).\",e__31518__auto___46675], 0));\r\n} else {\r\nthrow e46673;\r\n\r\n}\r\n}\r\nreturn cljs.core.reduced(((cljs.core.seq(remotes))?remotes:new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),null], null), null)));\r\n}}),cljs.core.PersistentHashSet.EMPTY,legal_remotes);\r\n});\r\n\r\nfulcro.client.data_fetch.get_remotes.cljs$lang$maxFixedArity = 3;\r\n\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","fulcro/client/data_fetch.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",29],"~:ns-aliases",["^ ","~$clojure.core.async","~$cljs.core.async","~$clojure.stacktrace","~$cljs.stacktrace","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",["^ ","~$defmutation","~$fulcro.client.mutations"],"~:excludes",["~#set",["~$load"]],"~:name","~$fulcro.client.data-fetch","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$set","~$clojure.set","~$log","~$fulcro.logging","~$impl","~$fulcro.client.impl.data-fetch","~$targeting","~$fulcro.client.impl.data-targeting","~$prim","~$fulcro.client.primitives","~$fc","~$fulcro.client","^Q","^Q","~$cljs.core","^Z","^S","^S","~$goog","^[","^D","^D","^W","^W","~$fulcro.util","^10","^O","^O","~$m","^D","~$util","^10","~$clojure.walk","^12","^Y","^Y","^U","^U"],"~:seen",["^F",["~:require"]],"~:uses",["^ ","~$walk","^12","~$prewalk","^12","~$mutate","^D","^C","^D"],"~:require-macros",["^ ","^Z","^Z","^P","^Q","^V","^W","^Q","^Q","^D","^D","^W","^W","~$m","^D"],"~:form",["~#list",["~$ns","^I",["^1;",["~:refer-clojure","~:exclude",["^G"]]],["^1;",["^14",["^12","~:refer",["^16","^17"]],["^W","~:as","^V"],["^S","^1@","^R"],["^U","^1@","^T"],["^D","^1@","~$m","^1?",["^18","^C"]],["^Q","^1@","^P"],["^Y","^1@","^X"],["^10","^1@","^11"],["^O","^1@","^N"]]]]],"~:flags",["^ ","^14",["^F",[]]],"~:js-deps",["^ "],"~:deps",["^[","^Z","^12","^W","^S","^U","^D","^Q","^Y","^10","^O"]],"^K","^I","~:resource-id",["~:shadow.build.classpath/resource","fulcro/client/data_fetch.cljc"],"~:compiled-at",1537360529949,"~:resource-name","fulcro/client/data_fetch.cljc","~:warnings",[],"~:source","(ns fulcro.client.data-fetch\n  (:refer-clojure :exclude [load])\n  (:require\n    [clojure.walk :refer [walk prewalk]]\n    [fulcro.client.primitives :as prim]\n    [fulcro.client.impl.data-fetch :as impl]\n    [fulcro.client.impl.data-targeting :as targeting]\n    [fulcro.client.mutations :as m :refer [mutate defmutation]]\n    [fulcro.logging :as log]\n    [fulcro.client :as fc]\n    [fulcro.util :as util]\n    [clojure.set :as set]))\n\n(declare load load-action load-field load-field-action)\n\n(defn bool? [v]\n  #?(:clj  (or (true? v) (false? v))\n     :cljs (boolean? v)))\n\n(def marker-table\n  \"The name of the table in which fulcro load markers are stored\"\n  impl/marker-table)\n\n(defn multiple-targets [& targets]\n  (apply targeting/multiple-targets targets))\n\n(defn prepend-to [target]\n  (targeting/prepend-to target))\n\n(defn append-to [target]\n  (targeting/append-to target))\n\n(defn replace-at [target]\n  (targeting/replace-at target))\n\n(defn elide-query-nodes\n  \"Remove items from a query that have a key listed in the elision-set\"\n  [query elision-set]\n  (-> query prim/query->ast (impl/elide-ast-nodes elision-set) prim/ast->query))\n\n(defn- computed-refresh\n  \"Computes the refresh for the load by ensuring the loaded data is on the\n  list of things to re-render.\"\n  [explicit-refresh load-key target]\n  (vec (let [result     (conj (set explicit-refresh))\n             result     (if (or (nil? target) (util/ident? load-key))\n                          (conj result load-key)\n                          result)\n             add-target (fn [r t]\n                          (cond\n                            (and (vector? t) (>= (count t) 2)) (conj r (vec (take 2 t)))\n                            (vector? t) (conj r (first t))\n                            :else (conj r t)))]\n         (cond\n           (impl/multiple-targets? target) (reduce (fn [refresh t] (add-target refresh t)) result target)\n           target (add-target result target)\n           :else result))))\n\n(defn load-params*\n  \"Internal function to validate and process the parameters of `load` and `load-action`.\"\n  [state-map server-property-or-ident class-or-factory {:keys [target params marker refresh parallel post-mutation post-mutation-params\n                                                               fallback remote focus without initialize abort-id update-query]\n                                                        :or   {remote     :remote marker true parallel false refresh [] without #{}\n                                                               initialize false}}]\n  {:pre [(or (nil? target) (vector? target))\n         (or (nil? post-mutation) (symbol? post-mutation))\n         (or (nil? fallback) (symbol? fallback))\n         (or (nil? post-mutation-params) (map? post-mutation-params))\n         (vector? refresh)\n         (or (nil? params) (map? params))\n         (set? without)\n         (or (nil? focus) (vector? focus))\n         (or (util/ident? server-property-or-ident) (keyword? server-property-or-ident))]}\n  (let [query' (if class-or-factory\n                 (cond-> (prim/get-query class-or-factory state-map)\n                   focus (prim/focus-subquery focus)\n                   update-query update-query)\n                 nil)\n        query  (cond\n                 (and class-or-factory (map? params)) `[({~server-property-or-ident ~query'} ~params)]\n                 class-or-factory [{server-property-or-ident query'}]\n                 (map? params) [(list server-property-or-ident params)]\n                 :else [server-property-or-ident])\n        marker (if (and (true? marker) (impl/special-target? target)) (do\n                                                                (log/warn (str \"Load of \" server-property-or-ident \": Boolean load marker not allowed. Turned off so load target will not overwrite a to-many relation. To fix this warning, set :marker to false or a marker ID.\"))\n                                                                false) marker)]\n    {:query                query\n     :remote               remote\n     :target               target\n     :focus                focus\n     :without              without\n     :post-mutation        post-mutation\n     :post-mutation-params post-mutation-params\n     :initialize           (when (and initialize class-or-factory server-property-or-ident)\n                             (let [class (if-let [c (-> class-or-factory meta :class)]\n                                           c class-or-factory)]\n                               {server-property-or-ident (cond\n                                                           (map? initialize) initialize\n                                                           (and initialize (prim/has-initial-app-state? class)) (prim/get-initial-state class {})\n                                                           :else {})}))\n     :refresh              (computed-refresh refresh server-property-or-ident target)\n     :marker               marker\n     :parallel             parallel\n     :abort-id             abort-id\n     :fallback             fallback}))\n\n(defn load-mutation\n  \"Generates a transaction expression for a load mutation. It includes a follow-on read for :ui/loading-data. The args\n  must be a map of the parameters usable from `load`. Returns a complete tx (as a vector), not just the mutation\n  since follow-on reads are part of the mutation. You may use `concat` to join this with additional expressions.\"\n  [load-args]\n  {:pre [(or (nil? (:refresh load-args)) (vector? (:refresh load-args)))]}\n  (let [refresh (or (:refresh load-args) [])]\n    (into [(list 'fulcro/load load-args) :ui/loading-data] refresh)))\n\n(defn load\n  \"Load data from the server.\n\n  This function triggers a server interaction and normalizes the server response into your app state database. During\n  operation it also adds (by default) fetch markers into the app state so you can show busy indicators on the UI\n  components that are waiting for data. The `:target` parameter can be used to place the data somewhere besides app\n  state root (which is the default).\n\n  The server will receive a query of the form: [({server-property (prim/get-query class-or-factory)} params)], which\n  a Fulcro parser will correctly parse as a join on server-property with the given subquery and params. See the AST and\n  instructions on parsing queries in the developer's guide.\n\n  Parameters:\n  - `app-or-comp-or-reconciler` : A component instance, Fulcro application, or reconciler\n  - `server-property-or-ident` : A keyword or ident that represents the root of the query to send to the server. If this is an ident\n  you are loading a specific entity from the database into a local app db table. A custom target will be ignored.\n  - `class-or-factory` : A component that implements IQuery, or a factory for it (if using dynamic queries). This will be combined with `server-property` into a join for the server query. Needed to normalize results.\n    class-or-factory can be nil, in which case the resulting server query will not be a join.\n  - `config` : A map of load configuration parameters.\n\n  Config (all optional):\n  - `target` - An assoc-in path at which to put the result of the Subquery (as an edge (normalized) or value (not normalized)).\n    Can also be special targets (multiple-targets, append-to,\n    prepend-to, or replace-at). If you are loading by keyword (into root), then this relocates the result (ident or value) after load.\n    When loading an entity (by ident), then this option will place additional idents at the target path(s) that point to that entity.\n  - `initialize` - Optional. If `true`, uses `get-initial-state` on class-or-factory to  get a basis for merge of the result. This allows you\n    to use initial state to pre-populate loads with things like UI concerns. If `:initialize` is passed a map, then it uses that as\n    the base target merge value for class-or-factory instead.\n  - `remote` - Optional. Keyword name of the remote that this load should come from.\n  - `params` - Optional parameters to add to the generated query\n  - `marker` - Boolean to determine if you want a fetch-state marker in your app state. Defaults to true. Add `:ui/fetch-state` to the\n  target component in order to see this data in your component.\n  - `refresh` - A vector of keywords that will cause component re-renders after the final load/mutations. Same as follow-on\n  reads in normal `transact!`\n  - `parallel` - If true, indicates that this load does not have to go through the sequential network queue. Defaults to false.\n  - `post-mutation` - A mutation (symbol) to run after the data is merged. Note, if target is supplied be sure your post mutation\n  should expect the data at the targeted location. The `env` of that mutation will be the env of the load (if available), but will also include `:load-request`.\n  - `post-mutation-params` - An optional map  that will be passed to the post-mutation when it is called. May only contain raw data, not code!\n  - `fallback` - A mutation (symbol) to run if there is a server/network error. The `env` of the fallback will be the env of the load (if available), but will also include `:load-request`.\n  - `update-query` - A optional function that can transform the component query before sending to remote.\n      For example, to focus a subquery using update-query:\n          {:update-query #(prim/focus-subquery % [:my {:sub [:query]}])}\n\n      Removing properties (like previous :without option):\n          {:update-query #(df/elide-query-nodes % #{:my :elisions})}\n  - `focus` - An optional subquery to focus on some parts of the original query.\n  - `without` - An optional set of keywords that should (recursively) be removed from the query.\n  - `abort-id` - An ID (typically a keyword) that you can use to cancel the load via `fulcro.client/abort`.\n\n  Notes on UI Refresh:\n  The refresh list will automatically include what you load (as a non-duplicate):\n  - When target is set and has 2+ elements: refresh will include an ident of the first two elements\n     - e.g. `:target [:a 1 :thing]` -> `:refresh [[:a 1]]`\n  - When target has a single element, refresh will include that element as a keyword\n     - e.g. `:target [:thing]` -> `:refresh [:thing]`\n  - When there is no target:\n     - If prop-or-ident is a kw -> `:refresh [kw]`\n     - If prop-or-ident is an ident -> `:refresh [ident]`\n  In all cases, any explicit refresh things you include will not be dropped. The computed refresh list\n  is essentially a `(-> original-refresh-list set add-computed-bits vec)`.\n  \"\n  ([app-or-comp-or-reconciler server-property-or-ident class-or-factory] (load app-or-comp-or-reconciler server-property-or-ident class-or-factory {}))\n  ([app-or-comp-or-reconciler server-property-or-ident class-or-factory config]\n   {:pre [(or (prim/component? app-or-comp-or-reconciler)\n            (prim/reconciler? app-or-comp-or-reconciler)\n            #?(:cljs (implements? fc/FulcroApplication app-or-comp-or-reconciler)\n               :clj  (satisfies? fc/FulcroApplication app-or-comp-or-reconciler)))]}\n   (let [config                  (merge {:marker true :parallel false :refresh [] :without #{}} config)\n         component-or-reconciler (if #?(:cljs (implements? fc/FulcroApplication app-or-comp-or-reconciler)\n                                        :clj  (satisfies? fc/FulcroApplication app-or-comp-or-reconciler))\n                                   (get app-or-comp-or-reconciler :reconciler)\n                                   app-or-comp-or-reconciler)\n         reconciler              (if (prim/reconciler? component-or-reconciler) component-or-reconciler (prim/get-reconciler component-or-reconciler))\n         state                   (prim/app-state reconciler)\n         mutation-args           (load-params* @state server-property-or-ident class-or-factory config)]\n     (prim/transact! component-or-reconciler (load-mutation mutation-args)))))\n\n#?(:cljs\n   (defn load-action\n     \"\n     See `load` for descriptions of parameters and config.\n\n     Queue up a remote load from within an already-running mutation. Similar to `load`, but usable from\n     within a mutation. IMPORTANT: Make sure you specify the `:remote` parameter to this function, as\n     well as including a `remote-load` for that remote.\n\n     Note the `:refresh` parameter is supported, and defaults to empty. If you want anything to refresh other than\n     the targeted component you will want to include the :refresh parameter.\n\n     To use this function make sure your mutation specifies a return value with a remote. The remote\n     should use the helper function `remote-load` as it's value:\n\n     { :remote (df/remote-load env)\n       ; NOTE: :remote must be the keyword name of a legal remote in your system; however,\n       ; You must still name the remote in the `load-action` if it is something other than default.\n       :action (fn []\n          (load-action env ...)\n          ; other optimistic updates/state changes)}\n\n     `env` is the mutation's environment parameter.\"\n     ([env server-property-or-ident SubqueryClass] (load-action env server-property-or-ident SubqueryClass {}))\n     ([env server-property-or-ident SubqueryClass config]\n      {:pre [(and (map? env) (contains? env :state))]}\n      (let [config    (merge {:marker true :parallel false :refresh [] :without #{}} config)\n            state-map @(:state env)]\n        (impl/mark-ready (assoc (load-params* state-map server-property-or-ident SubqueryClass config) :env env))))))\n\n(defn load-field\n  \"Load a field of the current component. Runs `prim/transact!`.\n\n  Parameters\n  - `component`: The component (**instance**, not class). This component MUST have an Ident.\n  - `field`: A field on the component's query that you wish to load.\n  - `parameters` : A map of: (will also accept as named parameters)\n\n    - `without`: See `load`\n    - `params`: See `load`\n    - `post-mutation`: See `load`\n    - `post-mutation-params`: See `load`\n    - `parallel`: See `load`\n    - `fallback`: See `load`\n    - `marker`: See `load`\n    - `remote`: See `load`\n    - `refresh`: See `load`\n    - `abort-id`: See `load`\n\n  NOTE: The :ui/loading-data attribute is always included in refresh. This means you probably don't want to\n  query for that attribute near the root of your UI. Instead, create some leaf component with an ident that queries for :ui/loading-data\n  using a link  query (e.g. `[:ui/loading-data '_]`). The presence of the ident on components will enable query optimization, which can\n  improve your frame rate because we will not have to run a full root query.\n\n  WARNING: If you're using dynamic queries, you won't really know what factory your parent is using,\n  nor can you pass it as a parameter to this function. Therefore, it is not recommended to use load-field from within\n  a component that has a dynamic query unless you can base it on the original static query (which\n  is what this function will use).\n  \"\n  [component field & params]\n  (let [params    (if (map? (first params)) (first params) params)\n        {:keys [without params remote post-mutation post-mutation-params fallback parallel refresh marker abort-id]\n         :or   {remote :remote refresh [] marker true}} params\n        state-map (some-> component prim/get-reconciler prim/app-state deref)]\n    (when fallback (assert (symbol? fallback) \"Fallback must be a mutation symbol.\"))\n    (prim/transact! component (into [(list 'fulcro/load\n                                       {:ident                (prim/get-ident component)\n                                        :field                field\n                                        :query                (prim/focus-query (prim/get-query component state-map) [field])\n                                        :params               params\n                                        :without              without\n                                        :remote               remote\n                                        :post-mutation        post-mutation\n                                        :post-mutation-params post-mutation-params\n                                        :parallel             parallel\n                                        :marker               marker\n                                        :refresh              refresh\n                                        :abort-id             abort-id\n                                        :fallback             fallback}) :ui/loading-data :ui.fulcro.client.data-fetch.load-markers/by-id (prim/get-ident component)] refresh))))\n\n(defn load-field-action\n  \"Queue up a remote load of a component's field from within an already-running mutation. Similar to `load-field`\n  but usable from within a mutation. Note the `:refresh` parameter is supported, and defaults to nothing, even for\n  fields, in actions. If you want anything to refresh other than the targeted component you will want to use the\n  :refresh parameter.\n\n  `params` can be a map or named parameters, just like in `load-field`.\n\n  To use this function make sure your mutation specifies a return value with a remote. The remote\n  should use the helper function `remote-load` as it's value:\n\n  { :remote (df/remote-load env)\n    ; NOTE: :remote must be the keyword name of a legal remote in your system; however,\n    ; You must still name the remote in the `load-action` if it is something other than default.\n    :action (fn []\n       (load-field-action ...)\n       ; other optimistic updates/state changes)}\n\n  It is preferable that you use `env` instead of `app-state` for the first argument, as this allows more details to\n  be available for post mutations and fallbacks.\n  \"\n  [env-or-app-state component-class ident field & params]\n  (let [params    (if (map? (first params)) (first params) params)\n        {:keys [without params remote post-mutation post-mutation-params fallback parallel refresh marker abort-id]\n         :or   {remote :remote refresh [] marker true}} params\n        env       (if (and (map? env-or-app-state) (contains? env-or-app-state :state))\n                    env-or-app-state\n                    {:state env-or-app-state})\n        state-map (some-> env :state deref)]\n    (impl/mark-ready\n      {:env                  env\n       :field                field\n       :ident                ident\n       :query                (prim/focus-query (prim/get-query component-class state-map) [field])\n       :params               params\n       :remote               remote\n       :without              without\n       :parallel             parallel\n       :refresh              refresh\n       :marker               marker\n       :post-mutation        post-mutation\n       :post-mutation-params post-mutation-params\n       :abort-id             abort-id\n       :fallback             fallback})))\n\n(defn remote-load\n  \"Returns the correct value for the `:remote` side of a mutation that should act as a\n  trigger for remote loads. Must be used in conjunction with running `load-action` or\n  `load-field-action` in the `:action` side of the mutation (which queues the exact things to\n  load).\"\n  [parsing-env]\n  (let [ast (:ast parsing-env)]\n    (assoc ast :key 'fulcro/load :dispatch-key 'fulcro/load)))\n\n;; Predicate functions\n(defn data-state? [state] (impl/data-state? state))\n(defn ready? [state] (impl/ready? state))\n(defn loading? [state] (impl/loading? state))\n(defn failed? [state] (impl/failed? state))\n\n#?(:clj (defn clj->js [m] m))\n\n(defn lazily-loaded\n  \"Custom rendering for use while data is being lazily loaded using the data fetch methods\n  load-collection and load-field.\n\n  `data-render` : the render method to call once the data has been successfully loaded from\n  the server. Can be a factory method or a React rendering function.\n\n  `props` : the React properties for the element to be loaded.\n\n  Optional:\n\n  `ready-render` : the render method to call when the desired data has been marked as ready\n  to load, but the server request has not yet been sent.\n\n  `loading-render` : render method once the server request has been sent, and UI is waiting\n  on the response\n\n  `failed-render` : render method when the server returns a failure state for the requested data\n\n  `not-present-render` : called when props is nil (helpful for differentiating between a nil and\n  empty response from the server).\n\n  Example Usage:\n\n  ```\n  (defui Thing\n    static prim/IQuery\n    (query [this] [{:thing2 (prim/get-query Thing2)}])\n    Object\n    (componentDidMount [this]\n       (load-field this :thing2))\n\n    (render [this]\n      (let [thing2 (:thing2 (prim/props this))]\n        (lazily-loaded ui-thing2 thing2))))\n\n  (defui Thing2\n    static prim/IQuery\n    (query [this] [:ui/fetch-state])\n    Object\n    (render [this]\n      (display-thing-2))\n\n  (def ui-thing2 (prim/factory Thing2))\n  ```\"\n  [data-render props & {:keys [ready-render loading-render failed-render not-present-render]\n                        :or   {loading-render (fn [_] \"Loading...\")\n                               ready-render   (fn [_] \"Queued\")\n                               failed-render  (fn [_] \"Loading error!\")}}]\n\n  (let [state (:ui/fetch-state props)]\n    (cond\n      (ready? state) (ready-render props)\n      (loading? state) (loading-render props)\n      (failed? state) (failed-render props)\n      (and not-present-render (nil? props)) (not-present-render props)\n      :else (data-render props))))\n\n(defn refresh!\n  ([component load-options]\n   (load component (prim/get-ident component) (prim/react-type component) load-options))\n  ([component]\n   (load component (prim/get-ident component) (prim/react-type component))))\n\n(defn- load* [env {:keys [post-mutation remote] :as config}]\n  (when (and post-mutation (not (symbol? post-mutation))) (log/error \"post-mutation must be a symbol or nil\"))\n  {(if remote remote :remote) true\n   :action                    (fn [] (impl/mark-ready (assoc config :env env)))})\n\n(defmethod mutate 'fulcro/load [env _ params] (load* env params))\n(defmethod mutate `load [env _ params] (load* env params))\n\n(defmutation run-deferred-transaction [{:keys [tx ref reconciler]}]\n  (action [env]\n    (let [reconciler (-> reconciler meta :reconciler)]\n      #?(:clj  (prim/transact! reconciler ref tx)\n         :cljs (js/setTimeout (fn [] (prim/transact! reconciler ref tx)) 1)))))\n\n(defmutation deferred-transaction [{:keys [tx remote ref]}]\n  (action [env]\n    (let [{:keys [reconciler component] :as env} env\n          reconciler (cond\n                       reconciler reconciler\n                       component (prim/get-reconciler component)\n                       :otherwise nil)]\n      (if reconciler\n        (load-action env ::impl/deferred-transaction nil {:post-mutation        `run-deferred-transaction\n                                                          :remote               remote\n                                                          :marker               false\n                                                          :post-mutation-params {:tx         tx\n                                                                                 :ref        ref\n                                                                                 :reconciler (with-meta {} {:reconciler reconciler})}})\n        (log/error \"Cannot defer transaction. Reconciler was not available. Tx = \" tx))))\n  (remote [env] (remote-load env)))\n\n(defn- fallback-action*\n  [env {:keys [action] :as params}]\n  (some-> (mutate env action (dissoc params :action :execute)) :action (apply [])))\n\n; A mutation that requests the installation of a fallback mutation on a transaction that should run if that transaction\n; fails in a 'hard' way (e.g. network/server error). Data-related error handling should either be implemented as causing\n; such a hard error, or as a post-mutation step.\n(defmethod mutate 'tx/fallback [{:keys [target ast ref] :as env} _ {:keys [execute action] :as params}]\n  (cond\n    execute {:action #(fallback-action* env params)}\n    target {target (if ref\n                     (update ast :params assoc ::prim/ref ref)\n                     true)}\n    :else nil))\n\n(defmethod mutate `fallback [env _ params] (mutate env 'tx/fallback params))\n\n(defn fallback\n  \"Mutation: Add a fallback to the current tx. `action` is the symbol of the mutation to run if this tx fails due to\n  network or server errors (bad status codes).\"\n  [{:keys [action]}]\n  ; placeholder...this function is never actually used. It is here for docstring support only. See the defmethod above\n  ; for actual implementation. Cannot use `defmutation`, because we have to derive the remote to target.\n  )\n\n(defn get-remotes\n  \"Returns the remote against which the given mutation will try to execute. Returns nil if it is not a remote mutation.\n  `legal-remotes` is a set of legal remote names. Defaults to `#{:remote}`.\n\n  Returns a set of the remotes that will be triggered for this mutation, which may be empty.\n  \"\n  ([state-map dispatch-symbol] (get-remotes state-map dispatch-symbol #{:remote}))\n  ([state-map dispatch-symbol legal-remotes]\n   (letfn [(run-mutation [remote]\n             (mutate {:ast    (prim/query->ast1 `[(~dispatch-symbol)])\n                      :parser (constantly nil)\n                      :target remote\n                      :state  (atom state-map)} dispatch-symbol {}))]\n     (reduce (fn [remotes r]\n               (try\n                 (let [mutation-map     (run-mutation r)\n                       ks               (set (keys mutation-map))\n                       possible-remotes (set/difference ks #{:action :refresh :keys :value})\n                       active-now?      #(get mutation-map % false)]\n                   (into remotes (filter active-now? possible-remotes)))\n                 (catch #?(:clj Throwable :cljs :default) e\n                   (log/error \"Attempting to get the remotes for mutation \" dispatch-symbol \" threw an exception. Make sure that mutation is side-effect free!\" e)\n                   (reduced (if (seq remotes) remotes #{:remote})))))\n       #{} legal-remotes))))\n","~:reader-features",["^F",["~:cljs"]],"~:source-map",["^ ","~i13",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",11],["^ ","^1N",0,"^1O",11],["^ ","^1N",0,"^1O",12],["^ ","^1N",0,"^1O",13],["^ ","^1N",0,"^1O",14]]],"~i15",["^ ","~i0",[["^ ","^1N",0,"^1O",14],["^ ","^1N",39,"^1O",14],["^ ","^1N",0,"^1O",15]],"~i6",[["^ ","^1N",0,"^1O",14,"^H","fulcro.client.data-fetch/bool?"]],"^1M",[["^ ","^1N",86,"^1O",14,"^H","v"]]],"~i17",["^ ","~i11",[["^ ","^1N",0,"^1O",15]],"~i12",[["^ ","^1N",7,"^1O",15,"^H","cljs.core/boolean?"]],"~i21",[["^ ","^1N",32,"^1O",15,"^H","v"]]],"~i19",["^ ","~i0",[["^ ","^1N",0,"^1O",17]],"~i5",[["^ ","^1N",0,"^1O",20,"^H","fulcro.client.data-fetch/marker-table"]]],"^1T",["^ ","~i2",[["^ ","^1N",40,"^1O",20,"^H","fulcro.client.impl.data-fetch/marker-table"]]],"~i23",["^ ","~i0",[["^ ","^1N",0,"^1O",21],["^ ","^1N",0,"^1O",21],["^ ","^1N",44,"^1O",21],["^ ","^1N",96,"^1O",21,"^H","var_args"],["^ ","^1N",0,"^1O",22],["^ ","^1N",0,"^1O",22],["^ ","^1N",4,"^1O",22,"^H","args__4534__auto__"],["^ ","^1N",25,"^1O",22],["^ ","^1N",0,"^1O",23],["^ ","^1N",0,"^1O",23],["^ ","^1N",4,"^1O",23,"^H","len__4531__auto__"],["^ ","^1N",30,"^1O",23],["^ ","^1N",30,"^1O",23],["^ ","^1N",0,"^1O",24],["^ ","^1N",0,"^1O",24],["^ ","^1N",4,"^1O",24,"^H","i__4532__auto__"],["^ ","^1N",28,"^1O",24],["^ ","^1N",0,"^1O",26],["^ ","^1N",0,"^1O",26],["^ ","^1N",3,"^1O",26],["^ ","^1N",4,"^1O",26,"^H","i__4532__auto__"],["^ ","^1N",28,"^1O",26,"^H","len__4531__auto__"],["^ ","^1N",0,"^1O",27],["^ ","^1N",0,"^1O",27],["^ ","^1N",0,"^1O",27,"^H","args__4534__auto__"],["^ ","^1N",24,"^1O",27],["^ ","^1N",25,"^1O",27],["^ ","^1N",35,"^1O",27,"^H","i__4532__auto__"],["^ ","^1N",0,"^1O",29],["^ ","^1N",15,"^1O",29],["^ ","^1N",16,"^1O",29,"^H","i__4532__auto__"],["^ ","^1N",40,"^1O",29],["^ ","^1N",0,"^1O",33],["^ ","^1N",0,"^1O",37],["^ ","^1N",4,"^1O",37,"^H","argseq__4535__auto__"],["^ ","^1N",27,"^1O",37],["^ ","^1N",29,"^1O",37],["^ ","^1N",30,"^1O",37],["^ ","^1N",36,"^1O",37],["^ ","^1N",36,"^1O",37,"^H","args__4534__auto__"],["^ ","^1N",64,"^1O",37],["^ ","^1N",64,"^1O",37],["^ ","^1N",69,"^1O",37,"^H","cljs.core/IndexedSeq"],["^ ","^1N",90,"^1O",37],["^ ","^1N",90,"^1O",37,"^H","args__4534__auto__"],["^ ","^1N",115,"^1O",37],["^ ","^1N",120,"^1O",37],["^ ","^1N",124,"^1O",37],["^ ","^1N",131,"^1O",37],["^ ","^1N",0,"^1O",38],["^ ","^1N",0,"^1O",38],["^ ","^1N",7,"^1O",38,"^H","fulcro.client.data-fetch/multiple-targets"],["^ ","^1N",86,"^1O",38,"^H","argseq__4535__auto__"],["^ ","^1N",0,"^1O",41],["^ ","^1N",0,"^1O",41],["^ ","^1N",0,"^1O",41],["^ ","^1N",0,"^1O",41,"^H","fulcro.client.data-fetch/multiple-targets"],["^ ","^1N",81,"^1O",41],["^ ","^1N",0,"^1O",42],["^ ","^1N",0,"^1O",45],["^ ","^1N",0,"^1O",45],["^ ","^1N",0,"^1O",45,"^H","fulcro.client.data-fetch/multiple-targets"],["^ ","^1N",68,"^1O",45],["^ ","^1N",0,"^1O",47],["^ ","^1N",0,"^1O",48],["^ ","^1N",0,"^1O",48],["^ ","^1N",0,"^1O",48,"^H","fulcro.client.data-fetch/multiple-targets"],["^ ","^1N",62,"^1O",48],["^ ","^1N",73,"^1O",48,"^H","seq46321"],["^ ","^1N",0,"^1O",49],["^ ","^1N",0,"^1O",49],["^ ","^1N",4,"^1O",49,"^H","self__4519__auto__"],["^ ","^1N",25,"^1O",49],["^ ","^1N",0,"^1O",50],["^ ","^1N",0,"^1O",50],["^ ","^1N",7,"^1O",50,"^H","self__4519__auto__"],["^ ","^1N",63,"^1O",50],["^ ","^1N",63,"^1O",50,"^H","cljs.core/seq"],["^ ","^1N",77,"^1O",50,"^H","seq46321"],["^ ","^1N",0,"^1O",53]],"~i6",[["^ ","^1N",0,"^1O",21,"^H","fulcro.client.data-fetch/multiple-targets"]],"~i26",[["^ ","^1N",92,"^1O",41,"^H","targets"]]],"~i24",["^ ","~i2",[["^ ","^1N",0,"^1O",42]],"~i3",[["^ ","^1N",7,"^1O",42,"^H","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"]],"~i9",[["^ ","^1N",53,"^1O",42,"^H","fulcro.client.impl.data-targeting/multiple-targets"]],"~i36",[["^ ","^1N",104,"^1O",42,"^H","targets"]]],"^1W",["^ ","~i0",[["^ ","^1N",0,"^1O",53],["^ ","^1N",38,"^1O",53],["^ ","^1N",0,"^1O",54]],"~i6",[["^ ","^1N",0,"^1O",53,"^H","fulcro.client.data-fetch/prepend-to"]],"~i18",[["^ ","^1N",84,"^1O",53,"^H","target"]]],"~i27",["^ ","~i2",[["^ ","^1N",0,"^1O",54]],"~i3",[["^ ","^1N",7,"^1O",54,"^H","fulcro.client.impl.data-targeting/prepend-to"]],"^1X",[["^ ","^1N",52,"^1O",54,"^H","target"]]],"~i29",["^ ","~i0",[["^ ","^1N",0,"^1O",56],["^ ","^1N",37,"^1O",56],["^ ","^1N",0,"^1O",57]],"~i6",[["^ ","^1N",0,"^1O",56,"^H","fulcro.client.data-fetch/append-to"]],"^1Q",[["^ ","^1N",82,"^1O",56,"^H","target"]]],"~i30",["^ ","~i2",[["^ ","^1N",0,"^1O",57]],"~i3",[["^ ","^1N",7,"^1O",57,"^H","fulcro.client.impl.data-targeting/append-to"]],"^1V",[["^ ","^1N",51,"^1O",57,"^H","target"]]],"~i32",["^ ","~i0",[["^ ","^1N",0,"^1O",59],["^ ","^1N",38,"^1O",59],["^ ","^1N",0,"^1O",60]],"~i6",[["^ ","^1N",0,"^1O",59,"^H","fulcro.client.data-fetch/replace-at"]],"^1Z",[["^ ","^1N",84,"^1O",59,"^H","target"]]],"~i33",["^ ","~i2",[["^ ","^1N",0,"^1O",60]],"~i3",[["^ ","^1N",7,"^1O",60,"^H","fulcro.client.impl.data-targeting/replace-at"]],"^1X",[["^ ","^1N",52,"^1O",60,"^H","target"]]],"~i35",["^ ","~i0",[["^ ","^1N",0,"^1O",62],["^ ","^1N",45,"^1O",65],["^ ","^1N",0,"^1O",66]],"~i6",[["^ ","^1N",0,"^1O",65,"^H","fulcro.client.data-fetch/elide-query-nodes"]]],"~i37",["^ ","~i3",[["^ ","^1N",98,"^1O",65,"^H","query"]],"~i9",[["^ ","^1N",104,"^1O",65,"^H","elision-set"]]],"~i38",["^ ","~i2",[["^ ","^1N",0,"^1O",66]],"~i6",[["^ ","^1N",131,"^1O",66,"^H","query"]],"^1S",[["^ ","^1N",92,"^1O",66,"^H","fulcro.client.primitives/query->ast"]],"~i28",[["^ ","^1N",46,"^1O",66],["^ ","^1N",92,"^1O",66]],"^20",[["^ ","^1N",46,"^1O",66,"^H","fulcro.client.impl.data-fetch/elide-ast-nodes"]],"~i50",[["^ ","^1N",138,"^1O",66,"^H","elision-set"]],"~i63",[["^ ","^1N",7,"^1O",66,"^H","fulcro.client.primitives/ast->query"]]],"~i40",["^ ","~i0",[["^ ","^1N",0,"^1O",68],["^ ","^1N",44,"^1O",72],["^ ","^1N",0,"^1O",73]],"~i7",[["^ ","^1N",0,"^1O",72,"^H","fulcro.client.data-fetch/computed-refresh"]]],"~i43",["^ ","~i3",[["^ ","^1N",96,"^1O",72,"^H","explicit-refresh"]],"~i20",[["^ ","^1N",113,"^1O",72,"^H","load-key"]],"^20",[["^ ","^1N",122,"^1O",72,"^H","target"]]],"~i44",["^ ","~i2",[["^ ","^1N",0,"^1O",73]],"~i3",[["^ ","^1N",7,"^1O",73,"^H","cljs.core/vec"]],"~i7",[["^ ","^1N",21,"^1O",73],["^ ","^1N",0,"^1O",89]],"^1M",[["^ ","^1N",38,"^1O",73,"^H","result"]],"^1X",[["^ ","^1N",47,"^1O",73]],"~i25",[["^ ","^1N",47,"^1O",73,"^H","cljs.core.conj.cljs$core$IFn$_invoke$arity$1"]],"^21",[["^ ","^1N",92,"^1O",73]],"~i31",[["^ ","^1N",92,"^1O",73,"^H","cljs.core/set"]],"^24",[["^ ","^1N",106,"^1O",73,"^H","explicit-refresh"]]],"~i45",["^ ","^1M",[["^ ","^1N",4,"^1O",74,"^H","result"]],"^1X",[["^ ","^1N",17,"^1O",74]],"^27",[["^ ","^1N",19,"^1O",74]],"^22",[["^ ","^1N",21,"^1O",74],["^ ","^1N",32,"^1O",74]],"^26",[["^ ","^1N",22,"^1O",74,"^H","target"]],"~i46",[["^ ","^1N",43,"^1O",74]],"~i47",[["^ ","^1N",43,"^1O",74,"^H","fulcro.util/ident?"]],"~i59",[["^ ","^1N",68,"^1O",74,"^H","load-key"]]],"^2A",["^ ","^1W",[["^ ","^1N",81,"^1O",74]],"^1[",[["^ ","^1N",81,"^1O",74,"^H","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"^22",[["^ ","^1N",126,"^1O",74,"^H","result"]],"~i39",[["^ ","^1N",133,"^1O",74,"^H","load-key"]]],"^2B",["^ ","^1W",[["^ ","^1N",143,"^1O",74,"^H","result"]]],"~i48",["^ ","^1M",[["^ ","^1N",4,"^1O",75,"^H","add-target"]],"^1X",[["^ ","^1N",17,"^1O",75],["^ ","^1N",0,"^1O",77]],"^20",[["^ ","^1N",18,"^1O",76,"^H","r"]],"^2?",[["^ ","^1N",20,"^1O",76,"^H","t"]]],"~i49",["^ ","^1W",[["^ ","^1N",0,"^1O",77],["^ ","^1N",0,"^1O",80],["^ ","^1N",0,"^1O",83]]],"^28",["^ ","^27",[["^ ","^1N",3,"^1O",77]],"^23",[["^ ","^1N",5,"^1O",77]],"~i34",[["^ ","^1N",5,"^1O",77,"^H","cljs.core/vector?"]],"~i42",[["^ ","^1N",29,"^1O",77,"^H","t"]],"^2@",[["^ ","^1N",37,"^1O",77],["^ ","^1N",60,"^1O",77]],"^2F",[["^ ","^1N",38,"^1O",77]],"^28",[["^ ","^1N",38,"^1O",77,"^H","cljs.core/count"]],"~i56",[["^ ","^1N",54,"^1O",77,"^H","t"]],"^29",[["^ ","^1N",0,"^1O",78]],"~i64",[["^ ","^1N",7,"^1O",78,"^H","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"~i69",[["^ ","^1N",52,"^1O",78,"^H","r"]],"~i71",[["^ ","^1N",54,"^1O",78]],"~i72",[["^ ","^1N",54,"^1O",78,"^H","cljs.core/vec"]],"~i76",[["^ ","^1N",68,"^1O",78],["^ ","^1N",113,"^1O",78]],"~i77",[["^ ","^1N",68,"^1O",78,"^H","cljs.core.take.cljs$core$IFn$_invoke$arity$2"]],"~i84",[["^ ","^1N",117,"^1O",78,"^H","t"]]],"~i51",["^ ","^27",[["^ ","^1N",3,"^1O",80]],"^20",[["^ ","^1N",3,"^1O",80,"^H","cljs.core/vector?"]],"^25",[["^ ","^1N",27,"^1O",80,"^H","t"]],"^2:",[["^ ","^1N",0,"^1O",81]],"~i41",[["^ ","^1N",7,"^1O",81,"^H","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"^2A",[["^ ","^1N",52,"^1O",81,"^H","r"]],"^2E",[["^ ","^1N",54,"^1O",81]],"^2F",[["^ ","^1N",54,"^1O",81,"^H","cljs.core/first"]],"~i55",[["^ ","^1N",70,"^1O",81,"^H","t"]]],"~i52",["^ ","^2G",[["^ ","^1N",0,"^1O",83]],"^24",[["^ ","^1N",7,"^1O",83,"^H","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"^2:",[["^ ","^1N",52,"^1O",83,"^H","r"]],"^2H",[["^ ","^1N",54,"^1O",83,"^H","t"]]],"~i53",["^ ","~i9",[["^ ","^1N",0,"^1O",89],["^ ","^1N",0,"^1O",96],["^ ","^1N",0,"^1O",99]]],"~i54",["^ ","^1R",[["^ ","^1N",20,"^1O",89]],"^1S",[["^ ","^1N",20,"^1O",89,"^H","fulcro.client.impl.data-fetch/multiple-targets?"]],"^24",[["^ ","^1N",74,"^1O",89,"^H","target"]],"^2;",[["^ ","^1N",0,"^1O",90]],"^2=",[["^ ","^1N",7,"^1O",90,"^H","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^2Q",[["^ ","^1N",54,"^1O",90],["^ ","^1N",0,"^1O",92]],"^2I",[["^ ","^1N",18,"^1O",91,"^H","refresh"]],"^2J",[["^ ","^1N",26,"^1O",91,"^H","t"]],"~i67",[["^ ","^1N",0,"^1O",92]],"~i68",[["^ ","^1N",7,"^1O",92,"^H","add-target"]],"~i79",[["^ ","^1N",18,"^1O",92,"^H","refresh"]],"~i87",[["^ ","^1N",26,"^1O",92,"^H","t"]],"~i91",[["^ ","^1N",1,"^1O",94,"^H","result"]],"~i98",[["^ ","^1N",12,"^1O",94,"^H","target"]]],"^2S",["^ ","^1R",[["^ ","^1N",20,"^1O",96,"^H","target"]],"^1Z",[["^ ","^1N",0,"^1O",97]],"^1U",[["^ ","^1N",7,"^1O",97,"^H","add-target"]],"^21",[["^ ","^1N",18,"^1O",97,"^H","result"]],"^25",[["^ ","^1N",29,"^1O",97,"^H","target"]]],"^2I",["^ ","^1Q",[["^ ","^1N",0,"^1O",99,"^H","result"]]],"~i58",["^ ","~i0",[["^ ","^1N",0,"^1O",105],["^ ","^1N",45,"^1O",108],["^ ","^1N",150,"^1O",108,"^H","p__46350"],["^ ","^1N",0,"^1O",109],["^ ","^1N",0,"^1O",109],["^ ","^1N",4,"^1O",109,"^H","map__46351"],["^ ","^1N",17,"^1O",109,"^H","p__46350"],["^ ","^1N",4,"^1O",110,"^H","map__46351"],["^ ","^1N",21,"^1O",110],["^ ","^1N",23,"^1O",110],["^ ","^1N",25,"^1O",110],["^ ","^1N",27,"^1O",110],["^ ","^1N",28,"^1O",110,"^H","map__46351"],["^ ","^1N",42,"^1O",110],["^ ","^1N",50,"^1O",110],["^ ","^1N",52,"^1O",110],["^ ","^1N",54,"^1O",110],["^ ","^1N",55,"^1O",110],["^ ","^1N",55,"^1O",110,"^H","map__46351"],["^ ","^1N",104,"^1O",110],["^ ","^1N",115,"^1O",110],["^ ","^1N",116,"^1O",110,"^H","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1N",148,"^1O",110],["^ ","^1N",148,"^1O",110,"^H","map__46351"],["^ ","^1N",179,"^1O",110],["^ ","^1N",184,"^1O",110],["^ ","^1N",191,"^1O",110],["^ ","^1N",199,"^1O",110],["^ ","^1N",199,"^1O",110,"^H","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",245,"^1O",110,"^H","cljs.core/hash-map"],["^ ","^1N",264,"^1O",110,"^H","map__46351"],["^ ","^1N",276,"^1O",110,"^H","map__46351"],["^ ","^1N",13,"^1O",111],["^ ","^1N",13,"^1O",111,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",57,"^1O",111,"^H","map__46351"],["^ ","^1N",72,"^1O",111],["^ ","^1N",15,"^1O",112],["^ ","^1N",15,"^1O",112,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",59,"^1O",112,"^H","map__46351"],["^ ","^1N",74,"^1O",112],["^ ","^1N",13,"^1O",113],["^ ","^1N",13,"^1O",113,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$3"],["^ ","^1N",57,"^1O",113,"^H","map__46351"],["^ ","^1N",72,"^1O",113],["^ ","^1N",130,"^1O",113],["^ ","^1N",19,"^1O",114],["^ ","^1N",19,"^1O",114,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",63,"^1O",114,"^H","map__46351"],["^ ","^1N",78,"^1O",114],["^ ","^1N",14,"^1O",115],["^ ","^1N",14,"^1O",115,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$3"],["^ ","^1N",58,"^1O",115,"^H","map__46351"],["^ ","^1N",73,"^1O",115],["^ ","^1N",132,"^1O",115],["^ ","^1N",15,"^1O",116],["^ ","^1N",15,"^1O",116,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$3"],["^ ","^1N",59,"^1O",116,"^H","map__46351"],["^ ","^1N",74,"^1O",116],["^ ","^1N",136,"^1O",116],["^ ","^1N",15,"^1O",117],["^ ","^1N",15,"^1O",117,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",59,"^1O",117,"^H","map__46351"],["^ ","^1N",74,"^1O",117],["^ ","^1N",13,"^1O",118],["^ ","^1N",13,"^1O",118,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$3"],["^ ","^1N",57,"^1O",118,"^H","map__46351"],["^ ","^1N",72,"^1O",118],["^ ","^1N",128,"^1O",118],["^ ","^1N",13,"^1O",119],["^ ","^1N",13,"^1O",119,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",57,"^1O",119,"^H","map__46351"],["^ ","^1N",72,"^1O",119],["^ ","^1N",20,"^1O",120],["^ ","^1N",20,"^1O",120,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",64,"^1O",120,"^H","map__46351"],["^ ","^1N",79,"^1O",120],["^ ","^1N",14,"^1O",121],["^ ","^1N",14,"^1O",121,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$3"],["^ ","^1N",58,"^1O",121,"^H","map__46351"],["^ ","^1N",73,"^1O",121],["^ ","^1N",132,"^1O",121],["^ ","^1N",17,"^1O",122],["^ ","^1N",17,"^1O",122,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$3"],["^ ","^1N",61,"^1O",122,"^H","map__46351"],["^ ","^1N",76,"^1O",122],["^ ","^1N",140,"^1O",122],["^ ","^1N",27,"^1O",123],["^ ","^1N",27,"^1O",123,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",71,"^1O",123,"^H","map__46351"],["^ ","^1N",86,"^1O",123],["^ ","^1N",12,"^1O",124],["^ ","^1N",12,"^1O",124,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",56,"^1O",124,"^H","map__46351"],["^ ","^1N",71,"^1O",124],["^ ","^1N",0,"^1O",125],["^ ","^1N",0,"^1O",125],["^ ","^1N",0,"^1O",126],["^ ","^1N",0,"^1O",127],["^ ","^1N",0,"^1O",127],["^ ","^1N",6,"^1O",127],["^ ","^1N",11,"^1O",127,"^H","js/Error"],["^ ","^1N",17,"^1O",127],["^ ","^1N",0,"^1O",130],["^ ","^1N",0,"^1O",131],["^ ","^1N",0,"^1O",132],["^ ","^1N",0,"^1O",132],["^ ","^1N",6,"^1O",132],["^ ","^1N",11,"^1O",132,"^H","js/Error"],["^ ","^1N",17,"^1O",132],["^ ","^1N",0,"^1O",135],["^ ","^1N",0,"^1O",136],["^ ","^1N",0,"^1O",137],["^ ","^1N",0,"^1O",137],["^ ","^1N",6,"^1O",137],["^ ","^1N",11,"^1O",137,"^H","js/Error"],["^ ","^1N",17,"^1O",137],["^ ","^1N",0,"^1O",140],["^ ","^1N",0,"^1O",141],["^ ","^1N",0,"^1O",142],["^ ","^1N",0,"^1O",142],["^ ","^1N",6,"^1O",142],["^ ","^1N",11,"^1O",142,"^H","js/Error"],["^ ","^1N",17,"^1O",142],["^ ","^1N",0,"^1O",145],["^ ","^1N",0,"^1O",146],["^ ","^1N",0,"^1O",147],["^ ","^1N",0,"^1O",147],["^ ","^1N",6,"^1O",147],["^ ","^1N",11,"^1O",147,"^H","js/Error"],["^ ","^1N",17,"^1O",147],["^ ","^1N",0,"^1O",150],["^ ","^1N",0,"^1O",151],["^ ","^1N",0,"^1O",152],["^ ","^1N",0,"^1O",152],["^ ","^1N",6,"^1O",152],["^ ","^1N",11,"^1O",152,"^H","js/Error"],["^ ","^1N",17,"^1O",152],["^ ","^1N",0,"^1O",155],["^ ","^1N",0,"^1O",156],["^ ","^1N",0,"^1O",157],["^ ","^1N",0,"^1O",157],["^ ","^1N",6,"^1O",157],["^ ","^1N",11,"^1O",157,"^H","js/Error"],["^ ","^1N",17,"^1O",157],["^ ","^1N",0,"^1O",160],["^ ","^1N",0,"^1O",161],["^ ","^1N",0,"^1O",162],["^ ","^1N",0,"^1O",162],["^ ","^1N",6,"^1O",162],["^ ","^1N",11,"^1O",162,"^H","js/Error"],["^ ","^1N",17,"^1O",162],["^ ","^1N",0,"^1O",165],["^ ","^1N",0,"^1O",166],["^ ","^1N",0,"^1O",167],["^ ","^1N",0,"^1O",167],["^ ","^1N",6,"^1O",167],["^ ","^1N",11,"^1O",167,"^H","js/Error"],["^ ","^1N",17,"^1O",167]],"~i6",[["^ ","^1N",0,"^1O",108,"^H","fulcro.client.data-fetch/load-params*"]]],"~i60",["^ ","~i3",[["^ ","^1N",98,"^1O",108,"^H","state-map"]],"^1M",[["^ ","^1N",108,"^1O",108,"^H","server-property-or-ident"]],"^26",[["^ ","^1N",133,"^1O",108,"^H","class-or-factory"]],"^29",[["^ ","^1N",4,"^1O",111,"^H","target"]],"~i70",[["^ ","^1N",4,"^1O",119,"^H","params"]],"^2O",[["^ ","^1N",4,"^1O",118,"^H","marker"]],"^2P",[["^ ","^1N",4,"^1O",115,"^H","refresh"]],"~i92",[["^ ","^1N",4,"^1O",116,"^H","parallel"]],"~i101",[["^ ","^1N",4,"^1O",120,"^H","post-mutation"]],"~i115",[["^ ","^1N",4,"^1O",123,"^H","post-mutation-params"]]],"~i61",["^ ","^29",[["^ ","^1N",4,"^1O",117,"^H","fallback"]],"^2M",[["^ ","^1N",4,"^1O",113,"^H","remote"]],"^2Y",[["^ ","^1N",4,"^1O",124,"^H","focus"]],"~i85",[["^ ","^1N",4,"^1O",121,"^H","without"]],"~i93",[["^ ","^1N",4,"^1O",122,"^H","initialize"]],"~i104",[["^ ","^1N",4,"^1O",112,"^H","abort-id"]],"~i113",[["^ ","^1N",4,"^1O",114,"^H","update-query"]]],"^2J",["^ ","~i9",[["^ ","^1N",3,"^1O",125]],"^1M",[["^ ","^1N",5,"^1O",125],["^ ","^1N",16,"^1O",125]],"^1U",[["^ ","^1N",6,"^1O",125,"^H","target"]],"^1[",[["^ ","^1N",27,"^1O",125]],"^27",[["^ ","^1N",27,"^1O",125,"^H","cljs.core/vector?"]],"^1Y",[["^ ","^1N",51,"^1O",125,"^H","target"]]],"~i65",["^ ","~i9",[["^ ","^1N",3,"^1O",130]],"^1M",[["^ ","^1N",5,"^1O",130],["^ ","^1N",23,"^1O",130]],"^1U",[["^ ","^1N",6,"^1O",130,"^H","post-mutation"]],"^2G",[["^ ","^1N",34,"^1O",130],["^ ","^1N",60,"^1O",130,"^H","cljs.core/Symbol"]],"^2;",[["^ ","^1N",35,"^1O",130,"^H","post-mutation"]]],"~i66",["^ ","~i9",[["^ ","^1N",3,"^1O",135]],"^1M",[["^ ","^1N",5,"^1O",135],["^ ","^1N",18,"^1O",135]],"^1U",[["^ ","^1N",6,"^1O",135,"^H","fallback"]],"^20",[["^ ","^1N",29,"^1O",135],["^ ","^1N",50,"^1O",135,"^H","cljs.core/Symbol"]],"^26",[["^ ","^1N",30,"^1O",135,"^H","fallback"]]],"^2W",["^ ","~i9",[["^ ","^1N",3,"^1O",140]],"^1M",[["^ ","^1N",5,"^1O",140],["^ ","^1N",30,"^1O",140]],"^1U",[["^ ","^1N",6,"^1O",140,"^H","post-mutation-params"]],"^2R",[["^ ","^1N",41,"^1O",140]],"^2H",[["^ ","^1N",41,"^1O",140,"^H","cljs.core/map?"]],"^2B",[["^ ","^1N",62,"^1O",140,"^H","post-mutation-params"]]],"^2X",["^ ","~i9",[["^ ","^1N",3,"^1O",145]],"~i10",[["^ ","^1N",3,"^1O",145,"^H","cljs.core/vector?"]],"^1Z",[["^ ","^1N",27,"^1O",145,"^H","refresh"]]],"^2K",["^ ","~i9",[["^ ","^1N",3,"^1O",150]],"^1M",[["^ ","^1N",5,"^1O",150],["^ ","^1N",16,"^1O",150]],"^1U",[["^ ","^1N",6,"^1O",150,"^H","params"]],"^1[",[["^ ","^1N",27,"^1O",150]],"^27",[["^ ","^1N",27,"^1O",150,"^H","cljs.core/map?"]],"^23",[["^ ","^1N",48,"^1O",150,"^H","params"]]],"^33",["^ ","~i9",[["^ ","^1N",3,"^1O",155]],"^3>",[["^ ","^1N",3,"^1O",155,"^H","cljs.core/set?"]],"^1P",[["^ ","^1N",24,"^1O",155,"^H","without"]]],"^2L",["^ ","~i9",[["^ ","^1N",3,"^1O",160]],"^1M",[["^ ","^1N",5,"^1O",160],["^ ","^1N",15,"^1O",160]],"^1U",[["^ ","^1N",6,"^1O",160,"^H","focus"]],"^1W",[["^ ","^1N",26,"^1O",160]],"^1[",[["^ ","^1N",26,"^1O",160,"^H","cljs.core/vector?"]],"^24",[["^ ","^1N",50,"^1O",160,"^H","focus"]]],"^2M",["^ ","~i9",[["^ ","^1N",3,"^1O",165]],"^1M",[["^ ","^1N",5,"^1O",165]],"~i14",[["^ ","^1N",5,"^1O",165,"^H","fulcro.util/ident?"]],"^1W",[["^ ","^1N",30,"^1O",165,"^H","server-property-or-ident"]],"^2T",[["^ ","^1N",61,"^1O",165],["^ ","^1N",98,"^1O",165,"^H","cljs.core/Keyword"]],"~i62",[["^ ","^1N",62,"^1O",165,"^H","server-property-or-ident"]]],"~i73",["^ ","~i2",[["^ ","^1N",0,"^1O",170],["^ ","^1N",0,"^1O",205],["^ ","^1N",0,"^1O",205],["^ ","^1N",47,"^1O",205],["^ ","^1N",105,"^1O",205],["^ ","^1N",164,"^1O",205],["^ ","^1N",226,"^1O",205],["^ ","^1N",286,"^1O",205],["^ ","^1N",342,"^1O",205],["^ ","^1N",414,"^1O",205],["^ ","^1N",473,"^1O",205],["^ ","^1N",537,"^1O",205],["^ ","^1N",622,"^1O",205],["^ ","^1N",676,"^1O",205],["^ ","^1N",732,"^1O",205],["^ ","^1N",788,"^1O",205]],"~i8",[["^ ","^1N",4,"^1O",170,"^H","query'"]],"^1P",[["^ ","^1N",25,"^1O",170],["^ ","^1N",5,"^1O",177]],"^1U",[["^ ","^1N",43,"^1O",170,"^H","class-or-factory"]]],"~i74",["^ ","^1Q",[["^ ","^1N",61,"^1O",170],["^ ","^1N",78,"^1O",170,"^H","G__46358"],["^ ","^1N",4,"^1O",171,"^H","G__46358"],["^ ","^1N",19,"^1O",171],["^ ","^1N",100,"^1O",171,"^H","G__46358"],["^ ","^1N",0,"^1O",172],["^ ","^1N",0,"^1O",172],["^ ","^1N",0,"^1O",173],["^ ","^1N",96,"^1O",173,"^H","G__46358"],["^ ","^1N",135,"^1O",173,"^H","G__46358"],["^ ","^1N",0,"^1O",175,"^H","G__46358"]],"^2>",[["^ ","^1N",89,"^1O",170]],"^1W",[["^ ","^1N",89,"^1O",170,"^H","fulcro.client.primitives.get_query.cljs$core$IFn$_invoke$arity$2"]],"^2R",[["^ ","^1N",154,"^1O",170,"^H","class-or-factory"]],"^31",[["^ ","^1N",171,"^1O",170,"^H","state-map"]]],"~i75",["^ ","^1U",[["^ ","^1N",37,"^1O",171,"^H","focus"]],"^2>",[["^ ","^1N",44,"^1O",171],["^ ","^1N",84,"^1O",171,"^H","G__46358"]],"^1W",[["^ ","^1N",44,"^1O",171,"^H","fulcro.client.primitives/focus-subquery"]],"^2A",[["^ ","^1N",93,"^1O",171,"^H","focus"]]],"^2N",["^ ","^1U",[["^ ","^1N",20,"^1O",172,"^H","update-query"]],"^22",[["^ ","^1N",8,"^1O",173,"^H","update-query"],["^ ","^1N",53,"^1O",173,"^H","update-query"],["^ ","^1N",112,"^1O",173,"^H","update-query"]]],"~i78",["^ ","~i8",[["^ ","^1N",4,"^1O",178,"^H","query"]],"^1P",[["^ ","^1N",12,"^1O",178],["^ ","^1N",6,"^1O",184],["^ ","^1N",6,"^1O",184,"^H","cljs.core/vec"],["^ ","^1N",20,"^1O",184],["^ ","^1N",20,"^1O",184,"^H","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1"],["^ ","^1N",69,"^1O",184],["^ ","^1N",69,"^1O",184,"^H","cljs.core/seq"],["^ ","^1N",83,"^1O",184],["^ ","^1N",83,"^1O",184,"^H","cljs.core.concat.cljs$core$IFn$_invoke$arity$1"],["^ ","^1N",130,"^1O",184],["^ ","^1N",135,"^1O",184,"^H","cljs.core/List"],["^ ","^1N",150,"^1O",184],["^ ","^1N",155,"^1O",184],["^ ","^1N",155,"^1O",184,"^H","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1"],["^ ","^1N",204,"^1O",184],["^ ","^1N",204,"^1O",184,"^H","cljs.core/seq"],["^ ","^1N",218,"^1O",184],["^ ","^1N",218,"^1O",184,"^H","cljs.core.concat.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",265,"^1O",184],["^ ","^1N",270,"^1O",184,"^H","cljs.core/List"],["^ ","^1N",285,"^1O",184],["^ ","^1N",290,"^1O",184],["^ ","^1N",290,"^1O",184,"^H","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",336,"^1O",184,"^H","cljs.core/array-map"],["^ ","^1N",356,"^1O",184],["^ ","^1N",356,"^1O",184,"^H","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1"],["^ ","^1N",405,"^1O",184],["^ ","^1N",405,"^1O",184,"^H","cljs.core/seq"],["^ ","^1N",419,"^1O",184],["^ ","^1N",419,"^1O",184,"^H","cljs.core.concat.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",466,"^1O",184],["^ ","^1N",471,"^1O",184,"^H","cljs.core/List"],["^ ","^1N",486,"^1O",184],["^ ","^1N",516,"^1O",184],["^ ","^1N",521,"^1O",184],["^ ","^1N",525,"^1O",184],["^ ","^1N",532,"^1O",184],["^ ","^1N",537,"^1O",184,"^H","cljs.core/List"],["^ ","^1N",552,"^1O",184],["^ ","^1N",576,"^1O",184],["^ ","^1N",581,"^1O",184],["^ ","^1N",585,"^1O",184],["^ ","^1N",596,"^1O",184],["^ ","^1N",601,"^1O",184],["^ ","^1N",605,"^1O",184],["^ ","^1N",612,"^1O",184],["^ ","^1N",617,"^1O",184,"^H","cljs.core/List"],["^ ","^1N",632,"^1O",184],["^ ","^1N",644,"^1O",184],["^ ","^1N",649,"^1O",184],["^ ","^1N",653,"^1O",184],["^ ","^1N",663,"^1O",184],["^ ","^1N",668,"^1O",184],["^ ","^1N",672,"^1O",184],["^ ","^1N",683,"^1O",184],["^ ","^1N",719,"^1O",184],["^ ","^1N",802,"^1O",184],["^ ","^1N",904,"^1O",184],["^ ","^1N",936,"^1O",184],["^ ","^1N",1136,"^1O",184],["^ ","^1N",1136,"^1O",184]]],"^2Y",["^ ","^1Q",[["^ ","^1N",30,"^1O",178],["^ ","^1N",47,"^1O",178,"^H","and__3938__auto__"],["^ ","^1N",0,"^1O",179],["^ ","^1N",0,"^1O",179],["^ ","^1N",20,"^1O",179,"^H","and__3938__auto__"],["^ ","^1N",0,"^1O",182,"^H","and__3938__auto__"]],"~i22",[["^ ","^1N",67,"^1O",178,"^H","class-or-factory"]],"^2D",[["^ ","^1N",0,"^1O",180]],"^2:",[["^ ","^1N",7,"^1O",180,"^H","cljs.core/map?"]],"^2@",[["^ ","^1N",28,"^1O",180,"^H","params"]],"^2C",[["^ ","^1N",491,"^1O",184,"^H","server-property-or-ident"]],"^38",[["^ ","^1N",557,"^1O",184,"^H","query'"]],"~i94",[["^ ","^1N",637,"^1O",184,"^H","params"]]],"~i80",["^ ","^1Q",[["^ ","^1N",701,"^1O",184,"^H","class-or-factory"]],"^1Y",[["^ ","^1N",850,"^1O",184,"^H","server-property-or-ident"]],"^37",[["^ ","^1N",875,"^1O",184,"^H","query'"]]],"~i81",["^ ","^1Q",[["^ ","^1N",906,"^1O",184]],"^1Z",[["^ ","^1N",906,"^1O",184,"^H","cljs.core/map?"]],"^1V",[["^ ","^1N",927,"^1O",184,"^H","params"]],"^22",[["^ ","^1N",1019,"^1O",184],["^ ","^1N",1024,"^1O",184,"^H","cljs.core/List"],["^ ","^1N",1039,"^1O",184],["^ ","^1N",1069,"^1O",184],["^ ","^1N",1074,"^1O",184,"^H","cljs.core/List"],["^ ","^1N",1089,"^1O",184],["^ ","^1N",1101,"^1O",184],["^ ","^1N",1106,"^1O",184],["^ ","^1N",1110,"^1O",184],["^ ","^1N",1117,"^1O",184],["^ ","^1N",1121,"^1O",184]],"^26",[["^ ","^1N",1044,"^1O",184,"^H","server-property-or-ident"]],"^29",[["^ ","^1N",1094,"^1O",184,"^H","params"]]],"~i82",["^ ","^1X",[["^ ","^1N",1219,"^1O",184,"^H","server-property-or-ident"]]],"~i83",["^ ","~i8",[["^ ","^1N",4,"^1O",186,"^H","marker"]],"^1P",[["^ ","^1N",17,"^1O",186]],"^1U",[["^ ","^1N",35,"^1O",186],["^ ","^1N",52,"^1O",186,"^H","and__3938__auto__"],["^ ","^1N",0,"^1O",187],["^ ","^1N",0,"^1O",187],["^ ","^1N",3,"^1O",187,"^H","and__3938__auto__"],["^ ","^1N",0,"^1O",190,"^H","and__3938__auto__"]],"^1X",[["^ ","^1N",72,"^1O",186]],"^2?",[["^ ","^1N",72,"^1O",186,"^H","marker"]],"^2D",[["^ ","^1N",0,"^1O",188]],"^2:",[["^ ","^1N",7,"^1O",188,"^H","fulcro.client.impl.data-fetch/special-target?"]],"^37",[["^ ","^1N",59,"^1O",188,"^H","target"]],"^33",[["^ ","^1N",6,"^1O",192],["^ ","^1N",0,"^1O",202]]],"^2P",["^ ","^2J",[["^ ","^1N",0,"^1O",193],["^ ","^1N",4,"^1O",193],["^ ","^1N",4,"^1O",193],["^ ","^1N",4,"^1O",193,"^H","fulcro.logging._log.cljs$core$IFn$_invoke$arity$variadic"],["^ ","^1N",61,"^1O",193],["^ ","^1N",104,"^1O",193],["^ ","^1N",158,"^1O",193],["^ ","^1N",185,"^1O",193],["^ ","^1N",237,"^1O",193],["^ ","^1N",248,"^1O",193],["^ ","^1N",16,"^1O",194],["^ ","^1N",19,"^1O",194],["^ ","^1N",20,"^1O",194,"^H","e46361"],["^ ","^1N",38,"^1O",194,"^H","js/Error"],["^ ","^1N",0,"^1O",195],["^ ","^1N",4,"^1O",195,"^H","e__31518__auto__"],["^ ","^1N",29,"^1O",195,"^H","e46361"],["^ ","^1N",0,"^1O",196],["^ ","^1N",0,"^1O",196],["^ ","^1N",0,"^1O",196,"^H","fulcro.logging._log.cljs$core$IFn$_invoke$arity$variadic"],["^ ","^1N",57,"^1O",196],["^ ","^1N",100,"^1O",196],["^ ","^1N",154,"^1O",196],["^ ","^1N",181,"^1O",196],["^ ","^1N",233,"^1O",196],["^ ","^1N",244,"^1O",196],["^ ","^1N",347,"^1O",196],["^ ","^1N",400,"^1O",196,"^H","e__31518__auto__"],["^ ","^1N",0,"^1O",198],["^ ","^1N",0,"^1O",198],["^ ","^1N",6,"^1O",198,"^H","e46361"]],"^3B",[["^ ","^1N",351,"^1O",193],["^ ","^1N",352,"^1O",193],["^ ","^1N",433,"^1O",193]],"~i90",[["^ ","^1N",407,"^1O",193,"^H","server-property-or-ident"]]],"^38",["^ ","^2L",[["^ ","^1N",1,"^1O",204,"^H","marker"]]],"~i86",["^ ","^1[",[["^ ","^1N",45,"^1O",232,"^H","query"]]],"^2Z",["^ ","^1[",[["^ ","^1N",851,"^1O",205,"^H","remote"]]],"~i88",["^ ","^1[",[["^ ","^1N",38,"^1O",232,"^H","target"]]],"~i89",["^ ","^1[",[["^ ","^1N",32,"^1O",232,"^H","focus"]]],"^3K",["^ ","^1[",[["^ ","^1N",984,"^1O",205,"^H","without"]]],"^2[",["^ ","^1[",[["^ ","^1N",970,"^1O",205,"^H","post-mutation"]]],"^34",["^ ","^1[",[["^ ","^1N",11,"^1O",232,"^H","post-mutation-params"]]],"^39",["^ ","^1[",[["^ ","^1N",992,"^1O",205],["^ ","^1N",6,"^1O",216],["^ ","^1N",5,"^1O",232]],"^23",[["^ ","^1N",1010,"^1O",205],["^ ","^1N",1027,"^1O",205,"^H","and__3938__auto__"],["^ ","^1N",0,"^1O",206],["^ ","^1N",0,"^1O",206],["^ ","^1N",20,"^1O",206,"^H","and__3938__auto__"],["^ ","^1N",0,"^1O",207],["^ ","^1N",4,"^1O",207,"^H","and__3938__auto__"],["^ ","^1N",0,"^1O",208],["^ ","^1N",0,"^1O",208],["^ ","^1N",20,"^1O",208,"^H","and__3938__auto__"],["^ ","^1N",0,"^1O",211,"^H","and__3938__auto__"],["^ ","^1N",0,"^1O",214,"^H","and__3938__auto__"]],"^26",[["^ ","^1N",1047,"^1O",205,"^H","initialize"]],"^2F",[["^ ","^1N",28,"^1O",207,"^H","class-or-factory"]],"^3=",[["^ ","^1N",0,"^1O",209,"^H","server-property-or-ident"]]],"^3F",["^ ","^20",[["^ ","^1N",6,"^1O",216],["^ ","^1N",0,"^1O",224],["^ ","^1N",0,"^1O",224]],"^24",[["^ ","^1N",23,"^1O",216,"^H","class"]],"^2R",[["^ ","^1N",32,"^1O",216],["^ ","^1N",49,"^1O",216,"^H","temp__5455__auto__"],["^ ","^1N",0,"^1O",217],["^ ","^1N",0,"^1O",217],["^ ","^1N",20,"^1O",217,"^H","temp__5455__auto__"],["^ ","^1N",0,"^1O",218],["^ ","^1N",8,"^1O",218,"^H","temp__5455__auto__"],["^ ","^1N",0,"^1O",219]],"^28",[["^ ","^1N",4,"^1O",218,"^H","c"]],"^2T",[["^ ","^1N",70,"^1O",216],["^ ","^1N",70,"^1O",216],["^ ","^1N",156,"^1O",216]],"^2I",[["^ ","^1N",171,"^1O",216,"^H","class-or-factory"]],"^3A",[["^ ","^1N",156,"^1O",216,"^H","cljs.core/meta"]]],"~i95",["^ ","^2;",[["^ ","^1N",0,"^1O",219,"^H","c"]],"^2@",[["^ ","^1N",0,"^1O",221,"^H","class-or-factory"]]],"~i96",["^ ","^22",[["^ ","^1N",55,"^1O",224,"^H","server-property-or-ident"]],"~i57",[["^ ","^1N",80,"^1O",224],["^ ","^1N",127,"^1O",224],["^ ","^1N",92,"^1O",230],["^ ","^1N",92,"^1O",230]]],"~i97",["^ ","^2C",[["^ ","^1N",82,"^1O",224]],"^32",[["^ ","^1N",82,"^1O",224,"^H","cljs.core/map?"]],"^3<",[["^ ","^1N",103,"^1O",224,"^H","initialize"]],"^2O",[["^ ","^1N",116,"^1O",224,"^H","initialize"]]],"^30",["^ ","^2C",[["^ ","^1N",145,"^1O",224],["^ ","^1N",162,"^1O",224,"^H","and__3938__auto__"],["^ ","^1N",0,"^1O",225],["^ ","^1N",0,"^1O",225],["^ ","^1N",20,"^1O",225,"^H","and__3938__auto__"],["^ ","^1N",0,"^1O",228,"^H","and__3938__auto__"]],"^2J",[["^ ","^1N",182,"^1O",224,"^H","initialize"]],"^3C",[["^ ","^1N",0,"^1O",226]],"^2N",[["^ ","^1N",7,"^1O",226,"^H","fulcro.client.primitives/has-initial-app-state?"]],"^3:",[["^ ","^1N",61,"^1O",226,"^H","class"]],"~i112",[["^ ","^1N",6,"^1O",230],["^ ","^1N",56,"^1O",230]],"^3;",[["^ ","^1N",6,"^1O",230,"^H","fulcro.client.primitives/get-initial-state"]],"~i136",[["^ ","^1N",49,"^1O",230,"^H","class"]]],"~i100",["^ ","^1[",[["^ ","^1N",858,"^1O",205]],"^27",[["^ ","^1N",858,"^1O",205,"^H","fulcro.client.data-fetch/computed-refresh"]],"^2@",[["^ ","^1N",900,"^1O",205,"^H","refresh"]],"^2U",[["^ ","^1N",908,"^1O",205,"^H","server-property-or-ident"]],"^3D",[["^ ","^1N",933,"^1O",205,"^H","target"]]],"^35",["^ ","^1[",[["^ ","^1N",959,"^1O",205,"^H","marker"]]],"~i102",["^ ","^1[",[["^ ","^1N",941,"^1O",205,"^H","parallel"]]],"~i103",["^ ","^1[",[["^ ","^1N",51,"^1O",232,"^H","abort-id"]]],"^3:",["^ ","^1[",[["^ ","^1N",950,"^1O",205,"^H","fallback"]]],"~i106",["^ ","~i0",[["^ ","^1N",0,"^1O",234],["^ ","^1N",41,"^1O",239],["^ ","^1N",0,"^1O",240],["^ ","^1N",0,"^1O",240],["^ ","^1N",0,"^1O",241],["^ ","^1N",0,"^1O",242],["^ ","^1N",0,"^1O",242],["^ ","^1N",6,"^1O",242],["^ ","^1N",11,"^1O",242,"^H","js/Error"],["^ ","^1N",17,"^1O",242]],"~i6",[["^ ","^1N",0,"^1O",239,"^H","fulcro.client.data-fetch/load-mutation"]]],"~i110",["^ ","~i3",[["^ ","^1N",90,"^1O",239,"^H","load-args"]]],"~i111",["^ ","~i9",[["^ ","^1N",3,"^1O",240]],"^1M",[["^ ","^1N",5,"^1O",240],["^ ","^1N",109,"^1O",240]],"^1U",[["^ ","^1N",6,"^1O",240],["^ ","^1N",6,"^1O",240]],"^20",[["^ ","^1N",95,"^1O",240,"^H","load-args"]],"^2R",[["^ ","^1N",120,"^1O",240]],"^2H",[["^ ","^1N",120,"^1O",240,"^H","cljs.core/vector?"]],"^28",[["^ ","^1N",144,"^1O",240],["^ ","^1N",144,"^1O",240]],"^32",[["^ ","^1N",233,"^1O",240,"^H","load-args"]]],"^3S",["^ ","~i2",[["^ ","^1N",0,"^1O",245],["^ ","^1N",0,"^1O",252]],"~i8",[["^ ","^1N",4,"^1O",245,"^H","refresh"]],"~i16",[["^ ","^1N",14,"^1O",245],["^ ","^1N",31,"^1O",245,"^H","or__3949__auto__"],["^ ","^1N",0,"^1O",246],["^ ","^1N",0,"^1O",246],["^ ","^1N",20,"^1O",246,"^H","or__3949__auto__"],["^ ","^1N",0,"^1O",247,"^H","or__3949__auto__"],["^ ","^1N",0,"^1O",249]],"^2<",[["^ ","^1N",50,"^1O",245],["^ ","^1N",50,"^1O",245]],"^21",[["^ ","^1N",139,"^1O",245,"^H","load-args"]]],"^3;",["^ ","~i4",[["^ ","^1N",0,"^1O",252],["^ ","^1N",52,"^1O",252],["^ ","^1N",291,"^1O",252]],"~i5",[["^ ","^1N",7,"^1O",252,"^H","cljs.core.into.cljs$core$IFn$_invoke$arity$2"]],"^1R",[["^ ","^1N",135,"^1O",252],["^ ","^1N",140,"^1O",252,"^H","cljs.core/List"],["^ ","^1N",155,"^1O",252],["^ ","^1N",160,"^1O",252],["^ ","^1N",229,"^1O",252],["^ ","^1N",234,"^1O",252,"^H","cljs.core/List"],["^ ","^1N",249,"^1O",252],["^ ","^1N",264,"^1O",252],["^ ","^1N",269,"^1O",252],["^ ","^1N",273,"^1O",252],["^ ","^1N",280,"^1O",252],["^ ","^1N",284,"^1O",252]],"^21",[["^ ","^1N",254,"^1O",252,"^H","load-args"]],"^2C",[["^ ","^1N",372,"^1O",252,"^H","refresh"]]],"^36",["^ ","~i0",[["^ ","^1N",0,"^1O",254],["^ ","^1N",0,"^1O",254],["^ ","^1N",32,"^1O",316],["^ ","^1N",72,"^1O",316,"^H","var_args"],["^ ","^1N",0,"^1O",317],["^ ","^1N",0,"^1O",317],["^ ","^1N",4,"^1O",317,"^H","G__46380"],["^ ","^1N",15,"^1O",317],["^ ","^1N",15,"^1O",317],["^ ","^1N",0,"^1O",318],["^ ","^1N",0,"^1O",318],["^ ","^1N",8,"^1O",318,"^H","G__46380"],["^ ","^1N",5,"^1O",319],["^ ","^1N",0,"^1O",320],["^ ","^1N",7,"^1O",320,"^H","fulcro.client.data-fetch/load"],["^ ","^1N",67,"^1O",320],["^ ","^1N",68,"^1O",320],["^ ","^1N",78,"^1O",320],["^ ","^1N",84,"^1O",320],["^ ","^1N",85,"^1O",320],["^ ","^1N",95,"^1O",320],["^ ","^1N",101,"^1O",320],["^ ","^1N",102,"^1O",320],["^ ","^1N",112,"^1O",320],["^ ","^1N",5,"^1O",323],["^ ","^1N",0,"^1O",324],["^ ","^1N",7,"^1O",324,"^H","fulcro.client.data-fetch/load"],["^ ","^1N",67,"^1O",324],["^ ","^1N",68,"^1O",324],["^ ","^1N",78,"^1O",324],["^ ","^1N",84,"^1O",324],["^ ","^1N",85,"^1O",324],["^ ","^1N",95,"^1O",324],["^ ","^1N",101,"^1O",324],["^ ","^1N",102,"^1O",324],["^ ","^1N",112,"^1O",324],["^ ","^1N",118,"^1O",324],["^ ","^1N",119,"^1O",324],["^ ","^1N",129,"^1O",324],["^ ","^1N",0,"^1O",328],["^ ","^1N",6,"^1O",328],["^ ","^1N",11,"^1O",328,"^H","js/Error"],["^ ","^1N",17,"^1O",328],["^ ","^1N",18,"^1O",328],["^ ","^1N",80,"^1O",328],["^ ","^1N",80,"^1O",328],["^ ","^1N",0,"^1O",333],["^ ","^1N",0,"^1O",333],["^ ","^1N",62,"^1O",333],["^ ","^1N",0,"^1O",334],["^ ","^1N",0,"^1O",337],["^ ","^1N",0,"^1O",337],["^ ","^1N",62,"^1O",337],["^ ","^1N",0,"^1O",338],["^ ","^1N",0,"^1O",338],["^ ","^1N",0,"^1O",358],["^ ","^1N",0,"^1O",359],["^ ","^1N",0,"^1O",359],["^ ","^1N",6,"^1O",359],["^ ","^1N",11,"^1O",359,"^H","js/Error"],["^ ","^1N",17,"^1O",359],["^ ","^1N",0,"^1O",370],["^ ","^1N",0,"^1O",370],["^ ","^1N",56,"^1O",370],["^ ","^1N",0,"^1O",372]],"~i6",[["^ ","^1N",0,"^1O",316,"^H","fulcro.client.data-fetch/load"],["^ ","^1N",0,"^1O",333,"^H","fulcro.client.data-fetch/load"],["^ ","^1N",0,"^1O",337,"^H","fulcro.client.data-fetch/load"],["^ ","^1N",0,"^1O",370,"^H","fulcro.client.data-fetch/load"]]],"~i176",["^ ","~i4",[["^ ","^1N",73,"^1O",333,"^H","app-or-comp-or-reconciler"]],"^21",[["^ ","^1N",99,"^1O",333,"^H","server-property-or-ident"]],"^2S",[["^ ","^1N",124,"^1O",333,"^H","class-or-factory"]],"^3A",[["^ ","^1N",0,"^1O",334],["^ ","^1N",135,"^1O",334]],"^3B",[["^ ","^1N",7,"^1O",334,"^H","fulcro.client.data_fetch.load.cljs$core$IFn$_invoke$arity$4"]],"^2Y",[["^ ","^1N",67,"^1O",334,"^H","app-or-comp-or-reconciler"]],"~i105",[["^ ","^1N",93,"^1O",334,"^H","server-property-or-ident"]],"~i130",[["^ ","^1N",118,"^1O",334,"^H","class-or-factory"]]],"~i177",["^ ","~i4",[["^ ","^1N",73,"^1O",337,"^H","app-or-comp-or-reconciler"]],"^21",[["^ ","^1N",99,"^1O",337,"^H","server-property-or-ident"]],"^2S",[["^ ","^1N",124,"^1O",337,"^H","class-or-factory"]],"^2M",[["^ ","^1N",141,"^1O",337,"^H","config"]]],"~i178",["^ ","^3>",[["^ ","^1N",3,"^1O",338],["^ ","^1N",20,"^1O",338,"^H","or__3949__auto__"],["^ ","^1N",0,"^1O",339],["^ ","^1N",0,"^1O",339],["^ ","^1N",3,"^1O",339,"^H","or__3949__auto__"],["^ ","^1N",0,"^1O",340,"^H","or__3949__auto__"],["^ ","^1N",0,"^1O",342],["^ ","^1N",4,"^1O",342,"^H","or__3949__auto__"],["^ ","^1N",0,"^1O",343],["^ ","^1N",0,"^1O",343],["^ ","^1N",3,"^1O",343,"^H","or__3949__auto__"],["^ ","^1N",0,"^1O",344,"^H","or__3949__auto__"]],"^3?",[["^ ","^1N",39,"^1O",338]],"^1P",[["^ ","^1N",39,"^1O",338,"^H","fulcro.client.primitives/component?"]],"^2?",[["^ ","^1N",81,"^1O",338,"^H","app-or-comp-or-reconciler"]]],"~i179",["^ ","^1S",[["^ ","^1N",27,"^1O",342]],"^1M",[["^ ","^1N",27,"^1O",342,"^H","fulcro.client.primitives/reconciler?"]],"^21",[["^ ","^1N",70,"^1O",342,"^H","app-or-comp-or-reconciler"]]],"~i180",["^ ","^1T",[["^ ","^1N",0,"^1O",346],["^ ","^1N",3,"^1O",346],["^ ","^1N",5,"^1O",346],["^ ","^1N",35,"^1O",346],["^ ","^1N",0,"^1O",347],["^ ","^1N",3,"^1O",347],["^ ","^1N",5,"^1O",347],["^ ","^1N",16,"^1O",347],["^ ","^1N",17,"^1O",347,"^H","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1N",49,"^1O",347],["^ ","^1N",0,"^1O",348],["^ ","^1N",0,"^1O",350],["^ ","^1N",0,"^1O",353]],"^2S",[["^ ","^1N",6,"^1O",346,"^H","app-or-comp-or-reconciler"],["^ ","^1N",49,"^1O",347,"^H","app-or-comp-or-reconciler"]]],"~i182",["^ ","~i3",[["^ ","^1N",0,"^1O",362],["^ ","^1N",0,"^1O",367]],"~i9",[["^ ","^1N",4,"^1O",362,"^H","config"]],"^23",[["^ ","^1N",17,"^1O",362],["^ ","^1N",120,"^1O",362],["^ ","^1N",163,"^1O",362],["^ ","^1N",219,"^1O",362],["^ ","^1N",224,"^1O",362],["^ ","^1N",286,"^1O",362],["^ ","^1N",292,"^1O",362],["^ ","^1N",351,"^1O",362],["^ ","^1N",384,"^1O",362],["^ ","^1N",443,"^1O",362]],"^2G",[["^ ","^1N",17,"^1O",362,"^H","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic"]],"^3P",[["^ ","^1N",485,"^1O",362,"^H","config"]]],"~i183",["^ ","~i9",[["^ ","^1N",4,"^1O",363,"^H","component-or-reconciler"]],"^23",[["^ ","^1N",30,"^1O",363]],"^2A",[["^ ","^1N",32,"^1O",363],["^ ","^1N",34,"^1O",363],["^ ","^1N",36,"^1O",363],["^ ","^1N",66,"^1O",363],["^ ","^1N",74,"^1O",363],["^ ","^1N",76,"^1O",363],["^ ","^1N",78,"^1O",363],["^ ","^1N",89,"^1O",363],["^ ","^1N",90,"^1O",363,"^H","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1N",122,"^1O",363],["^ ","^1N",185,"^1O",363],["^ ","^1N",190,"^1O",363],["^ ","^1N",197,"^1O",363]],"^3G",[["^ ","^1N",37,"^1O",363,"^H","app-or-comp-or-reconciler"],["^ ","^1N",122,"^1O",363,"^H","app-or-comp-or-reconciler"]]],"~i185",["^ ","^24",[["^ ","^1N",205,"^1O",363],["^ ","^1N",275,"^1O",363]],"^1Y",[["^ ","^1N",205,"^1O",363,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"]],"^2:",[["^ ","^1N",249,"^1O",363,"^H","app-or-comp-or-reconciler"]]],"~i186",["^ ","^24",[["^ ","^1N",342,"^1O",363,"^H","app-or-comp-or-reconciler"]]],"~i187",["^ ","~i9",[["^ ","^1N",4,"^1O",364,"^H","reconciler"]],"^23",[["^ ","^1N",17,"^1O",364]],"^25",[["^ ","^1N",19,"^1O",364]],"^26",[["^ ","^1N",19,"^1O",364,"^H","fulcro.client.primitives/reconciler?"]],"^2S",[["^ ","^1N",62,"^1O",364,"^H","component-or-reconciler"]],"^3G",[["^ ","^1N",88,"^1O",364,"^H","component-or-reconciler"]],"^3:",[["^ ","^1N",112,"^1O",364]],"^41",[["^ ","^1N",112,"^1O",364,"^H","fulcro.client.primitives/get-reconciler"]],"~i125",[["^ ","^1N",152,"^1O",364,"^H","component-or-reconciler"]]],"~i188",["^ ","~i9",[["^ ","^1N",4,"^1O",365,"^H","state"]],"^23",[["^ ","^1N",12,"^1O",365]],"^2G",[["^ ","^1N",12,"^1O",365,"^H","fulcro.client.primitives/app-state"]],"^2F",[["^ ","^1N",47,"^1O",365,"^H","reconciler"]]],"~i189",["^ ","~i9",[["^ ","^1N",4,"^1O",366,"^H","mutation-args"]],"^23",[["^ ","^1N",20,"^1O",366],["^ ","^1N",63,"^1O",366],["^ ","^1N",63,"^1O",366,"^H","cljs.core/deref"]],"^2G",[["^ ","^1N",20,"^1O",366,"^H","fulcro.client.data-fetch/load-params*"]],"^2E",[["^ ","^1N",79,"^1O",366,"^H","state"]],"^2V",[["^ ","^1N",86,"^1O",366,"^H","server-property-or-ident"]],"^2Y",[["^ ","^1N",111,"^1O",366,"^H","class-or-factory"]],"^3P",[["^ ","^1N",128,"^1O",366,"^H","config"]]],"~i190",["^ ","~i5",[["^ ","^1N",0,"^1O",367]],"~i6",[["^ ","^1N",7,"^1O",367,"^H","fulcro.client.primitives.transact_BANG_.cljs$core$IFn$_invoke$arity$2"]],"^1T",[["^ ","^1N",77,"^1O",367,"^H","component-or-reconciler"]],"^2@",[["^ ","^1N",101,"^1O",367]],"^2A",[["^ ","^1N",101,"^1O",367,"^H","fulcro.client.data-fetch/load-mutation"]],"^32",[["^ ","^1N",140,"^1O",367,"^H","mutation-args"]]],"~i193",["^ ","~i3",[["^ ","^1N",0,"^1O",372],["^ ","^1N",0,"^1O",372],["^ ","^1N",39,"^1O",395],["^ ","^1N",86,"^1O",395,"^H","var_args"],["^ ","^1N",0,"^1O",396],["^ ","^1N",0,"^1O",396],["^ ","^1N",4,"^1O",396,"^H","G__46396"],["^ ","^1N",15,"^1O",396],["^ ","^1N",15,"^1O",396],["^ ","^1N",0,"^1O",397],["^ ","^1N",0,"^1O",397],["^ ","^1N",8,"^1O",397,"^H","G__46396"],["^ ","^1N",5,"^1O",398],["^ ","^1N",0,"^1O",399],["^ ","^1N",7,"^1O",399,"^H","fulcro.client.data-fetch/load-action"],["^ ","^1N",74,"^1O",399],["^ ","^1N",75,"^1O",399],["^ ","^1N",85,"^1O",399],["^ ","^1N",91,"^1O",399],["^ ","^1N",92,"^1O",399],["^ ","^1N",102,"^1O",399],["^ ","^1N",108,"^1O",399],["^ ","^1N",109,"^1O",399],["^ ","^1N",119,"^1O",399],["^ ","^1N",5,"^1O",402],["^ ","^1N",0,"^1O",403],["^ ","^1N",7,"^1O",403,"^H","fulcro.client.data-fetch/load-action"],["^ ","^1N",74,"^1O",403],["^ ","^1N",75,"^1O",403],["^ ","^1N",85,"^1O",403],["^ ","^1N",91,"^1O",403],["^ ","^1N",92,"^1O",403],["^ ","^1N",102,"^1O",403],["^ ","^1N",108,"^1O",403],["^ ","^1N",109,"^1O",403],["^ ","^1N",119,"^1O",403],["^ ","^1N",125,"^1O",403],["^ ","^1N",126,"^1O",403],["^ ","^1N",136,"^1O",403],["^ ","^1N",0,"^1O",407],["^ ","^1N",6,"^1O",407],["^ ","^1N",11,"^1O",407,"^H","js/Error"],["^ ","^1N",17,"^1O",407],["^ ","^1N",18,"^1O",407],["^ ","^1N",80,"^1O",407],["^ ","^1N",80,"^1O",407],["^ ","^1N",0,"^1O",412],["^ ","^1N",0,"^1O",412],["^ ","^1N",69,"^1O",412],["^ ","^1N",0,"^1O",413],["^ ","^1N",0,"^1O",416],["^ ","^1N",0,"^1O",416],["^ ","^1N",69,"^1O",416],["^ ","^1N",0,"^1O",417],["^ ","^1N",0,"^1O",417],["^ ","^1N",0,"^1O",418],["^ ","^1N",0,"^1O",419],["^ ","^1N",0,"^1O",419],["^ ","^1N",6,"^1O",419],["^ ","^1N",11,"^1O",419,"^H","js/Error"],["^ ","^1N",17,"^1O",419],["^ ","^1N",0,"^1O",427],["^ ","^1N",0,"^1O",427],["^ ","^1N",63,"^1O",427],["^ ","^1N",0,"^1O",429]],"~i9",[["^ ","^1N",0,"^1O",395,"^H","fulcro.client.data-fetch/load-action"],["^ ","^1N",0,"^1O",412,"^H","fulcro.client.data-fetch/load-action"],["^ ","^1N",0,"^1O",416,"^H","fulcro.client.data-fetch/load-action"],["^ ","^1N",0,"^1O",427,"^H","fulcro.client.data-fetch/load-action"]]],"~i215",["^ ","~i7",[["^ ","^1N",80,"^1O",412,"^H","env"]],"^1R",[["^ ","^1N",84,"^1O",412,"^H","server-property-or-ident"]],"^1Y",[["^ ","^1N",109,"^1O",412,"^H","SubqueryClass"]],"^2Q",[["^ ","^1N",0,"^1O",413],["^ ","^1N",117,"^1O",413]],"^2T",[["^ ","^1N",7,"^1O",413,"^H","fulcro.client.data_fetch.load_action.cljs$core$IFn$_invoke$arity$4"]],"^2J",[["^ ","^1N",74,"^1O",413,"^H","env"]],"^2X",[["^ ","^1N",78,"^1O",413,"^H","server-property-or-ident"]],"^39",[["^ ","^1N",103,"^1O",413,"^H","SubqueryClass"]]],"~i216",["^ ","~i7",[["^ ","^1N",80,"^1O",416,"^H","env"]],"^1R",[["^ ","^1N",84,"^1O",416,"^H","server-property-or-ident"]],"^1Y",[["^ ","^1N",109,"^1O",416,"^H","SubqueryClass"]],"^28",[["^ ","^1N",123,"^1O",416,"^H","config"]]],"~i217",["^ ","^1M",[["^ ","^1N",3,"^1O",417]],"^1Z",[["^ ","^1N",5,"^1O",417]],"^1U",[["^ ","^1N",5,"^1O",417,"^H","cljs.core/map?"]],"^1X",[["^ ","^1N",26,"^1O",417,"^H","env"]],"^20",[["^ ","^1N",36,"^1O",417],["^ ","^1N",66,"^1O",417]],"^21",[["^ ","^1N",36,"^1O",417,"^H","cljs.core/contains?"]],"^2:",[["^ ","^1N",62,"^1O",417,"^H","env"]]],"~i218",["^ ","~i6",[["^ ","^1N",0,"^1O",422],["^ ","^1N",16,"^1O",423],["^ ","^1N",16,"^1O",423,"^H","cljs.core/deref"],["^ ","^1N",0,"^1O",424]],"^1S",[["^ ","^1N",4,"^1O",422,"^H","config"]],"^3E",[["^ ","^1N",17,"^1O",422],["^ ","^1N",120,"^1O",422],["^ ","^1N",163,"^1O",422],["^ ","^1N",219,"^1O",422],["^ ","^1N",224,"^1O",422],["^ ","^1N",286,"^1O",422],["^ ","^1N",292,"^1O",422],["^ ","^1N",351,"^1O",422],["^ ","^1N",384,"^1O",422],["^ ","^1N",443,"^1O",422]],"^1V",[["^ ","^1N",17,"^1O",422,"^H","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic"]],"^38",[["^ ","^1N",485,"^1O",422,"^H","config"]]],"~i219",["^ ","^1S",[["^ ","^1N",4,"^1O",423,"^H","state-map"]],"^1V",[["^ ","^1N",32,"^1O",423],["^ ","^1N",32,"^1O",423]],"^2?",[["^ ","^1N",118,"^1O",423,"^H","env"]]],"~i220",["^ ","~i8",[["^ ","^1N",0,"^1O",424]],"~i9",[["^ ","^1N",7,"^1O",424,"^H","fulcro.client.impl.data-fetch/mark-ready"]],"^2>",[["^ ","^1N",48,"^1O",424],["^ ","^1N",198,"^1O",424]],"^1W",[["^ ","^1N",48,"^1O",424,"^H","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3"]],"^22",[["^ ","^1N",94,"^1O",424]],"^23",[["^ ","^1N",94,"^1O",424,"^H","fulcro.client.data-fetch/load-params*"]],"^2A",[["^ ","^1N",137,"^1O",424,"^H","state-map"]],"^2I",[["^ ","^1N",147,"^1O",424,"^H","server-property-or-ident"]],"^3H",[["^ ","^1N",172,"^1O",424,"^H","SubqueryClass"]],"^3O",[["^ ","^1N",186,"^1O",424,"^H","config"]],"~i108",[["^ ","^1N",250,"^1O",424,"^H","env"]]],"~i222",["^ ","~i0",[["^ ","^1N",0,"^1O",429],["^ ","^1N",0,"^1O",429],["^ ","^1N",38,"^1O",459],["^ ","^1N",84,"^1O",459,"^H","var_args"],["^ ","^1N",0,"^1O",460],["^ ","^1N",0,"^1O",460],["^ ","^1N",4,"^1O",460,"^H","args__4534__auto__"],["^ ","^1N",25,"^1O",460],["^ ","^1N",0,"^1O",461],["^ ","^1N",0,"^1O",461],["^ ","^1N",4,"^1O",461,"^H","len__4531__auto__"],["^ ","^1N",30,"^1O",461],["^ ","^1N",30,"^1O",461],["^ ","^1N",0,"^1O",462],["^ ","^1N",0,"^1O",462],["^ ","^1N",4,"^1O",462,"^H","i__4532__auto__"],["^ ","^1N",28,"^1O",462],["^ ","^1N",0,"^1O",464],["^ ","^1N",0,"^1O",464],["^ ","^1N",3,"^1O",464],["^ ","^1N",4,"^1O",464,"^H","i__4532__auto__"],["^ ","^1N",28,"^1O",464,"^H","len__4531__auto__"],["^ ","^1N",0,"^1O",465],["^ ","^1N",0,"^1O",465],["^ ","^1N",0,"^1O",465,"^H","args__4534__auto__"],["^ ","^1N",24,"^1O",465],["^ ","^1N",25,"^1O",465],["^ ","^1N",35,"^1O",465,"^H","i__4532__auto__"],["^ ","^1N",0,"^1O",467],["^ ","^1N",15,"^1O",467],["^ ","^1N",16,"^1O",467,"^H","i__4532__auto__"],["^ ","^1N",40,"^1O",467],["^ ","^1N",0,"^1O",471],["^ ","^1N",0,"^1O",475],["^ ","^1N",4,"^1O",475,"^H","argseq__4535__auto__"],["^ ","^1N",27,"^1O",475],["^ ","^1N",29,"^1O",475],["^ ","^1N",30,"^1O",475],["^ ","^1N",36,"^1O",475],["^ ","^1N",36,"^1O",475,"^H","args__4534__auto__"],["^ ","^1N",64,"^1O",475],["^ ","^1N",64,"^1O",475],["^ ","^1N",69,"^1O",475,"^H","cljs.core/IndexedSeq"],["^ ","^1N",90,"^1O",475],["^ ","^1N",90,"^1O",475,"^H","args__4534__auto__"],["^ ","^1N",115,"^1O",475],["^ ","^1N",120,"^1O",475],["^ ","^1N",124,"^1O",475],["^ ","^1N",131,"^1O",475],["^ ","^1N",0,"^1O",476],["^ ","^1N",0,"^1O",476],["^ ","^1N",7,"^1O",476,"^H","fulcro.client.data-fetch/load-field"],["^ ","^1N",80,"^1O",476],["^ ","^1N",81,"^1O",476],["^ ","^1N",91,"^1O",476],["^ ","^1N",97,"^1O",476],["^ ","^1N",98,"^1O",476],["^ ","^1N",108,"^1O",476],["^ ","^1N",114,"^1O",476,"^H","argseq__4535__auto__"],["^ ","^1N",0,"^1O",479],["^ ","^1N",0,"^1O",479],["^ ","^1N",0,"^1O",479],["^ ","^1N",0,"^1O",479,"^H","fulcro.client.data-fetch/load-field"],["^ ","^1N",75,"^1O",479],["^ ","^1N",0,"^1O",480],["^ ","^1N",0,"^1O",513],["^ ","^1N",0,"^1O",513],["^ ","^1N",0,"^1O",513,"^H","fulcro.client.data-fetch/load-field"],["^ ","^1N",62,"^1O",513],["^ ","^1N",0,"^1O",515],["^ ","^1N",0,"^1O",516],["^ ","^1N",0,"^1O",516],["^ ","^1N",0,"^1O",516,"^H","fulcro.client.data-fetch/load-field"],["^ ","^1N",56,"^1O",516],["^ ","^1N",67,"^1O",516,"^H","seq46403"],["^ ","^1N",0,"^1O",517],["^ ","^1N",0,"^1O",517],["^ ","^1N",4,"^1O",517,"^H","G__46404"],["^ ","^1N",15,"^1O",517],["^ ","^1N",15,"^1O",517,"^H","cljs.core/first"],["^ ","^1N",31,"^1O",517,"^H","seq46403"],["^ ","^1N",4,"^1O",518,"^H","seq46403"],["^ ","^1N",19,"^1O",518],["^ ","^1N",19,"^1O",518,"^H","cljs.core/next"],["^ ","^1N",34,"^1O",518,"^H","seq46403"],["^ ","^1N",4,"^1O",519,"^H","G__46405"],["^ ","^1N",15,"^1O",519],["^ ","^1N",15,"^1O",519,"^H","cljs.core/first"],["^ ","^1N",31,"^1O",519,"^H","seq46403"],["^ ","^1N",4,"^1O",520,"^H","seq46403"],["^ ","^1N",19,"^1O",520],["^ ","^1N",19,"^1O",520,"^H","cljs.core/next"],["^ ","^1N",34,"^1O",520,"^H","seq46403"],["^ ","^1N",0,"^1O",521],["^ ","^1N",0,"^1O",521],["^ ","^1N",4,"^1O",521,"^H","self__4518__auto__"],["^ ","^1N",25,"^1O",521],["^ ","^1N",0,"^1O",522],["^ ","^1N",0,"^1O",522],["^ ","^1N",7,"^1O",522,"^H","self__4518__auto__"],["^ ","^1N",63,"^1O",522,"^H","G__46404"],["^ ","^1N",72,"^1O",522,"^H","G__46405"],["^ ","^1N",81,"^1O",522,"^H","seq46403"],["^ ","^1N",0,"^1O",525]],"~i6",[["^ ","^1N",0,"^1O",459,"^H","fulcro.client.data-fetch/load-field"]]],"~i251",["^ ","~i3",[["^ ","^1N",86,"^1O",479,"^H","component"]],"^1M",[["^ ","^1N",96,"^1O",479,"^H","field"]],"^1T",[["^ ","^1N",102,"^1O",479,"^H","params"]]],"~i252",["^ ","~i2",[["^ ","^1N",0,"^1O",480],["^ ","^1N",4,"^1O",481,"^H","map__46406"],["^ ","^1N",4,"^1O",482,"^H","map__46406"],["^ ","^1N",21,"^1O",482],["^ ","^1N",23,"^1O",482],["^ ","^1N",25,"^1O",482],["^ ","^1N",27,"^1O",482],["^ ","^1N",28,"^1O",482,"^H","map__46406"],["^ ","^1N",42,"^1O",482],["^ ","^1N",50,"^1O",482],["^ ","^1N",52,"^1O",482],["^ ","^1N",54,"^1O",482],["^ ","^1N",55,"^1O",482],["^ ","^1N",55,"^1O",482,"^H","map__46406"],["^ ","^1N",104,"^1O",482],["^ ","^1N",115,"^1O",482],["^ ","^1N",116,"^1O",482,"^H","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1N",148,"^1O",482],["^ ","^1N",148,"^1O",482,"^H","map__46406"],["^ ","^1N",179,"^1O",482],["^ ","^1N",184,"^1O",482],["^ ","^1N",191,"^1O",482],["^ ","^1N",199,"^1O",482],["^ ","^1N",199,"^1O",482,"^H","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",245,"^1O",482,"^H","cljs.core/hash-map"],["^ ","^1N",264,"^1O",482,"^H","map__46406"],["^ ","^1N",276,"^1O",482,"^H","map__46406"],["^ ","^1N",15,"^1O",483],["^ ","^1N",15,"^1O",483,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",59,"^1O",483,"^H","map__46406"],["^ ","^1N",74,"^1O",483],["^ ","^1N",13,"^1O",484],["^ ","^1N",13,"^1O",484,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$3"],["^ ","^1N",57,"^1O",484,"^H","map__46406"],["^ ","^1N",72,"^1O",484],["^ ","^1N",130,"^1O",484],["^ ","^1N",14,"^1O",485],["^ ","^1N",14,"^1O",485,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$3"],["^ ","^1N",58,"^1O",485,"^H","map__46406"],["^ ","^1N",73,"^1O",485],["^ ","^1N",132,"^1O",485],["^ ","^1N",15,"^1O",486],["^ ","^1N",15,"^1O",486,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",59,"^1O",486,"^H","map__46406"],["^ ","^1N",74,"^1O",486],["^ ","^1N",15,"^1O",487],["^ ","^1N",15,"^1O",487,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",59,"^1O",487,"^H","map__46406"],["^ ","^1N",74,"^1O",487],["^ ","^1N",13,"^1O",488],["^ ","^1N",13,"^1O",488,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$3"],["^ ","^1N",57,"^1O",488,"^H","map__46406"],["^ ","^1N",72,"^1O",488],["^ ","^1N",128,"^1O",488],["^ ","^1N",17,"^1O",489],["^ ","^1N",17,"^1O",489,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",61,"^1O",489,"^H","map__46406"],["^ ","^1N",76,"^1O",489],["^ ","^1N",20,"^1O",490],["^ ","^1N",20,"^1O",490,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",64,"^1O",490,"^H","map__46406"],["^ ","^1N",79,"^1O",490],["^ ","^1N",14,"^1O",491],["^ ","^1N",14,"^1O",491,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",58,"^1O",491,"^H","map__46406"],["^ ","^1N",73,"^1O",491],["^ ","^1N",27,"^1O",492],["^ ","^1N",27,"^1O",492,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",71,"^1O",492,"^H","map__46406"],["^ ","^1N",86,"^1O",492],["^ ","^1N",0,"^1O",502]],"~i8",[["^ ","^1N",4,"^1O",480,"^H","params"]],"^1Z",[["^ ","^1N",17,"^1O",480]],"^3E",[["^ ","^1N",19,"^1O",480]],"^1V",[["^ ","^1N",19,"^1O",480,"^H","cljs.core/map?"]],"^27",[["^ ","^1N",40,"^1O",480]],"^20",[["^ ","^1N",40,"^1O",480,"^H","cljs.core/first"]],"^24",[["^ ","^1N",56,"^1O",480,"^H","params"]],"^2=",[["^ ","^1N",66,"^1O",480]],"^2@",[["^ ","^1N",66,"^1O",480,"^H","cljs.core/first"]],"^2Q",[["^ ","^1N",82,"^1O",480,"^H","params"]],"^2C",[["^ ","^1N",90,"^1O",480,"^H","params"]]],"~i253",["^ ","^3[",[["^ ","^1N",4,"^1O",491,"^H","without"]],"^1X",[["^ ","^1N",4,"^1O",489,"^H","params"]],"^2?",[["^ ","^1N",4,"^1O",484,"^H","remote"]],"^26",[["^ ","^1N",4,"^1O",490,"^H","post-mutation"]],"^2T",[["^ ","^1N",4,"^1O",492,"^H","post-mutation-params"]],"^3A",[["^ ","^1N",4,"^1O",487,"^H","fallback"]],"^3I",[["^ ","^1N",4,"^1O",486,"^H","parallel"]],"^2[",[["^ ","^1N",4,"^1O",485,"^H","refresh"]],"~i99",[["^ ","^1N",4,"^1O",488,"^H","marker"]],"^3X",[["^ ","^1N",4,"^1O",483,"^H","abort-id"]]],"~i254",["^ ","^2I",[["^ ","^1N",17,"^1O",481,"^H","params"]]],"~i255",["^ ","~i8",[["^ ","^1N",4,"^1O",493,"^H","state-map"]],"^1Z",[["^ ","^1N",16,"^1O",493],["^ ","^1N",33,"^1O",493,"^H","G__46408"],["^ ","^1N",4,"^1O",494,"^H","G__46408"],["^ ","^1N",19,"^1O",494],["^ ","^1N",21,"^1O",494],["^ ","^1N",22,"^1O",494,"^H","G__46408"],["^ ","^1N",34,"^1O",494],["^ ","^1N",41,"^1O",494],["^ ","^1N",46,"^1O",494],["^ ","^1N",86,"^1O",494,"^H","G__46408"],["^ ","^1N",4,"^1O",495,"^H","G__46408"],["^ ","^1N",19,"^1O",495],["^ ","^1N",21,"^1O",495],["^ ","^1N",22,"^1O",495,"^H","G__46408"],["^ ","^1N",38,"^1O",495],["^ ","^1N",45,"^1O",495],["^ ","^1N",50,"^1O",495],["^ ","^1N",85,"^1O",495,"^H","G__46408"],["^ ","^1N",0,"^1O",496],["^ ","^1N",0,"^1O",496],["^ ","^1N",3,"^1O",496],["^ ","^1N",4,"^1O",496,"^H","G__46408"],["^ ","^1N",20,"^1O",496],["^ ","^1N",0,"^1O",497],["^ ","^1N",0,"^1O",499],["^ ","^1N",23,"^1O",499,"^H","G__46408"]],"^1W",[["^ ","^1N",44,"^1O",493,"^H","component"]],"^1Y",[["^ ","^1N",46,"^1O",494,"^H","fulcro.client.primitives/get-reconciler"]],"^2I",[["^ ","^1N",50,"^1O",495,"^H","fulcro.client.primitives/app-state"]],"^2L",[["^ ","^1N",7,"^1O",499,"^H","cljs.core/deref"]]],"~i256",["^ ","~i4",[["^ ","^1N",0,"^1O",502],["^ ","^1N",0,"^1O",503],["^ ","^1N",0,"^1O",508]],"^3>",[["^ ","^1N",20,"^1O",502,"^H","fallback"]],"^1U",[["^ ","^1N",0,"^1O",503],["^ ","^1N",0,"^1O",504],["^ ","^1N",0,"^1O",505],["^ ","^1N",0,"^1O",505],["^ ","^1N",6,"^1O",505],["^ ","^1N",11,"^1O",505,"^H","js/Error"],["^ ","^1N",17,"^1O",505],["^ ","^1N",18,"^1O",505],["^ ","^1N",36,"^1O",505],["^ ","^1N",74,"^1O",505],["^ ","^1N",79,"^1O",505]],"^1[",[["^ ","^1N",3,"^1O",503],["^ ","^1N",24,"^1O",503,"^H","cljs.core/Symbol"]],"^1Y",[["^ ","^1N",4,"^1O",503,"^H","fallback"]]],"~i257",["^ ","~i4",[["^ ","^1N",0,"^1O",510]],"~i5",[["^ ","^1N",7,"^1O",510,"^H","fulcro.client.primitives.transact_BANG_.cljs$core$IFn$_invoke$arity$2"]],"^2<",[["^ ","^1N",77,"^1O",510,"^H","component"]],"^21",[["^ ","^1N",87,"^1O",510],["^ ","^1N",132,"^1O",510],["^ ","^1N",1603,"^1O",510],["^ ","^1N",1676,"^1O",510]],"^2?",[["^ ","^1N",87,"^1O",510,"^H","cljs.core.into.cljs$core$IFn$_invoke$arity$2"]],"^25",[["^ ","^1N",215,"^1O",510],["^ ","^1N",220,"^1O",510,"^H","cljs.core/List"],["^ ","^1N",235,"^1O",510],["^ ","^1N",240,"^1O",510],["^ ","^1N",309,"^1O",510],["^ ","^1N",314,"^1O",510,"^H","cljs.core/List"],["^ ","^1N",329,"^1O",510],["^ ","^1N",334,"^1O",510],["^ ","^1N",374,"^1O",510],["^ ","^1N",432,"^1O",510],["^ ","^1N",491,"^1O",510],["^ ","^1N",553,"^1O",510],["^ ","^1N",613,"^1O",510],["^ ","^1N",669,"^1O",510],["^ ","^1N",725,"^1O",510],["^ ","^1N",781,"^1O",510],["^ ","^1N",853,"^1O",510],["^ ","^1N",912,"^1O",510],["^ ","^1N",964,"^1O",510],["^ ","^1N",1049,"^1O",510],["^ ","^1N",1105,"^1O",510],["^ ","^1N",1576,"^1O",510],["^ ","^1N",1581,"^1O",510],["^ ","^1N",1585,"^1O",510],["^ ","^1N",1592,"^1O",510],["^ ","^1N",1596,"^1O",510]]],"~i258",["^ ","^3@",[["^ ","^1N",1247,"^1O",510]],"^29",[["^ ","^1N",1247,"^1O",510,"^H","fulcro.client.primitives.get_ident.cljs$core$IFn$_invoke$arity$1"]],"^3D",[["^ ","^1N",1312,"^1O",510,"^H","component"]]],"~i259",["^ ","^3@",[["^ ","^1N",1219,"^1O",510,"^H","field"]]],"~i260",["^ ","^3@",[["^ ","^1N",1344,"^1O",510],["^ ","^1N",1467,"^1O",510]],"^29",[["^ ","^1N",1344,"^1O",510,"^H","fulcro.client.primitives/focus-query"]],"^3G",[["^ ","^1N",1381,"^1O",510]],"^3H",[["^ ","^1N",1381,"^1O",510,"^H","fulcro.client.primitives.get_query.cljs$core$IFn$_invoke$arity$2"]],"^3P",[["^ ","^1N",1446,"^1O",510,"^H","component"]],"^3X",[["^ ","^1N",1456,"^1O",510,"^H","state-map"]],"~i118",[["^ ","^1N",1550,"^1O",510,"^H","field"]]],"~i261",["^ ","^3@",[["^ ","^1N",1208,"^1O",510,"^H","params"]]],"~i262",["^ ","^3@",[["^ ","^1N",1239,"^1O",510,"^H","without"]]],"~i263",["^ ","^3@",[["^ ","^1N",1168,"^1O",510,"^H","remote"]]],"~i264",["^ ","^3@",[["^ ","^1N",1225,"^1O",510,"^H","post-mutation"]]],"~i265",["^ ","^3@",[["^ ","^1N",1323,"^1O",510,"^H","post-mutation-params"]]],"~i266",["^ ","^3@",[["^ ","^1N",1183,"^1O",510,"^H","parallel"]]],"~i267",["^ ","^3@",[["^ ","^1N",1201,"^1O",510,"^H","marker"]]],"~i268",["^ ","^3@",[["^ ","^1N",1175,"^1O",510,"^H","refresh"]]],"~i269",["^ ","^3@",[["^ ","^1N",1565,"^1O",510,"^H","abort-id"]]],"~i270",["^ ","^3@",[["^ ","^1N",1192,"^1O",510,"^H","fallback"]],"~i138",[["^ ","^1N",1809,"^1O",510]],"~i139",[["^ ","^1N",1809,"^1O",510,"^H","fulcro.client.primitives.get_ident.cljs$core$IFn$_invoke$arity$1"]],"~i154",[["^ ","^1N",1874,"^1O",510,"^H","component"]],"~i166",[["^ ","^1N",1893,"^1O",510,"^H","refresh"]]],"~i272",["^ ","~i0",[["^ ","^1N",0,"^1O",525],["^ ","^1N",0,"^1O",525],["^ ","^1N",45,"^1O",547],["^ ","^1N",98,"^1O",547,"^H","var_args"],["^ ","^1N",0,"^1O",548],["^ ","^1N",0,"^1O",548],["^ ","^1N",4,"^1O",548,"^H","args__4534__auto__"],["^ ","^1N",25,"^1O",548],["^ ","^1N",0,"^1O",549],["^ ","^1N",0,"^1O",549],["^ ","^1N",4,"^1O",549,"^H","len__4531__auto__"],["^ ","^1N",30,"^1O",549],["^ ","^1N",30,"^1O",549],["^ ","^1N",0,"^1O",550],["^ ","^1N",0,"^1O",550],["^ ","^1N",4,"^1O",550,"^H","i__4532__auto__"],["^ ","^1N",28,"^1O",550],["^ ","^1N",0,"^1O",552],["^ ","^1N",0,"^1O",552],["^ ","^1N",3,"^1O",552],["^ ","^1N",4,"^1O",552,"^H","i__4532__auto__"],["^ ","^1N",28,"^1O",552,"^H","len__4531__auto__"],["^ ","^1N",0,"^1O",553],["^ ","^1N",0,"^1O",553],["^ ","^1N",0,"^1O",553,"^H","args__4534__auto__"],["^ ","^1N",24,"^1O",553],["^ ","^1N",25,"^1O",553],["^ ","^1N",35,"^1O",553,"^H","i__4532__auto__"],["^ ","^1N",0,"^1O",555],["^ ","^1N",15,"^1O",555],["^ ","^1N",16,"^1O",555,"^H","i__4532__auto__"],["^ ","^1N",40,"^1O",555],["^ ","^1N",0,"^1O",559],["^ ","^1N",0,"^1O",563],["^ ","^1N",4,"^1O",563,"^H","argseq__4535__auto__"],["^ ","^1N",27,"^1O",563],["^ ","^1N",29,"^1O",563],["^ ","^1N",30,"^1O",563],["^ ","^1N",36,"^1O",563],["^ ","^1N",36,"^1O",563,"^H","args__4534__auto__"],["^ ","^1N",64,"^1O",563],["^ ","^1N",64,"^1O",563],["^ ","^1N",69,"^1O",563,"^H","cljs.core/IndexedSeq"],["^ ","^1N",90,"^1O",563],["^ ","^1N",90,"^1O",563,"^H","args__4534__auto__"],["^ ","^1N",115,"^1O",563],["^ ","^1N",120,"^1O",563],["^ ","^1N",124,"^1O",563],["^ ","^1N",131,"^1O",563],["^ ","^1N",0,"^1O",564],["^ ","^1N",0,"^1O",564],["^ ","^1N",7,"^1O",564,"^H","fulcro.client.data-fetch/load-field-action"],["^ ","^1N",87,"^1O",564],["^ ","^1N",88,"^1O",564],["^ ","^1N",98,"^1O",564],["^ ","^1N",104,"^1O",564],["^ ","^1N",105,"^1O",564],["^ ","^1N",115,"^1O",564],["^ ","^1N",121,"^1O",564],["^ ","^1N",122,"^1O",564],["^ ","^1N",132,"^1O",564],["^ ","^1N",138,"^1O",564],["^ ","^1N",139,"^1O",564],["^ ","^1N",149,"^1O",564],["^ ","^1N",155,"^1O",564,"^H","argseq__4535__auto__"],["^ ","^1N",0,"^1O",567],["^ ","^1N",0,"^1O",567],["^ ","^1N",0,"^1O",567],["^ ","^1N",0,"^1O",567,"^H","fulcro.client.data-fetch/load-field-action"],["^ ","^1N",82,"^1O",567],["^ ","^1N",0,"^1O",568],["^ ","^1N",0,"^1O",593],["^ ","^1N",0,"^1O",593],["^ ","^1N",0,"^1O",593,"^H","fulcro.client.data-fetch/load-field-action"],["^ ","^1N",69,"^1O",593],["^ ","^1N",0,"^1O",595],["^ ","^1N",0,"^1O",596],["^ ","^1N",0,"^1O",596],["^ ","^1N",0,"^1O",596,"^H","fulcro.client.data-fetch/load-field-action"],["^ ","^1N",63,"^1O",596],["^ ","^1N",74,"^1O",596,"^H","seq46434"],["^ ","^1N",0,"^1O",597],["^ ","^1N",0,"^1O",597],["^ ","^1N",4,"^1O",597,"^H","G__46435"],["^ ","^1N",15,"^1O",597],["^ ","^1N",15,"^1O",597,"^H","cljs.core/first"],["^ ","^1N",31,"^1O",597,"^H","seq46434"],["^ ","^1N",4,"^1O",598,"^H","seq46434"],["^ ","^1N",19,"^1O",598],["^ ","^1N",19,"^1O",598,"^H","cljs.core/next"],["^ ","^1N",34,"^1O",598,"^H","seq46434"],["^ ","^1N",4,"^1O",599,"^H","G__46436"],["^ ","^1N",15,"^1O",599],["^ ","^1N",15,"^1O",599,"^H","cljs.core/first"],["^ ","^1N",31,"^1O",599,"^H","seq46434"],["^ ","^1N",4,"^1O",600,"^H","seq46434"],["^ ","^1N",19,"^1O",600],["^ ","^1N",19,"^1O",600,"^H","cljs.core/next"],["^ ","^1N",34,"^1O",600,"^H","seq46434"],["^ ","^1N",4,"^1O",601,"^H","G__46437"],["^ ","^1N",15,"^1O",601],["^ ","^1N",15,"^1O",601,"^H","cljs.core/first"],["^ ","^1N",31,"^1O",601,"^H","seq46434"],["^ ","^1N",4,"^1O",602,"^H","seq46434"],["^ ","^1N",19,"^1O",602],["^ ","^1N",19,"^1O",602,"^H","cljs.core/next"],["^ ","^1N",34,"^1O",602,"^H","seq46434"],["^ ","^1N",4,"^1O",603,"^H","G__46438"],["^ ","^1N",15,"^1O",603],["^ ","^1N",15,"^1O",603,"^H","cljs.core/first"],["^ ","^1N",31,"^1O",603,"^H","seq46434"],["^ ","^1N",4,"^1O",604,"^H","seq46434"],["^ ","^1N",19,"^1O",604],["^ ","^1N",19,"^1O",604,"^H","cljs.core/next"],["^ ","^1N",34,"^1O",604,"^H","seq46434"],["^ ","^1N",0,"^1O",605],["^ ","^1N",0,"^1O",605],["^ ","^1N",4,"^1O",605,"^H","self__4518__auto__"],["^ ","^1N",25,"^1O",605],["^ ","^1N",0,"^1O",606],["^ ","^1N",0,"^1O",606],["^ ","^1N",7,"^1O",606,"^H","self__4518__auto__"],["^ ","^1N",63,"^1O",606,"^H","G__46435"],["^ ","^1N",72,"^1O",606,"^H","G__46436"],["^ ","^1N",81,"^1O",606,"^H","G__46437"],["^ ","^1N",90,"^1O",606,"^H","G__46438"],["^ ","^1N",99,"^1O",606,"^H","seq46434"],["^ ","^1N",0,"^1O",609]],"~i6",[["^ ","^1N",0,"^1O",547,"^H","fulcro.client.data-fetch/load-field-action"]]],"~i293",["^ ","~i3",[["^ ","^1N",93,"^1O",567,"^H","env-or-app-state"]],"^2<",[["^ ","^1N",110,"^1O",567,"^H","component-class"]],"^1Y",[["^ ","^1N",126,"^1O",567,"^H","ident"]],"^2H",[["^ ","^1N",132,"^1O",567,"^H","field"]],"^28",[["^ ","^1N",138,"^1O",567,"^H","params"]]],"~i294",["^ ","~i2",[["^ ","^1N",0,"^1O",568],["^ ","^1N",4,"^1O",569,"^H","map__46439"],["^ ","^1N",4,"^1O",570,"^H","map__46439"],["^ ","^1N",21,"^1O",570],["^ ","^1N",23,"^1O",570],["^ ","^1N",25,"^1O",570],["^ ","^1N",27,"^1O",570],["^ ","^1N",28,"^1O",570,"^H","map__46439"],["^ ","^1N",42,"^1O",570],["^ ","^1N",50,"^1O",570],["^ ","^1N",52,"^1O",570],["^ ","^1N",54,"^1O",570],["^ ","^1N",55,"^1O",570],["^ ","^1N",55,"^1O",570,"^H","map__46439"],["^ ","^1N",104,"^1O",570],["^ ","^1N",115,"^1O",570],["^ ","^1N",116,"^1O",570,"^H","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1N",148,"^1O",570],["^ ","^1N",148,"^1O",570,"^H","map__46439"],["^ ","^1N",179,"^1O",570],["^ ","^1N",184,"^1O",570],["^ ","^1N",191,"^1O",570],["^ ","^1N",199,"^1O",570],["^ ","^1N",199,"^1O",570,"^H","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",245,"^1O",570,"^H","cljs.core/hash-map"],["^ ","^1N",264,"^1O",570,"^H","map__46439"],["^ ","^1N",276,"^1O",570,"^H","map__46439"],["^ ","^1N",15,"^1O",571],["^ ","^1N",15,"^1O",571,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",59,"^1O",571,"^H","map__46439"],["^ ","^1N",74,"^1O",571],["^ ","^1N",13,"^1O",572],["^ ","^1N",13,"^1O",572,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$3"],["^ ","^1N",57,"^1O",572,"^H","map__46439"],["^ ","^1N",72,"^1O",572],["^ ","^1N",130,"^1O",572],["^ ","^1N",14,"^1O",573],["^ ","^1N",14,"^1O",573,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$3"],["^ ","^1N",58,"^1O",573,"^H","map__46439"],["^ ","^1N",73,"^1O",573],["^ ","^1N",132,"^1O",573],["^ ","^1N",15,"^1O",574],["^ ","^1N",15,"^1O",574,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",59,"^1O",574,"^H","map__46439"],["^ ","^1N",74,"^1O",574],["^ ","^1N",15,"^1O",575],["^ ","^1N",15,"^1O",575,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",59,"^1O",575,"^H","map__46439"],["^ ","^1N",74,"^1O",575],["^ ","^1N",13,"^1O",576],["^ ","^1N",13,"^1O",576,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$3"],["^ ","^1N",57,"^1O",576,"^H","map__46439"],["^ ","^1N",72,"^1O",576],["^ ","^1N",128,"^1O",576],["^ ","^1N",17,"^1O",577],["^ ","^1N",17,"^1O",577,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",61,"^1O",577,"^H","map__46439"],["^ ","^1N",76,"^1O",577],["^ ","^1N",20,"^1O",578],["^ ","^1N",20,"^1O",578,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",64,"^1O",578,"^H","map__46439"],["^ ","^1N",79,"^1O",578],["^ ","^1N",14,"^1O",579],["^ ","^1N",14,"^1O",579,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",58,"^1O",579,"^H","map__46439"],["^ ","^1N",73,"^1O",579],["^ ","^1N",27,"^1O",580],["^ ","^1N",27,"^1O",580,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",71,"^1O",580,"^H","map__46439"],["^ ","^1N",86,"^1O",580],["^ ","^1N",0,"^1O",590]],"~i8",[["^ ","^1N",4,"^1O",568,"^H","params"]],"^1Z",[["^ ","^1N",17,"^1O",568]],"^3E",[["^ ","^1N",19,"^1O",568]],"^1V",[["^ ","^1N",19,"^1O",568,"^H","cljs.core/map?"]],"^27",[["^ ","^1N",40,"^1O",568]],"^20",[["^ ","^1N",40,"^1O",568,"^H","cljs.core/first"]],"^24",[["^ ","^1N",56,"^1O",568,"^H","params"]],"^2=",[["^ ","^1N",66,"^1O",568]],"^2@",[["^ ","^1N",66,"^1O",568,"^H","cljs.core/first"]],"^2Q",[["^ ","^1N",82,"^1O",568,"^H","params"]],"^2C",[["^ ","^1N",90,"^1O",568,"^H","params"]]],"~i295",["^ ","^3[",[["^ ","^1N",4,"^1O",579,"^H","without"]],"^1X",[["^ ","^1N",4,"^1O",577,"^H","params"]],"^2?",[["^ ","^1N",4,"^1O",572,"^H","remote"]],"^26",[["^ ","^1N",4,"^1O",578,"^H","post-mutation"]],"^2T",[["^ ","^1N",4,"^1O",580,"^H","post-mutation-params"]],"^3A",[["^ ","^1N",4,"^1O",575,"^H","fallback"]],"^3I",[["^ ","^1N",4,"^1O",574,"^H","parallel"]],"^2[",[["^ ","^1N",4,"^1O",573,"^H","refresh"]],"^4L",[["^ ","^1N",4,"^1O",576,"^H","marker"]],"^3X",[["^ ","^1N",4,"^1O",571,"^H","abort-id"]]],"~i296",["^ ","^2I",[["^ ","^1N",17,"^1O",569,"^H","params"]]],"~i297",["^ ","~i8",[["^ ","^1N",4,"^1O",581,"^H","env"]],"^1Z",[["^ ","^1N",10,"^1O",581],["^ ","^1N",178,"^1O",581],["^ ","^1N",221,"^1O",581]],"^3E",[["^ ","^1N",12,"^1O",581]],"^1[",[["^ ","^1N",14,"^1O",581]],"^27",[["^ ","^1N",14,"^1O",581,"^H","cljs.core/map?"]],"^23",[["^ ","^1N",35,"^1O",581,"^H","env-or-app-state"]],"^2Q",[["^ ","^1N",58,"^1O",581],["^ ","^1N",101,"^1O",581]],"^2T",[["^ ","^1N",58,"^1O",581,"^H","cljs.core/contains?"]],"^3@",[["^ ","^1N",84,"^1O",581,"^H","env-or-app-state"]]],"~i298",["^ ","^2<",[["^ ","^1N",161,"^1O",581,"^H","env-or-app-state"]]],"~i299",["^ ","^27",[["^ ","^1N",277,"^1O",581,"^H","env-or-app-state"]]],"~i300",["^ ","~i8",[["^ ","^1N",4,"^1O",582,"^H","state-map"]],"^1Z",[["^ ","^1N",16,"^1O",582],["^ ","^1N",33,"^1O",582,"^H","G__46447"],["^ ","^1N",4,"^1O",583,"^H","G__46447"],["^ ","^1N",19,"^1O",583],["^ ","^1N",21,"^1O",583],["^ ","^1N",22,"^1O",583,"^H","G__46447"],["^ ","^1N",34,"^1O",583],["^ ","^1N",41,"^1O",583],["^ ","^1N",46,"^1O",583],["^ ","^1N",46,"^1O",583],["^ ","^1N",132,"^1O",583,"^H","G__46447"],["^ ","^1N",0,"^1O",584],["^ ","^1N",0,"^1O",584],["^ ","^1N",3,"^1O",584],["^ ","^1N",4,"^1O",584,"^H","G__46447"],["^ ","^1N",20,"^1O",584],["^ ","^1N",0,"^1O",585],["^ ","^1N",0,"^1O",587],["^ ","^1N",23,"^1O",587,"^H","G__46447"]],"^1W",[["^ ","^1N",44,"^1O",582,"^H","env"]],"^25",[["^ ","^1N",7,"^1O",587,"^H","cljs.core/deref"]]],"~i301",["^ ","~i4",[["^ ","^1N",0,"^1O",590],["^ ","^1N",48,"^1O",590],["^ ","^1N",88,"^1O",590],["^ ","^1N",146,"^1O",590],["^ ","^1N",205,"^1O",590],["^ ","^1N",267,"^1O",590],["^ ","^1N",327,"^1O",590],["^ ","^1N",383,"^1O",590],["^ ","^1N",439,"^1O",590],["^ ","^1N",495,"^1O",590],["^ ","^1N",547,"^1O",590],["^ ","^1N",619,"^1O",590],["^ ","^1N",678,"^1O",590],["^ ","^1N",730,"^1O",590],["^ ","^1N",815,"^1O",590],["^ ","^1N",871,"^1O",590]],"~i5",[["^ ","^1N",7,"^1O",590,"^H","fulcro.client.impl.data-fetch/mark-ready"]]],"~i302",["^ ","^20",[["^ ","^1N",991,"^1O",590,"^H","env"]]],"~i303",["^ ","^20",[["^ ","^1N",985,"^1O",590,"^H","field"]]],"~i304",["^ ","^20",[["^ ","^1N",1017,"^1O",590,"^H","ident"]]],"~i305",["^ ","^20",[["^ ","^1N",1044,"^1O",590],["^ ","^1N",1173,"^1O",590]],"^21",[["^ ","^1N",1044,"^1O",590,"^H","fulcro.client.primitives/focus-query"]],"^2B",[["^ ","^1N",1081,"^1O",590]],"^2E",[["^ ","^1N",1081,"^1O",590,"^H","fulcro.client.primitives.get_query.cljs$core$IFn$_invoke$arity$2"]],"^29",[["^ ","^1N",1146,"^1O",590,"^H","component-class"]],"^2Y",[["^ ","^1N",1162,"^1O",590,"^H","state-map"]],"^2[",[["^ ","^1N",1256,"^1O",590,"^H","field"]]],"~i306",["^ ","^20",[["^ ","^1N",974,"^1O",590,"^H","params"]]],"~i307",["^ ","^20",[["^ ","^1N",934,"^1O",590,"^H","remote"]]],"~i308",["^ ","^20",[["^ ","^1N",1009,"^1O",590,"^H","without"]]],"~i309",["^ ","^20",[["^ ","^1N",949,"^1O",590,"^H","parallel"]]],"~i310",["^ ","^20",[["^ ","^1N",941,"^1O",590,"^H","refresh"]]],"~i311",["^ ","^20",[["^ ","^1N",967,"^1O",590,"^H","marker"]]],"~i312",["^ ","^20",[["^ ","^1N",995,"^1O",590,"^H","post-mutation"]]],"~i313",["^ ","^20",[["^ ","^1N",1023,"^1O",590,"^H","post-mutation-params"]]],"~i314",["^ ","^20",[["^ ","^1N",1271,"^1O",590,"^H","abort-id"]]],"~i315",["^ ","^20",[["^ ","^1N",958,"^1O",590,"^H","fallback"]]],"~i317",["^ ","~i0",[["^ ","^1N",0,"^1O",609],["^ ","^1N",39,"^1O",615],["^ ","^1N",0,"^1O",616]],"~i6",[["^ ","^1N",0,"^1O",615,"^H","fulcro.client.data-fetch/remote-load"]]],"~i322",["^ ","~i3",[["^ ","^1N",86,"^1O",615,"^H","parsing-env"]]],"~i323",["^ ","~i2",[["^ ","^1N",0,"^1O",616],["^ ","^1N",0,"^1O",617]],"~i8",[["^ ","^1N",4,"^1O",616,"^H","ast"]],"^1S",[["^ ","^1N",10,"^1O",616],["^ ","^1N",10,"^1O",616]],"^1Z",[["^ ","^1N",91,"^1O",616,"^H","parsing-env"]]],"~i324",["^ ","~i4",[["^ ","^1N",0,"^1O",617],["^ ","^1N",64,"^1O",617],["^ ","^1N",116,"^1O",617],["^ ","^1N",235,"^1O",617],["^ ","^1N",303,"^1O",617]],"~i5",[["^ ","^1N",7,"^1O",617,"^H","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic"]],"^1R",[["^ ","^1N",60,"^1O",617,"^H","ast"]]],"~i327",["^ ","~i0",[["^ ","^1N",0,"^1O",619],["^ ","^1N",45,"^1O",619],["^ ","^1N",0,"^1O",620]],"~i6",[["^ ","^1N",0,"^1O",619,"^H","fulcro.client.data-fetch/data-state?"]],"^1U",[["^ ","^1N",98,"^1O",619,"^H","state"]],"^1W",[["^ ","^1N",0,"^1O",620]],"^1[",[["^ ","^1N",7,"^1O",620,"^H","fulcro.client.impl.data-fetch/data-state?"]],"^2=",[["^ ","^1N",55,"^1O",620,"^H","state"]]],"~i328",["^ ","~i0",[["^ ","^1N",0,"^1O",622],["^ ","^1N",40,"^1O",622],["^ ","^1N",0,"^1O",623]],"~i6",[["^ ","^1N",0,"^1O",622,"^H","fulcro.client.data-fetch/ready?"]],"^3?",[["^ ","^1N",88,"^1O",622,"^H","state"]],"^1T",[["^ ","^1N",0,"^1O",623]],"^3E",[["^ ","^1N",7,"^1O",623,"^H","fulcro.client.impl.data-fetch/ready?"]],"^2G",[["^ ","^1N",50,"^1O",623,"^H","state"]]],"~i329",["^ ","~i0",[["^ ","^1N",0,"^1O",625],["^ ","^1N",42,"^1O",625],["^ ","^1N",0,"^1O",626]],"~i6",[["^ ","^1N",0,"^1O",625,"^H","fulcro.client.data-fetch/loading?"]],"^3[",[["^ ","^1N",92,"^1O",625,"^H","state"]],"^1V",[["^ ","^1N",0,"^1O",626]],"^1X",[["^ ","^1N",7,"^1O",626,"^H","fulcro.client.impl.data-fetch/loading?"]],"^26",[["^ ","^1N",52,"^1O",626,"^H","state"]]],"~i330",["^ ","~i0",[["^ ","^1N",0,"^1O",628],["^ ","^1N",41,"^1O",628],["^ ","^1N",0,"^1O",629]],"~i6",[["^ ","^1N",0,"^1O",628,"^H","fulcro.client.data-fetch/failed?"]],"^1P",[["^ ","^1N",90,"^1O",628,"^H","state"]],"^3E",[["^ ","^1N",0,"^1O",629]],"^1V",[["^ ","^1N",7,"^1O",629,"^H","fulcro.client.impl.data-fetch/failed?"]],"^1Y",[["^ ","^1N",51,"^1O",629,"^H","state"]]],"~i334",["^ ","~i0",[["^ ","^1N",0,"^1O",631],["^ ","^1N",0,"^1O",631],["^ ","^1N",41,"^1O",677],["^ ","^1N",90,"^1O",677,"^H","var_args"],["^ ","^1N",0,"^1O",678],["^ ","^1N",0,"^1O",678],["^ ","^1N",4,"^1O",678,"^H","args__4534__auto__"],["^ ","^1N",25,"^1O",678],["^ ","^1N",0,"^1O",679],["^ ","^1N",0,"^1O",679],["^ ","^1N",4,"^1O",679,"^H","len__4531__auto__"],["^ ","^1N",30,"^1O",679],["^ ","^1N",30,"^1O",679],["^ ","^1N",0,"^1O",680],["^ ","^1N",0,"^1O",680],["^ ","^1N",4,"^1O",680,"^H","i__4532__auto__"],["^ ","^1N",28,"^1O",680],["^ ","^1N",0,"^1O",682],["^ ","^1N",0,"^1O",682],["^ ","^1N",3,"^1O",682],["^ ","^1N",4,"^1O",682,"^H","i__4532__auto__"],["^ ","^1N",28,"^1O",682,"^H","len__4531__auto__"],["^ ","^1N",0,"^1O",683],["^ ","^1N",0,"^1O",683],["^ ","^1N",0,"^1O",683,"^H","args__4534__auto__"],["^ ","^1N",24,"^1O",683],["^ ","^1N",25,"^1O",683],["^ ","^1N",35,"^1O",683,"^H","i__4532__auto__"],["^ ","^1N",0,"^1O",685],["^ ","^1N",15,"^1O",685],["^ ","^1N",16,"^1O",685,"^H","i__4532__auto__"],["^ ","^1N",40,"^1O",685],["^ ","^1N",0,"^1O",689],["^ ","^1N",0,"^1O",693],["^ ","^1N",4,"^1O",693,"^H","argseq__4535__auto__"],["^ ","^1N",27,"^1O",693],["^ ","^1N",29,"^1O",693],["^ ","^1N",30,"^1O",693],["^ ","^1N",36,"^1O",693],["^ ","^1N",36,"^1O",693,"^H","args__4534__auto__"],["^ ","^1N",64,"^1O",693],["^ ","^1N",64,"^1O",693],["^ ","^1N",69,"^1O",693,"^H","cljs.core/IndexedSeq"],["^ ","^1N",90,"^1O",693],["^ ","^1N",90,"^1O",693,"^H","args__4534__auto__"],["^ ","^1N",115,"^1O",693],["^ ","^1N",120,"^1O",693],["^ ","^1N",124,"^1O",693],["^ ","^1N",131,"^1O",693],["^ ","^1N",0,"^1O",694],["^ ","^1N",0,"^1O",694],["^ ","^1N",7,"^1O",694,"^H","fulcro.client.data-fetch/lazily-loaded"],["^ ","^1N",83,"^1O",694],["^ ","^1N",84,"^1O",694],["^ ","^1N",94,"^1O",694],["^ ","^1N",100,"^1O",694],["^ ","^1N",101,"^1O",694],["^ ","^1N",111,"^1O",694],["^ ","^1N",117,"^1O",694,"^H","argseq__4535__auto__"],["^ ","^1N",0,"^1O",697],["^ ","^1N",0,"^1O",697],["^ ","^1N",0,"^1O",697],["^ ","^1N",0,"^1O",697,"^H","fulcro.client.data-fetch/lazily-loaded"],["^ ","^1N",78,"^1O",697],["^ ","^1N",107,"^1O",697,"^H","p__46558"],["^ ","^1N",0,"^1O",698],["^ ","^1N",0,"^1O",698],["^ ","^1N",4,"^1O",698,"^H","map__46559"],["^ ","^1N",17,"^1O",698,"^H","p__46558"],["^ ","^1N",4,"^1O",699,"^H","map__46559"],["^ ","^1N",21,"^1O",699],["^ ","^1N",23,"^1O",699],["^ ","^1N",25,"^1O",699],["^ ","^1N",27,"^1O",699],["^ ","^1N",28,"^1O",699,"^H","map__46559"],["^ ","^1N",42,"^1O",699],["^ ","^1N",50,"^1O",699],["^ ","^1N",52,"^1O",699],["^ ","^1N",54,"^1O",699],["^ ","^1N",55,"^1O",699],["^ ","^1N",55,"^1O",699,"^H","map__46559"],["^ ","^1N",104,"^1O",699],["^ ","^1N",115,"^1O",699],["^ ","^1N",116,"^1O",699,"^H","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1N",148,"^1O",699],["^ ","^1N",148,"^1O",699,"^H","map__46559"],["^ ","^1N",179,"^1O",699],["^ ","^1N",184,"^1O",699],["^ ","^1N",191,"^1O",699],["^ ","^1N",199,"^1O",699],["^ ","^1N",199,"^1O",699,"^H","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",245,"^1O",699,"^H","cljs.core/hash-map"],["^ ","^1N",264,"^1O",699,"^H","map__46559"],["^ ","^1N",276,"^1O",699,"^H","map__46559"],["^ ","^1N",19,"^1O",700],["^ ","^1N",19,"^1O",700,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$3"],["^ ","^1N",63,"^1O",700,"^H","map__46559"],["^ ","^1N",78,"^1O",700],["^ ","^1N",21,"^1O",705],["^ ","^1N",21,"^1O",705,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$3"],["^ ","^1N",65,"^1O",705,"^H","map__46559"],["^ ","^1N",80,"^1O",705],["^ ","^1N",20,"^1O",710],["^ ","^1N",20,"^1O",710,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$3"],["^ ","^1N",64,"^1O",710,"^H","map__46559"],["^ ","^1N",79,"^1O",710],["^ ","^1N",25,"^1O",715],["^ ","^1N",25,"^1O",715,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",69,"^1O",715,"^H","map__46559"],["^ ","^1N",84,"^1O",715],["^ ","^1N",0,"^1O",716],["^ ","^1N",0,"^1O",743],["^ ","^1N",0,"^1O",743],["^ ","^1N",0,"^1O",743,"^H","fulcro.client.data-fetch/lazily-loaded"],["^ ","^1N",65,"^1O",743],["^ ","^1N",0,"^1O",745],["^ ","^1N",0,"^1O",746],["^ ","^1N",0,"^1O",746],["^ ","^1N",0,"^1O",746,"^H","fulcro.client.data-fetch/lazily-loaded"],["^ ","^1N",59,"^1O",746],["^ ","^1N",70,"^1O",746,"^H","seq46548"],["^ ","^1N",0,"^1O",747],["^ ","^1N",0,"^1O",747],["^ ","^1N",4,"^1O",747,"^H","G__46549"],["^ ","^1N",15,"^1O",747],["^ ","^1N",15,"^1O",747,"^H","cljs.core/first"],["^ ","^1N",31,"^1O",747,"^H","seq46548"],["^ ","^1N",4,"^1O",748,"^H","seq46548"],["^ ","^1N",19,"^1O",748],["^ ","^1N",19,"^1O",748,"^H","cljs.core/next"],["^ ","^1N",34,"^1O",748,"^H","seq46548"],["^ ","^1N",4,"^1O",749,"^H","G__46550"],["^ ","^1N",15,"^1O",749],["^ ","^1N",15,"^1O",749,"^H","cljs.core/first"],["^ ","^1N",31,"^1O",749,"^H","seq46548"],["^ ","^1N",4,"^1O",750,"^H","seq46548"],["^ ","^1N",19,"^1O",750],["^ ","^1N",19,"^1O",750,"^H","cljs.core/next"],["^ ","^1N",34,"^1O",750,"^H","seq46548"],["^ ","^1N",0,"^1O",751],["^ ","^1N",0,"^1O",751],["^ ","^1N",4,"^1O",751,"^H","self__4518__auto__"],["^ ","^1N",25,"^1O",751],["^ ","^1N",0,"^1O",752],["^ ","^1N",0,"^1O",752],["^ ","^1N",7,"^1O",752,"^H","self__4518__auto__"],["^ ","^1N",63,"^1O",752,"^H","G__46549"],["^ ","^1N",72,"^1O",752,"^H","G__46550"],["^ ","^1N",81,"^1O",752,"^H","seq46548"],["^ ","^1N",0,"^1O",755]],"~i6",[["^ ","^1N",0,"^1O",677,"^H","fulcro.client.data-fetch/lazily-loaded"]]],"~i379",["^ ","~i3",[["^ ","^1N",89,"^1O",697,"^H","data-render"]],"^1P",[["^ ","^1N",101,"^1O",697,"^H","props"]],"^2?",[["^ ","^1N",4,"^1O",700,"^H","ready-render"]],"^2=",[["^ ","^1N",4,"^1O",705,"^H","loading-render"]],"^2C",[["^ ","^1N",4,"^1O",710,"^H","failed-render"]],"^3A",[["^ ","^1N",4,"^1O",715,"^H","not-present-render"]]],"~i380",["^ ","^2A",[["^ ","^1N",154,"^1O",705],["^ ","^1N",0,"^1O",707],["^ ","^1N",0,"^1O",707]],"^2Q",[["^ ","^1N",18,"^1O",706,"^H","_"]]],"~i381",["^ ","^2A",[["^ ","^1N",148,"^1O",700],["^ ","^1N",0,"^1O",702],["^ ","^1N",0,"^1O",702]],"^2Q",[["^ ","^1N",18,"^1O",701,"^H","_"]]],"~i382",["^ ","^2A",[["^ ","^1N",150,"^1O",710],["^ ","^1N",0,"^1O",712],["^ ","^1N",0,"^1O",712]],"^2Q",[["^ ","^1N",18,"^1O",711,"^H","_"]]],"~i384",["^ ","~i2",[["^ ","^1N",0,"^1O",716],["^ ","^1N",0,"^1O",717]],"~i8",[["^ ","^1N",4,"^1O",716,"^H","state"]],"^3?",[["^ ","^1N",12,"^1O",716],["^ ","^1N",12,"^1O",716]],"^2?",[["^ ","^1N",112,"^1O",716,"^H","props"]]],"~i385",["^ ","~i4",[["^ ","^1N",0,"^1O",717],["^ ","^1N",0,"^1O",720],["^ ","^1N",0,"^1O",723],["^ ","^1N",0,"^1O",726],["^ ","^1N",0,"^1O",735]]],"~i386",["^ ","~i6",[["^ ","^1N",20,"^1O",717]],"~i7",[["^ ","^1N",20,"^1O",717,"^H","fulcro.client.data-fetch/ready?"]],"^3?",[["^ ","^1N",58,"^1O",717,"^H","state"]],"^1T",[["^ ","^1N",0,"^1O",718]],"^3E",[["^ ","^1N",8,"^1O",718,"^H","ready-render"],["^ ","^1N",53,"^1O",718,"^H","ready-render"],["^ ","^1N",105,"^1O",718,"^H","ready-render"]],"^24",[["^ ","^1N",96,"^1O",718,"^H","props"],["^ ","^1N",128,"^1O",718,"^H","props"]]],"~i387",["^ ","~i6",[["^ ","^1N",20,"^1O",720]],"~i7",[["^ ","^1N",20,"^1O",720,"^H","fulcro.client.data-fetch/loading?"]],"^3[",[["^ ","^1N",60,"^1O",720,"^H","state"]],"^1V",[["^ ","^1N",0,"^1O",721]],"^1X",[["^ ","^1N",8,"^1O",721,"^H","loading-render"],["^ ","^1N",55,"^1O",721,"^H","loading-render"],["^ ","^1N",109,"^1O",721,"^H","loading-render"]],"^2D",[["^ ","^1N",100,"^1O",721,"^H","props"],["^ ","^1N",134,"^1O",721,"^H","props"]]],"~i388",["^ ","~i6",[["^ ","^1N",20,"^1O",723]],"~i7",[["^ ","^1N",20,"^1O",723,"^H","fulcro.client.data-fetch/failed?"]],"^1P",[["^ ","^1N",59,"^1O",723,"^H","state"]],"^3E",[["^ ","^1N",0,"^1O",724]],"^1V",[["^ ","^1N",8,"^1O",724,"^H","failed-render"],["^ ","^1N",54,"^1O",724,"^H","failed-render"],["^ ","^1N",107,"^1O",724,"^H","failed-render"]],"^25",[["^ ","^1N",98,"^1O",724,"^H","props"],["^ ","^1N",131,"^1O",724,"^H","props"]]],"~i389",["^ ","~i6",[["^ ","^1N",20,"^1O",726],["^ ","^1N",37,"^1O",726,"^H","and__3938__auto__"],["^ ","^1N",0,"^1O",727],["^ ","^1N",0,"^1O",727],["^ ","^1N",20,"^1O",727,"^H","and__3938__auto__"],["^ ","^1N",0,"^1O",730,"^H","and__3938__auto__"]],"^1R",[["^ ","^1N",57,"^1O",726,"^H","not-present-render"]],"^21",[["^ ","^1N",0,"^1O",728],["^ ","^1N",17,"^1O",728]],"^1Y",[["^ ","^1N",8,"^1O",728,"^H","props"]],"^2=",[["^ ","^1N",0,"^1O",733]],"^2@",[["^ ","^1N",8,"^1O",733,"^H","not-present-render"],["^ ","^1N",59,"^1O",733,"^H","not-present-render"],["^ ","^1N",117,"^1O",733,"^H","not-present-render"]],"^2J",[["^ ","^1N",108,"^1O",733,"^H","props"],["^ ","^1N",146,"^1O",733,"^H","props"]]],"~i390",["^ ","^1S",[["^ ","^1N",0,"^1O",735]],"^1M",[["^ ","^1N",8,"^1O",735,"^H","data-render"],["^ ","^1N",52,"^1O",735,"^H","data-render"],["^ ","^1N",103,"^1O",735,"^H","data-render"]],"^2>",[["^ ","^1N",94,"^1O",735,"^H","props"],["^ ","^1N",125,"^1O",735,"^H","props"]]],"~i392",["^ ","~i0",[["^ ","^1N",0,"^1O",755],["^ ","^1N",0,"^1O",755],["^ ","^1N",41,"^1O",755],["^ ","^1N",90,"^1O",755,"^H","var_args"],["^ ","^1N",0,"^1O",756],["^ ","^1N",0,"^1O",756],["^ ","^1N",4,"^1O",756,"^H","G__46600"],["^ ","^1N",15,"^1O",756],["^ ","^1N",15,"^1O",756],["^ ","^1N",0,"^1O",757],["^ ","^1N",0,"^1O",757],["^ ","^1N",8,"^1O",757,"^H","G__46600"],["^ ","^1N",5,"^1O",758],["^ ","^1N",0,"^1O",759],["^ ","^1N",7,"^1O",759,"^H","fulcro.client.data-fetch/refresh!"],["^ ","^1N",76,"^1O",759],["^ ","^1N",77,"^1O",759],["^ ","^1N",87,"^1O",759],["^ ","^1N",93,"^1O",759],["^ ","^1N",94,"^1O",759],["^ ","^1N",104,"^1O",759],["^ ","^1N",5,"^1O",762],["^ ","^1N",0,"^1O",763],["^ ","^1N",7,"^1O",763,"^H","fulcro.client.data-fetch/refresh!"],["^ ","^1N",76,"^1O",763],["^ ","^1N",77,"^1O",763],["^ ","^1N",87,"^1O",763],["^ ","^1N",0,"^1O",767],["^ ","^1N",6,"^1O",767],["^ ","^1N",11,"^1O",767,"^H","js/Error"],["^ ","^1N",17,"^1O",767],["^ ","^1N",18,"^1O",767],["^ ","^1N",80,"^1O",767],["^ ","^1N",80,"^1O",767],["^ ","^1N",0,"^1O",772],["^ ","^1N",0,"^1O",772],["^ ","^1N",71,"^1O",772],["^ ","^1N",0,"^1O",773],["^ ","^1N",0,"^1O",776],["^ ","^1N",0,"^1O",776],["^ ","^1N",71,"^1O",776],["^ ","^1N",0,"^1O",777],["^ ","^1N",0,"^1O",780],["^ ","^1N",0,"^1O",780],["^ ","^1N",65,"^1O",780],["^ ","^1N",0,"^1O",782]],"~i6",[["^ ","^1N",0,"^1O",755,"^H","fulcro.client.data-fetch/refresh!"],["^ ","^1N",0,"^1O",772,"^H","fulcro.client.data-fetch/refresh!"],["^ ","^1N",0,"^1O",776,"^H","fulcro.client.data-fetch/refresh!"],["^ ","^1N",0,"^1O",780,"^H","fulcro.client.data-fetch/refresh!"]]],"~i393",["^ ","~i4",[["^ ","^1N",82,"^1O",772,"^H","component"]],"^3?",[["^ ","^1N",92,"^1O",772,"^H","load-options"]]],"~i394",["^ ","~i3",[["^ ","^1N",0,"^1O",773]],"~i4",[["^ ","^1N",7,"^1O",773,"^H","fulcro.client.data_fetch.load.cljs$core$IFn$_invoke$arity$4"]],"~i9",[["^ ","^1N",67,"^1O",773,"^H","component"]],"^1U",[["^ ","^1N",77,"^1O",773]],"^2<",[["^ ","^1N",77,"^1O",773,"^H","fulcro.client.primitives.get_ident.cljs$core$IFn$_invoke$arity$1"]],"^24",[["^ ","^1N",142,"^1O",773,"^H","component"]],"^2A",[["^ ","^1N",153,"^1O",773]],"^2B",[["^ ","^1N",153,"^1O",773,"^H","fulcro.client.primitives/react-type"]],"^29",[["^ ","^1N",189,"^1O",773,"^H","component"]],"^3B",[["^ ","^1N",200,"^1O",773,"^H","load-options"]]],"~i395",["^ ","~i4",[["^ ","^1N",82,"^1O",776,"^H","component"]]],"~i396",["^ ","~i3",[["^ ","^1N",0,"^1O",777]],"~i4",[["^ ","^1N",7,"^1O",777,"^H","fulcro.client.data_fetch.load.cljs$core$IFn$_invoke$arity$3"]],"~i9",[["^ ","^1N",67,"^1O",777,"^H","component"]],"^1U",[["^ ","^1N",77,"^1O",777]],"^2<",[["^ ","^1N",77,"^1O",777,"^H","fulcro.client.primitives.get_ident.cljs$core$IFn$_invoke$arity$1"]],"^24",[["^ ","^1N",142,"^1O",777,"^H","component"]],"^2A",[["^ ","^1N",153,"^1O",777]],"^2B",[["^ ","^1N",153,"^1O",777,"^H","fulcro.client.primitives/react-type"]],"^29",[["^ ","^1N",189,"^1O",777,"^H","component"]]],"~i398",["^ ","~i0",[["^ ","^1N",0,"^1O",782],["^ ","^1N",38,"^1O",782],["^ ","^1N",88,"^1O",782,"^H","p__46605"],["^ ","^1N",0,"^1O",783],["^ ","^1N",0,"^1O",783],["^ ","^1N",4,"^1O",783,"^H","map__46606"],["^ ","^1N",17,"^1O",783,"^H","p__46605"],["^ ","^1N",4,"^1O",784,"^H","map__46606"],["^ ","^1N",21,"^1O",784],["^ ","^1N",23,"^1O",784],["^ ","^1N",25,"^1O",784],["^ ","^1N",27,"^1O",784],["^ ","^1N",28,"^1O",784,"^H","map__46606"],["^ ","^1N",42,"^1O",784],["^ ","^1N",50,"^1O",784],["^ ","^1N",52,"^1O",784],["^ ","^1N",54,"^1O",784],["^ ","^1N",55,"^1O",784],["^ ","^1N",55,"^1O",784,"^H","map__46606"],["^ ","^1N",104,"^1O",784],["^ ","^1N",115,"^1O",784],["^ ","^1N",116,"^1O",784,"^H","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1N",148,"^1O",784],["^ ","^1N",148,"^1O",784,"^H","map__46606"],["^ ","^1N",179,"^1O",784],["^ ","^1N",184,"^1O",784],["^ ","^1N",191,"^1O",784],["^ ","^1N",199,"^1O",784],["^ ","^1N",199,"^1O",784,"^H","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",245,"^1O",784,"^H","cljs.core/hash-map"],["^ ","^1N",264,"^1O",784,"^H","map__46606"],["^ ","^1N",276,"^1O",784,"^H","map__46606"],["^ ","^1N",13,"^1O",785,"^H","map__46606"],["^ ","^1N",20,"^1O",786],["^ ","^1N",20,"^1O",786,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",64,"^1O",786,"^H","map__46606"],["^ ","^1N",79,"^1O",786],["^ ","^1N",13,"^1O",787],["^ ","^1N",13,"^1O",787,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",57,"^1O",787,"^H","map__46606"],["^ ","^1N",72,"^1O",787],["^ ","^1N",0,"^1O",788],["^ ","^1N",0,"^1O",806],["^ ","^1N",147,"^1O",806],["^ ","^1N",152,"^1O",806]],"~i7",[["^ ","^1N",0,"^1O",782,"^H","fulcro.client.data-fetch/load*"]],"^3?",[["^ ","^1N",84,"^1O",782,"^H","env"]],"^1W",[["^ ","^1N",4,"^1O",786,"^H","post-mutation"]],"^2:",[["^ ","^1N",4,"^1O",787,"^H","remote"]],"^2T",[["^ ","^1N",4,"^1O",785,"^H","config"]]],"~i399",["^ ","~i2",[["^ ","^1N",0,"^1O",788],["^ ","^1N",0,"^1O",795],["^ ","^1N",0,"^1O",804]],"~i8",[["^ ","^1N",20,"^1O",788],["^ ","^1N",37,"^1O",788,"^H","and__3938__auto__"],["^ ","^1N",0,"^1O",789],["^ ","^1N",0,"^1O",789],["^ ","^1N",20,"^1O",789,"^H","and__3938__auto__"],["^ ","^1N",0,"^1O",792,"^H","and__3938__auto__"]],"^1M",[["^ ","^1N",57,"^1O",788,"^H","post-mutation"]],"^1[",[["^ ","^1N",0,"^1O",790]],"^22",[["^ ","^1N",9,"^1O",790],["^ ","^1N",35,"^1O",790,"^H","cljs.core/Symbol"]],"^2R",[["^ ","^1N",10,"^1O",790,"^H","post-mutation"]],"^31",[["^ ","^1N",0,"^1O",795],["^ ","^1N",4,"^1O",795],["^ ","^1N",4,"^1O",795],["^ ","^1N",4,"^1O",795,"^H","fulcro.logging._log.cljs$core$IFn$_invoke$arity$variadic"],["^ ","^1N",61,"^1O",795],["^ ","^1N",104,"^1O",795],["^ ","^1N",158,"^1O",795],["^ ","^1N",185,"^1O",795],["^ ","^1N",237,"^1O",795],["^ ","^1N",249,"^1O",795],["^ ","^1N",354,"^1O",795],["^ ","^1N",16,"^1O",796],["^ ","^1N",19,"^1O",796],["^ ","^1N",20,"^1O",796,"^H","e46608"],["^ ","^1N",38,"^1O",796,"^H","js/Error"],["^ ","^1N",0,"^1O",797],["^ ","^1N",4,"^1O",797,"^H","e__31518__auto__"],["^ ","^1N",29,"^1O",797,"^H","e46608"],["^ ","^1N",0,"^1O",798],["^ ","^1N",0,"^1O",798],["^ ","^1N",0,"^1O",798,"^H","fulcro.logging._log.cljs$core$IFn$_invoke$arity$variadic"],["^ ","^1N",57,"^1O",798],["^ ","^1N",100,"^1O",798],["^ ","^1N",154,"^1O",798],["^ ","^1N",181,"^1O",798],["^ ","^1N",233,"^1O",798],["^ ","^1N",245,"^1O",798],["^ ","^1N",350,"^1O",798],["^ ","^1N",403,"^1O",798,"^H","e__31518__auto__"],["^ ","^1N",0,"^1O",800],["^ ","^1N",0,"^1O",800],["^ ","^1N",6,"^1O",800,"^H","e46608"]]],"~i400",["^ ","~i3",[["^ ","^1N",55,"^1O",806],["^ ","^1N",88,"^1O",806]],"~i7",[["^ ","^1N",73,"^1O",806,"^H","remote"]],"^3?",[["^ ","^1N",81,"^1O",806,"^H","remote"]]],"~i401",["^ ","^21",[["^ ","^1N",209,"^1O",806],["^ ","^1N",0,"^1O",808]],"^25",[["^ ","^1N",0,"^1O",808]],"^26",[["^ ","^1N",7,"^1O",808,"^H","fulcro.client.impl.data-fetch/mark-ready"]],"^2V",[["^ ","^1N",48,"^1O",808],["^ ","^1N",101,"^1O",808]],"^2S",[["^ ","^1N",48,"^1O",808,"^H","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3"]],"^37",[["^ ","^1N",94,"^1O",808,"^H","config"]],"^3A",[["^ ","^1N",153,"^1O",808,"^H","env"]]],"~i403",["^ ","~i0",[["^ ","^1N",0,"^1O",812],["^ ","^1N",0,"^1O",812,"^H","cljs.core/-add-method"],["^ ","^1N",22,"^1O",812,"^H","fulcro.client.mutations/mutate"],["^ ","^1N",53,"^1O",812],["^ ","^1N",122,"^1O",812],["^ ","^1N",0,"^1O",813]],"^22",[["^ ","^1N",133,"^1O",812,"^H","env"]],"^1Y",[["^ ","^1N",137,"^1O",812,"^H","_"]],"^26",[["^ ","^1N",139,"^1O",812,"^H","params"]],"^2A",[["^ ","^1N",0,"^1O",813]],"^2B",[["^ ","^1N",7,"^1O",813,"^H","fulcro.client.data-fetch/load*"]],"^2U",[["^ ","^1N",43,"^1O",813,"^H","env"]],"^3Q",[["^ ","^1N",47,"^1O",813,"^H","params"]]],"~i404",["^ ","~i0",[["^ ","^1N",0,"^1O",815],["^ ","^1N",0,"^1O",815,"^H","cljs.core/-add-method"],["^ ","^1N",22,"^1O",815,"^H","fulcro.client.mutations/mutate"],["^ ","^1N",53,"^1O",815],["^ ","^1N",158,"^1O",815],["^ ","^1N",0,"^1O",816]],"^2>",[["^ ","^1N",169,"^1O",815,"^H","env"]],"^20",[["^ ","^1N",173,"^1O",815,"^H","_"]],"^2?",[["^ ","^1N",175,"^1O",815,"^H","params"]],"^2D",[["^ ","^1N",0,"^1O",816]],"^2:",[["^ ","^1N",7,"^1O",816,"^H","fulcro.client.data-fetch/load*"]],"^2A",[["^ ","^1N",43,"^1O",816,"^H","env"]],"^28",[["^ ","^1N",47,"^1O",816,"^H","params"]]],"~i406",["^ ","~i0",[["^ ","^1N",0,"^1O",818],["^ ","^1N",0,"^1O",818,"^H","cljs.core/-add-method"],["^ ","^1N",22,"^1O",818,"^H","fulcro.client.mutations/mutate"],["^ ","^1N",53,"^1O",818],["^ ","^1N",196,"^1O",818],["^ ","^1N",207,"^1O",818,"^H","env46621"],["^ ","^1N",216,"^1O",818,"^H","_"],["^ ","^1N",218,"^1O",818,"^H","p__46622"],["^ ","^1N",0,"^1O",819],["^ ","^1N",0,"^1O",819],["^ ","^1N",4,"^1O",819,"^H","map__46623"],["^ ","^1N",17,"^1O",819,"^H","p__46622"],["^ ","^1N",4,"^1O",820,"^H","map__46623"],["^ ","^1N",21,"^1O",820],["^ ","^1N",23,"^1O",820],["^ ","^1N",25,"^1O",820],["^ ","^1N",27,"^1O",820],["^ ","^1N",28,"^1O",820,"^H","map__46623"],["^ ","^1N",42,"^1O",820],["^ ","^1N",50,"^1O",820],["^ ","^1N",52,"^1O",820],["^ ","^1N",54,"^1O",820],["^ ","^1N",55,"^1O",820],["^ ","^1N",55,"^1O",820,"^H","map__46623"],["^ ","^1N",104,"^1O",820],["^ ","^1N",115,"^1O",820],["^ ","^1N",116,"^1O",820,"^H","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1N",148,"^1O",820],["^ ","^1N",148,"^1O",820,"^H","map__46623"],["^ ","^1N",179,"^1O",820],["^ ","^1N",184,"^1O",820],["^ ","^1N",191,"^1O",820],["^ ","^1N",199,"^1O",820],["^ ","^1N",199,"^1O",820,"^H","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",245,"^1O",820,"^H","cljs.core/hash-map"],["^ ","^1N",264,"^1O",820,"^H","map__46623"],["^ ","^1N",276,"^1O",820,"^H","map__46623"],["^ ","^1N",9,"^1O",821],["^ ","^1N",9,"^1O",821,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",53,"^1O",821,"^H","map__46623"],["^ ","^1N",68,"^1O",821],["^ ","^1N",10,"^1O",822],["^ ","^1N",10,"^1O",822,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",54,"^1O",822,"^H","map__46623"],["^ ","^1N",69,"^1O",822],["^ ","^1N",17,"^1O",823],["^ ","^1N",17,"^1O",823,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",61,"^1O",823,"^H","map__46623"],["^ ","^1N",76,"^1O",823],["^ ","^1N",0,"^1O",824],["^ ","^1N",0,"^1O",824],["^ ","^1N",7,"^1O",824,"^H","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic"],["^ ","^1N",110,"^1O",824],["^ ","^1N",133,"^1O",824,"^H","env46621"],["^ ","^1N",0,"^1O",825],["^ ","^1N",0,"^1O",825],["^ ","^1N",50,"^1O",825],["^ ","^1N",107,"^1O",825],["^ ","^1N",0,"^1O",827],["^ ","^1N",5,"^1O",835],["^ ","^1N",22,"^1O",835,"^H","env"],["^ ","^1N",28,"^1O",835,"^H","env46621"],["^ ","^1N",0,"^1O",836],["^ ","^1N",0,"^1O",836],["^ ","^1N",50,"^1O",836],["^ ","^1N",108,"^1O",836],["^ ","^1N",108,"^1O",836]],"^2B",[["^ ","^1N",4,"^1O",821,"^H","tx"]],"^28",[["^ ","^1N",4,"^1O",822,"^H","ref"]],"^2V",[["^ ","^1N",4,"^1O",823,"^H","reconciler"]]],"~i407",["^ ","^1R",[["^ ","^1N",127,"^1O",824,"^H","env"]]],"~i408",["^ ","~i4",[["^ ","^1N",0,"^1O",827],["^ ","^1N",0,"^1O",828]],"^3>",[["^ ","^1N",4,"^1O",827,"^H","reconciler"]],"^1T",[["^ ","^1N",21,"^1O",827],["^ ","^1N",21,"^1O",827],["^ ","^1N",117,"^1O",827]],"^2>",[["^ ","^1N",132,"^1O",827,"^H","reconciler"]],"^1Y",[["^ ","^1N",117,"^1O",827,"^H","cljs.core/meta"]]],"~i410",["^ ","^1P",[["^ ","^1N",0,"^1O",828],["^ ","^1N",1,"^1O",832]],"^3[",[["^ ","^1N",7,"^1O",828,"^H","js/setTimeout"]],"^21",[["^ ","^1N",18,"^1O",828],["^ ","^1N",0,"^1O",830]],"^25",[["^ ","^1N",0,"^1O",830]],"^26",[["^ ","^1N",7,"^1O",830,"^H","fulcro.client.primitives.transact_BANG_.cljs$core$IFn$_invoke$arity$3"]],"^2U",[["^ ","^1N",77,"^1O",830,"^H","reconciler"]],"^2J",[["^ ","^1N",92,"^1O",830,"^H","ref"]],"^2X",[["^ ","^1N",96,"^1O",830,"^H","tx"]]],"~i412",["^ ","~i0",[["^ ","^1N",0,"^1O",839],["^ ","^1N",0,"^1O",839,"^H","cljs.core/-add-method"],["^ ","^1N",22,"^1O",839,"^H","fulcro.client.mutations/mutate"],["^ ","^1N",53,"^1O",839],["^ ","^1N",188,"^1O",839],["^ ","^1N",199,"^1O",839,"^H","env46634"],["^ ","^1N",208,"^1O",839,"^H","_"],["^ ","^1N",210,"^1O",839,"^H","p__46636"],["^ ","^1N",0,"^1O",840],["^ ","^1N",0,"^1O",840],["^ ","^1N",4,"^1O",840,"^H","map__46637"],["^ ","^1N",17,"^1O",840,"^H","p__46636"],["^ ","^1N",4,"^1O",841,"^H","map__46637"],["^ ","^1N",21,"^1O",841],["^ ","^1N",23,"^1O",841],["^ ","^1N",25,"^1O",841],["^ ","^1N",27,"^1O",841],["^ ","^1N",28,"^1O",841,"^H","map__46637"],["^ ","^1N",42,"^1O",841],["^ ","^1N",50,"^1O",841],["^ ","^1N",52,"^1O",841],["^ ","^1N",54,"^1O",841],["^ ","^1N",55,"^1O",841],["^ ","^1N",55,"^1O",841,"^H","map__46637"],["^ ","^1N",104,"^1O",841],["^ ","^1N",115,"^1O",841],["^ ","^1N",116,"^1O",841,"^H","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1N",148,"^1O",841],["^ ","^1N",148,"^1O",841,"^H","map__46637"],["^ ","^1N",179,"^1O",841],["^ ","^1N",184,"^1O",841],["^ ","^1N",191,"^1O",841],["^ ","^1N",199,"^1O",841],["^ ","^1N",199,"^1O",841,"^H","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",245,"^1O",841,"^H","cljs.core/hash-map"],["^ ","^1N",264,"^1O",841,"^H","map__46637"],["^ ","^1N",276,"^1O",841,"^H","map__46637"],["^ ","^1N",9,"^1O",842],["^ ","^1N",9,"^1O",842,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",53,"^1O",842,"^H","map__46637"],["^ ","^1N",68,"^1O",842],["^ ","^1N",13,"^1O",843],["^ ","^1N",13,"^1O",843,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",57,"^1O",843,"^H","map__46637"],["^ ","^1N",72,"^1O",843],["^ ","^1N",10,"^1O",844],["^ ","^1N",10,"^1O",844,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",54,"^1O",844,"^H","map__46637"],["^ ","^1N",69,"^1O",844],["^ ","^1N",0,"^1O",845],["^ ","^1N",0,"^1O",845],["^ ","^1N",7,"^1O",845,"^H","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic"],["^ ","^1N",110,"^1O",845],["^ ","^1N",133,"^1O",845,"^H","env46634"],["^ ","^1N",0,"^1O",846],["^ ","^1N",0,"^1O",846],["^ ","^1N",50,"^1O",846],["^ ","^1N",107,"^1O",846],["^ ","^1N",0,"^1O",848],["^ ","^1N",5,"^1O",869],["^ ","^1N",28,"^1O",869,"^H","env46634"],["^ ","^1N",0,"^1O",870],["^ ","^1N",0,"^1O",870],["^ ","^1N",50,"^1O",870],["^ ","^1N",108,"^1O",870]],"^2;",[["^ ","^1N",4,"^1O",842,"^H","tx"]],"^2A",[["^ ","^1N",4,"^1O",843,"^H","remote"]],"^2U",[["^ ","^1N",4,"^1O",844,"^H","ref"]]],"~i413",["^ ","^1R",[["^ ","^1N",127,"^1O",845,"^H","env"]]],"~i414",["^ ","~i4",[["^ ","^1N",0,"^1O",848],["^ ","^1N",4,"^1O",848,"^H","map__46639"],["^ ","^1N",4,"^1O",849,"^H","map__46639"],["^ ","^1N",21,"^1O",849],["^ ","^1N",23,"^1O",849],["^ ","^1N",25,"^1O",849],["^ ","^1N",27,"^1O",849],["^ ","^1N",28,"^1O",849,"^H","map__46639"],["^ ","^1N",42,"^1O",849],["^ ","^1N",50,"^1O",849],["^ ","^1N",52,"^1O",849],["^ ","^1N",54,"^1O",849],["^ ","^1N",55,"^1O",849],["^ ","^1N",55,"^1O",849,"^H","map__46639"],["^ ","^1N",104,"^1O",849],["^ ","^1N",115,"^1O",849],["^ ","^1N",116,"^1O",849,"^H","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1N",148,"^1O",849],["^ ","^1N",148,"^1O",849,"^H","map__46639"],["^ ","^1N",179,"^1O",849],["^ ","^1N",184,"^1O",849],["^ ","^1N",191,"^1O",849],["^ ","^1N",199,"^1O",849],["^ ","^1N",199,"^1O",849,"^H","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",245,"^1O",849,"^H","cljs.core/hash-map"],["^ ","^1N",264,"^1O",849,"^H","map__46639"],["^ ","^1N",276,"^1O",849,"^H","map__46639"],["^ ","^1N",14,"^1O",850,"^H","map__46639"],["^ ","^1N",17,"^1O",851],["^ ","^1N",17,"^1O",851,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",61,"^1O",851,"^H","map__46639"],["^ ","^1N",76,"^1O",851],["^ ","^1N",16,"^1O",852],["^ ","^1N",16,"^1O",852,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",60,"^1O",852,"^H","map__46639"],["^ ","^1N",75,"^1O",852],["^ ","^1N",0,"^1O",855]],"^1Z",[["^ ","^1N",4,"^1O",851,"^H","reconciler"]],"^20",[["^ ","^1N",4,"^1O",852,"^H","component"]],"^2=",[["^ ","^1N",4,"^1O",850,"^H","env"]],"^2F",[["^ ","^1N",17,"^1O",848,"^H","env"]]],"~i415",["^ ","^3>",[["^ ","^1N",4,"^1O",853,"^H","reconciler"]],"^1T",[["^ ","^1N",21,"^1O",853],["^ ","^1N",62,"^1O",853],["^ ","^1N",142,"^1O",853],["^ ","^1N",142,"^1O",853]]],"~i416",["^ ","^1V",[["^ ","^1N",39,"^1O",853,"^H","reconciler"]],"^2G",[["^ ","^1N",51,"^1O",853,"^H","reconciler"]]],"~i417",["^ ","^1V",[["^ ","^1N",80,"^1O",853,"^H","component"]],"^23",[["^ ","^1N",91,"^1O",853]],"^2G",[["^ ","^1N",91,"^1O",853,"^H","fulcro.client.primitives/get-reconciler"]],"^2V",[["^ ","^1N",131,"^1O",853,"^H","component"]]],"~i419",["^ ","~i6",[["^ ","^1N",0,"^1O",855]],"^3>",[["^ ","^1N",20,"^1O",855,"^H","reconciler"]]],"~i420",["^ ","~i8",[["^ ","^1N",0,"^1O",856],["^ ","^1N",82,"^1O",856],["^ ","^1N",224,"^1O",856],["^ ","^1N",229,"^1O",856],["^ ","^1N",272,"^1O",856],["^ ","^1N",344,"^1O",856],["^ ","^1N",487,"^1O",856],["^ ","^1N",552,"^1O",856],["^ ","^1N",608,"^1O",856],["^ ","^1N",614,"^1O",856],["^ ","^1N",699,"^1O",856],["^ ","^1N",742,"^1O",856],["^ ","^1N",793,"^1O",856],["^ ","^1N",848,"^1O",856]],"~i9",[["^ ","^1N",7,"^1O",856,"^H","fulcro.client.data_fetch.load_action.cljs$core$IFn$_invoke$arity$4"]],"^1T",[["^ ","^1N",74,"^1O",856,"^H","env"]]],"~i421",["^ ","^3G",[["^ ","^1N",545,"^1O",856,"^H","remote"]]],"~i423",["^ ","^39",[["^ ","^1N",790,"^1O",856,"^H","tx"]]],"~i424",["^ ","^39",[["^ ","^1N",844,"^1O",856,"^H","ref"]]],"~i425",["^ ","^39",[["^ ","^1N",914,"^1O",856],["^ ","^1N",934,"^1O",856],["^ ","^1N",969,"^1O",856],["^ ","^1N",1012,"^1O",856]],"^3F",[["^ ","^1N",914,"^1O",856,"^H","cljs.core/with-meta"]],"~i120",[["^ ","^1N",1078,"^1O",856,"^H","reconciler"]]],"~i426",["^ ","~i8",[["^ ","^1N",0,"^1O",858],["^ ","^1N",4,"^1O",858],["^ ","^1N",4,"^1O",858],["^ ","^1N",11,"^1O",858,"^H","fulcro.logging._log.cljs$core$IFn$_invoke$arity$variadic"],["^ ","^1N",68,"^1O",858],["^ ","^1N",111,"^1O",858],["^ ","^1N",165,"^1O",858],["^ ","^1N",192,"^1O",858],["^ ","^1N",244,"^1O",858],["^ ","^1N",256,"^1O",858],["^ ","^1N",361,"^1O",858],["^ ","^1N",16,"^1O",859],["^ ","^1N",19,"^1O",859],["^ ","^1N",20,"^1O",859,"^H","e46641"],["^ ","^1N",38,"^1O",859,"^H","js/Error"],["^ ","^1N",0,"^1O",860],["^ ","^1N",4,"^1O",860,"^H","e__31518__auto__"],["^ ","^1N",23,"^1O",860,"^H","e46641"],["^ ","^1N",0,"^1O",861],["^ ","^1N",0,"^1O",861],["^ ","^1N",7,"^1O",861,"^H","fulcro.logging._log.cljs$core$IFn$_invoke$arity$variadic"],["^ ","^1N",64,"^1O",861],["^ ","^1N",107,"^1O",861],["^ ","^1N",161,"^1O",861],["^ ","^1N",188,"^1O",861],["^ ","^1N",240,"^1O",861],["^ ","^1N",252,"^1O",861],["^ ","^1N",357,"^1O",861],["^ ","^1N",410,"^1O",861,"^H","e__31518__auto__"],["^ ","^1N",0,"^1O",863],["^ ","^1N",0,"^1O",863],["^ ","^1N",6,"^1O",863,"^H","e46641"]],"^3J",[["^ ","^1N",425,"^1O",858,"^H","tx"]]],"~i427",["^ ","^1R",[["^ ","^1N",22,"^1O",869,"^H","env"]],"^3[",[["^ ","^1N",108,"^1O",870]],"^1Q",[["^ ","^1N",108,"^1O",870,"^H","fulcro.client.data-fetch/remote-load"]],"^20",[["^ ","^1N",145,"^1O",870,"^H","env"]]],"~i429",["^ ","~i0",[["^ ","^1N",0,"^1O",873],["^ ","^1N",49,"^1O",873],["^ ","^1N",110,"^1O",873,"^H","p__46644"],["^ ","^1N",0,"^1O",874],["^ ","^1N",0,"^1O",874],["^ ","^1N",4,"^1O",874,"^H","map__46645"],["^ ","^1N",17,"^1O",874,"^H","p__46644"],["^ ","^1N",4,"^1O",875,"^H","map__46645"],["^ ","^1N",21,"^1O",875],["^ ","^1N",23,"^1O",875],["^ ","^1N",25,"^1O",875],["^ ","^1N",27,"^1O",875],["^ ","^1N",28,"^1O",875,"^H","map__46645"],["^ ","^1N",42,"^1O",875],["^ ","^1N",50,"^1O",875],["^ ","^1N",52,"^1O",875],["^ ","^1N",54,"^1O",875],["^ ","^1N",55,"^1O",875],["^ ","^1N",55,"^1O",875,"^H","map__46645"],["^ ","^1N",104,"^1O",875],["^ ","^1N",115,"^1O",875],["^ ","^1N",116,"^1O",875,"^H","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1N",148,"^1O",875],["^ ","^1N",148,"^1O",875,"^H","map__46645"],["^ ","^1N",179,"^1O",875],["^ ","^1N",184,"^1O",875],["^ ","^1N",191,"^1O",875],["^ ","^1N",199,"^1O",875],["^ ","^1N",199,"^1O",875,"^H","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",245,"^1O",875,"^H","cljs.core/hash-map"],["^ ","^1N",264,"^1O",875,"^H","map__46645"],["^ ","^1N",276,"^1O",875,"^H","map__46645"],["^ ","^1N",13,"^1O",876,"^H","map__46645"],["^ ","^1N",13,"^1O",877],["^ ","^1N",13,"^1O",877,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",57,"^1O",877,"^H","map__46645"],["^ ","^1N",72,"^1O",877],["^ ","^1N",0,"^1O",878]],"~i7",[["^ ","^1N",0,"^1O",873,"^H","fulcro.client.data-fetch/fallback-action*"]]],"~i430",["^ ","~i3",[["^ ","^1N",106,"^1O",873,"^H","env"]],"^1P",[["^ ","^1N",4,"^1O",877,"^H","action"]],"^1[",[["^ ","^1N",4,"^1O",876,"^H","params"]]],"~i431",["^ ","~i2",[["^ ","^1N",0,"^1O",878],["^ ","^1N",4,"^1O",878,"^H","G__46647"],["^ ","^1N",4,"^1O",883,"^H","G__46647"],["^ ","^1N",19,"^1O",883],["^ ","^1N",21,"^1O",883],["^ ","^1N",22,"^1O",883,"^H","G__46647"],["^ ","^1N",34,"^1O",883],["^ ","^1N",41,"^1O",883],["^ ","^1N",46,"^1O",883],["^ ","^1N",46,"^1O",883],["^ ","^1N",133,"^1O",883,"^H","G__46647"],["^ ","^1N",0,"^1O",884],["^ ","^1N",0,"^1O",884],["^ ","^1N",3,"^1O",884],["^ ","^1N",4,"^1O",884,"^H","G__46647"],["^ ","^1N",20,"^1O",884],["^ ","^1N",0,"^1O",885]],"^3>",[["^ ","^1N",15,"^1O",878],["^ ","^1N",32,"^1O",878,"^H","G__46648"],["^ ","^1N",4,"^1O",879,"^H","G__46649"],["^ ","^1N",4,"^1O",880,"^H","G__46650"],["^ ","^1N",0,"^1O",881],["^ ","^1N",0,"^1O",881],["^ ","^1N",132,"^1O",881,"^H","G__46648"],["^ ","^1N",141,"^1O",881,"^H","G__46649"],["^ ","^1N",150,"^1O",881,"^H","G__46650"],["^ ","^1N",203,"^1O",881,"^H","G__46648"],["^ ","^1N",212,"^1O",881,"^H","G__46649"],["^ ","^1N",221,"^1O",881,"^H","G__46650"]],"^1R",[["^ ","^1N",8,"^1O",881,"^H","fulcro.client.mutations/mutate"],["^ ","^1N",71,"^1O",881,"^H","fulcro.client.mutations/mutate"],["^ ","^1N",162,"^1O",881,"^H","fulcro.client.mutations/mutate"]],"^1Z",[["^ ","^1N",43,"^1O",878,"^H","env"]],"^3E",[["^ ","^1N",15,"^1O",879,"^H","action"]],"^20",[["^ ","^1N",15,"^1O",880],["^ ","^1N",76,"^1O",880],["^ ","^1N",183,"^1O",880]],"^21",[["^ ","^1N",15,"^1O",880,"^H","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic"]],"^25",[["^ ","^1N",69,"^1O",880,"^H","params"]],"^2L",[["^ ","^1N",0,"^1O",887],["^ ","^1N",53,"^1O",887,"^H","G__46647"],["^ ","^1N",66,"^1O",887]],"^2M",[["^ ","^1N",7,"^1O",887,"^H","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"]]],"~i436",["^ ","~i0",[["^ ","^1N",0,"^1O",890],["^ ","^1N",0,"^1O",890,"^H","cljs.core/-add-method"],["^ ","^1N",22,"^1O",890,"^H","fulcro.client.mutations/mutate"],["^ ","^1N",53,"^1O",890],["^ ","^1N",122,"^1O",890],["^ ","^1N",133,"^1O",890,"^H","p__46651"],["^ ","^1N",144,"^1O",890,"^H","p__46652"],["^ ","^1N",0,"^1O",891],["^ ","^1N",0,"^1O",891],["^ ","^1N",4,"^1O",891,"^H","map__46653"],["^ ","^1N",17,"^1O",891,"^H","p__46651"],["^ ","^1N",4,"^1O",892,"^H","map__46653"],["^ ","^1N",21,"^1O",892],["^ ","^1N",23,"^1O",892],["^ ","^1N",25,"^1O",892],["^ ","^1N",27,"^1O",892],["^ ","^1N",28,"^1O",892,"^H","map__46653"],["^ ","^1N",42,"^1O",892],["^ ","^1N",50,"^1O",892],["^ ","^1N",52,"^1O",892],["^ ","^1N",54,"^1O",892],["^ ","^1N",55,"^1O",892],["^ ","^1N",55,"^1O",892,"^H","map__46653"],["^ ","^1N",104,"^1O",892],["^ ","^1N",115,"^1O",892],["^ ","^1N",116,"^1O",892,"^H","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1N",148,"^1O",892],["^ ","^1N",148,"^1O",892,"^H","map__46653"],["^ ","^1N",179,"^1O",892],["^ ","^1N",184,"^1O",892],["^ ","^1N",191,"^1O",892],["^ ","^1N",199,"^1O",892],["^ ","^1N",199,"^1O",892,"^H","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",245,"^1O",892,"^H","cljs.core/hash-map"],["^ ","^1N",264,"^1O",892,"^H","map__46653"],["^ ","^1N",276,"^1O",892,"^H","map__46653"],["^ ","^1N",10,"^1O",893,"^H","map__46653"],["^ ","^1N",13,"^1O",894],["^ ","^1N",13,"^1O",894,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",57,"^1O",894,"^H","map__46653"],["^ ","^1N",72,"^1O",894],["^ ","^1N",10,"^1O",895],["^ ","^1N",10,"^1O",895,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",54,"^1O",895,"^H","map__46653"],["^ ","^1N",69,"^1O",895],["^ ","^1N",10,"^1O",896],["^ ","^1N",10,"^1O",896,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",54,"^1O",896,"^H","map__46653"],["^ ","^1N",69,"^1O",896],["^ ","^1N",4,"^1O",897,"^H","map__46654"],["^ ","^1N",17,"^1O",897,"^H","p__46652"],["^ ","^1N",4,"^1O",898,"^H","map__46654"],["^ ","^1N",21,"^1O",898],["^ ","^1N",23,"^1O",898],["^ ","^1N",25,"^1O",898],["^ ","^1N",27,"^1O",898],["^ ","^1N",28,"^1O",898,"^H","map__46654"],["^ ","^1N",42,"^1O",898],["^ ","^1N",50,"^1O",898],["^ ","^1N",52,"^1O",898],["^ ","^1N",54,"^1O",898],["^ ","^1N",55,"^1O",898],["^ ","^1N",55,"^1O",898,"^H","map__46654"],["^ ","^1N",104,"^1O",898],["^ ","^1N",115,"^1O",898],["^ ","^1N",116,"^1O",898,"^H","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1N",148,"^1O",898],["^ ","^1N",148,"^1O",898,"^H","map__46654"],["^ ","^1N",179,"^1O",898],["^ ","^1N",184,"^1O",898],["^ ","^1N",191,"^1O",898],["^ ","^1N",199,"^1O",898],["^ ","^1N",199,"^1O",898,"^H","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",245,"^1O",898,"^H","cljs.core/hash-map"],["^ ","^1N",264,"^1O",898,"^H","map__46654"],["^ ","^1N",276,"^1O",898,"^H","map__46654"],["^ ","^1N",13,"^1O",899,"^H","map__46654"],["^ ","^1N",14,"^1O",900],["^ ","^1N",14,"^1O",900,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",58,"^1O",900,"^H","map__46654"],["^ ","^1N",73,"^1O",900],["^ ","^1N",13,"^1O",901],["^ ","^1N",13,"^1O",901,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",57,"^1O",901,"^H","map__46654"],["^ ","^1N",72,"^1O",901],["^ ","^1N",0,"^1O",902]],"^2:",[["^ ","^1N",4,"^1O",894,"^H","target"]],"^2B",[["^ ","^1N",4,"^1O",895,"^H","ast"]],"^2Q",[["^ ","^1N",4,"^1O",896,"^H","ref"]],"^32",[["^ ","^1N",4,"^1O",893,"^H","env"]],"^3<",[["^ ","^1N",142,"^1O",890,"^H","_"]],"^3C",[["^ ","^1N",4,"^1O",900,"^H","execute"]],"^3J",[["^ ","^1N",4,"^1O",901,"^H","action"]],"^3O",[["^ ","^1N",4,"^1O",899,"^H","params"]]],"~i437",["^ ","~i2",[["^ ","^1N",0,"^1O",902],["^ ","^1N",0,"^1O",903],["^ ","^1N",50,"^1O",903],["^ ","^1N",107,"^1O",903],["^ ","^1N",0,"^1O",905],["^ ","^1N",0,"^1O",909],["^ ","^1N",0,"^1O",910],["^ ","^1N",0,"^1O",912],["^ ","^1N",0,"^1O",912]]],"~i438",["^ ","~i4",[["^ ","^1N",20,"^1O",902,"^H","execute"]],"^3E",[["^ ","^1N",0,"^1O",905]],"^1V",[["^ ","^1N",7,"^1O",905,"^H","fulcro.client.data-fetch/fallback-action*"]],"^2:",[["^ ","^1N",54,"^1O",905,"^H","env"]],"^2=",[["^ ","^1N",58,"^1O",905,"^H","params"]]],"~i439",["^ ","~i4",[["^ ","^1N",20,"^1O",909,"^H","target"]],"^1S",[["^ ","^1N",55,"^1O",910,"^H","target"]],"^1U",[["^ ","^1N",62,"^1O",910],["^ ","^1N",312,"^1O",910]],"^1V",[["^ ","^1N",80,"^1O",910,"^H","ref"]]],"~i440",["^ ","^1T",[["^ ","^1N",85,"^1O",910],["^ ","^1N",136,"^1O",910],["^ ","^1N",208,"^1O",910]],"^3E",[["^ ","^1N",85,"^1O",910,"^H","cljs.core.update.cljs$core$IFn$_invoke$arity$5"]],"^20",[["^ ","^1N",132,"^1O",910,"^H","ast"]],"^2R",[["^ ","^1N",192,"^1O",910,"^H","cljs.core/assoc"]],"^31",[["^ ","^1N",307,"^1O",910,"^H","ref"]]],"~i444",["^ ","~i0",[["^ ","^1N",0,"^1O",917],["^ ","^1N",0,"^1O",917,"^H","cljs.core/-add-method"],["^ ","^1N",22,"^1O",917,"^H","fulcro.client.mutations/mutate"],["^ ","^1N",53,"^1O",917],["^ ","^1N",165,"^1O",917],["^ ","^1N",0,"^1O",918]],"^20",[["^ ","^1N",176,"^1O",917,"^H","env"]],"^23",[["^ ","^1N",180,"^1O",917,"^H","_"]],"^24",[["^ ","^1N",182,"^1O",917,"^H","params"]],"^2;",[["^ ","^1N",0,"^1O",918],["^ ","^1N",4,"^1O",918,"^H","G__46657"],["^ ","^1N",4,"^1O",919,"^H","G__46658"],["^ ","^1N",15,"^1O",919],["^ ","^1N",4,"^1O",920,"^H","G__46659"],["^ ","^1N",0,"^1O",921],["^ ","^1N",0,"^1O",921],["^ ","^1N",132,"^1O",921,"^H","G__46657"],["^ ","^1N",141,"^1O",921,"^H","G__46658"],["^ ","^1N",150,"^1O",921,"^H","G__46659"],["^ ","^1N",203,"^1O",921,"^H","G__46657"],["^ ","^1N",212,"^1O",921,"^H","G__46658"],["^ ","^1N",221,"^1O",921,"^H","G__46659"]],"^2=",[["^ ","^1N",8,"^1O",921,"^H","fulcro.client.mutations/mutate"],["^ ","^1N",71,"^1O",921,"^H","fulcro.client.mutations/mutate"],["^ ","^1N",162,"^1O",921,"^H","fulcro.client.mutations/mutate"]],"^2Q",[["^ ","^1N",15,"^1O",918,"^H","env"]],"^2X",[["^ ","^1N",15,"^1O",920,"^H","params"]]],"~i446",["^ ","~i0",[["^ ","^1N",0,"^1O",923],["^ ","^1N",36,"^1O",927],["^ ","^1N",80,"^1O",927,"^H","p__46660"],["^ ","^1N",0,"^1O",928],["^ ","^1N",0,"^1O",928],["^ ","^1N",4,"^1O",928,"^H","map__46661"],["^ ","^1N",17,"^1O",928,"^H","p__46660"],["^ ","^1N",4,"^1O",929,"^H","map__46661"],["^ ","^1N",21,"^1O",929],["^ ","^1N",23,"^1O",929],["^ ","^1N",25,"^1O",929],["^ ","^1N",27,"^1O",929],["^ ","^1N",28,"^1O",929,"^H","map__46661"],["^ ","^1N",42,"^1O",929],["^ ","^1N",50,"^1O",929],["^ ","^1N",52,"^1O",929],["^ ","^1N",54,"^1O",929],["^ ","^1N",55,"^1O",929],["^ ","^1N",55,"^1O",929,"^H","map__46661"],["^ ","^1N",104,"^1O",929],["^ ","^1N",115,"^1O",929],["^ ","^1N",116,"^1O",929,"^H","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1N",148,"^1O",929],["^ ","^1N",148,"^1O",929,"^H","map__46661"],["^ ","^1N",179,"^1O",929],["^ ","^1N",184,"^1O",929],["^ ","^1N",191,"^1O",929],["^ ","^1N",199,"^1O",929],["^ ","^1N",199,"^1O",929,"^H","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",245,"^1O",929,"^H","cljs.core/hash-map"],["^ ","^1N",264,"^1O",929,"^H","map__46661"],["^ ","^1N",276,"^1O",929,"^H","map__46661"],["^ ","^1N",13,"^1O",930],["^ ","^1N",13,"^1O",930,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1N",57,"^1O",930,"^H","map__46661"],["^ ","^1N",72,"^1O",930],["^ ","^1N",0,"^1O",931],["^ ","^1N",0,"^1O",931]],"~i6",[["^ ","^1N",0,"^1O",927,"^H","fulcro.client.data-fetch/fallback"]]],"~i449",["^ ","^1R",[["^ ","^1N",4,"^1O",930,"^H","action"]]],"~i454",["^ ","~i0",[["^ ","^1N",0,"^1O",933],["^ ","^1N",0,"^1O",933],["^ ","^1N",39,"^1O",940],["^ ","^1N",86,"^1O",940,"^H","var_args"],["^ ","^1N",0,"^1O",941],["^ ","^1N",0,"^1O",941],["^ ","^1N",4,"^1O",941,"^H","G__46665"],["^ ","^1N",15,"^1O",941],["^ ","^1N",15,"^1O",941],["^ ","^1N",0,"^1O",942],["^ ","^1N",0,"^1O",942],["^ ","^1N",8,"^1O",942,"^H","G__46665"],["^ ","^1N",5,"^1O",943],["^ ","^1N",0,"^1O",944],["^ ","^1N",7,"^1O",944,"^H","fulcro.client.data-fetch/get-remotes"],["^ ","^1N",74,"^1O",944],["^ ","^1N",75,"^1O",944],["^ ","^1N",85,"^1O",944],["^ ","^1N",91,"^1O",944],["^ ","^1N",92,"^1O",944],["^ ","^1N",102,"^1O",944],["^ ","^1N",5,"^1O",947],["^ ","^1N",0,"^1O",948],["^ ","^1N",7,"^1O",948,"^H","fulcro.client.data-fetch/get-remotes"],["^ ","^1N",74,"^1O",948],["^ ","^1N",75,"^1O",948],["^ ","^1N",85,"^1O",948],["^ ","^1N",91,"^1O",948],["^ ","^1N",92,"^1O",948],["^ ","^1N",102,"^1O",948],["^ ","^1N",108,"^1O",948],["^ ","^1N",109,"^1O",948],["^ ","^1N",119,"^1O",948],["^ ","^1N",0,"^1O",952],["^ ","^1N",6,"^1O",952],["^ ","^1N",11,"^1O",952,"^H","js/Error"],["^ ","^1N",17,"^1O",952],["^ ","^1N",18,"^1O",952],["^ ","^1N",80,"^1O",952],["^ ","^1N",80,"^1O",952],["^ ","^1N",0,"^1O",957],["^ ","^1N",0,"^1O",957],["^ ","^1N",69,"^1O",957],["^ ","^1N",0,"^1O",958],["^ ","^1N",0,"^1O",961],["^ ","^1N",0,"^1O",961],["^ ","^1N",69,"^1O",961],["^ ","^1N",0,"^1O",962],["^ ","^1N",0,"^1O",992],["^ ","^1N",0,"^1O",992],["^ ","^1N",63,"^1O",992],["^ ","^1N",0,"^1O",994]],"~i6",[["^ ","^1N",0,"^1O",940,"^H","fulcro.client.data-fetch/get-remotes"],["^ ","^1N",0,"^1O",957,"^H","fulcro.client.data-fetch/get-remotes"],["^ ","^1N",0,"^1O",961,"^H","fulcro.client.data-fetch/get-remotes"],["^ ","^1N",0,"^1O",992,"^H","fulcro.client.data-fetch/get-remotes"]]],"~i460",["^ ","~i4",[["^ ","^1N",80,"^1O",957,"^H","state-map"]],"^3?",[["^ ","^1N",90,"^1O",957,"^H","dispatch-symbol"]],"^2?",[["^ ","^1N",0,"^1O",958],["^ ","^1N",100,"^1O",958],["^ ","^1N",181,"^1O",958]],"^22",[["^ ","^1N",7,"^1O",958,"^H","fulcro.client.data_fetch.get_remotes.cljs$core$IFn$_invoke$arity$3"]],"^2=",[["^ ","^1N",74,"^1O",958,"^H","state-map"]],"^2V",[["^ ","^1N",84,"^1O",958,"^H","dispatch-symbol"]]],"~i461",["^ ","~i4",[["^ ","^1N",80,"^1O",961,"^H","state-map"]],"^3?",[["^ ","^1N",90,"^1O",961,"^H","dispatch-symbol"]],"^21",[["^ ","^1N",106,"^1O",961,"^H","legal-remotes"]]],"~i462",["^ ","~i3",[["^ ","^1N",0,"^1O",962],["^ ","^1N",19,"^1O",962],["^ ","^1N",0,"^1O",963],["^ ","^1N",0,"^1O",968]],"^1W",[["^ ","^1N",67,"^1O",962,"^H","remote"]]],"~i463",["^ ","^1M",[["^ ","^1N",0,"^1O",963],["^ ","^1N",4,"^1O",963,"^H","G__46669"],["^ ","^1N",15,"^1O",963],["^ ","^1N",58,"^1O",963],["^ ","^1N",489,"^1O",963],["^ ","^1N",574,"^1O",963],["^ ","^1N",637,"^1O",963],["^ ","^1N",4,"^1O",964,"^H","G__46670"],["^ ","^1N",4,"^1O",965,"^H","G__46671"],["^ ","^1N",15,"^1O",965],["^ ","^1N",0,"^1O",966],["^ ","^1N",0,"^1O",966],["^ ","^1N",132,"^1O",966,"^H","G__46669"],["^ ","^1N",141,"^1O",966,"^H","G__46670"],["^ ","^1N",150,"^1O",966,"^H","G__46671"],["^ ","^1N",203,"^1O",966,"^H","G__46669"],["^ ","^1N",212,"^1O",966,"^H","G__46670"],["^ ","^1N",221,"^1O",966,"^H","G__46671"]],"^3?",[["^ ","^1N",8,"^1O",966,"^H","fulcro.client.mutations/mutate"],["^ ","^1N",71,"^1O",966,"^H","fulcro.client.mutations/mutate"],["^ ","^1N",162,"^1O",966,"^H","fulcro.client.mutations/mutate"]],"^21",[["^ ","^1N",109,"^1O",963],["^ ","^1N",149,"^1O",963],["^ ","^1N",149,"^1O",963,"^H","cljs.core/vec"],["^ ","^1N",163,"^1O",963],["^ ","^1N",163,"^1O",963,"^H","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1"],["^ ","^1N",212,"^1O",963],["^ ","^1N",212,"^1O",963,"^H","cljs.core/seq"],["^ ","^1N",226,"^1O",963],["^ ","^1N",226,"^1O",963,"^H","cljs.core.concat.cljs$core$IFn$_invoke$arity$1"],["^ ","^1N",273,"^1O",963],["^ ","^1N",278,"^1O",963,"^H","cljs.core/List"],["^ ","^1N",293,"^1O",963],["^ ","^1N",298,"^1O",963],["^ ","^1N",298,"^1O",963,"^H","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1"],["^ ","^1N",347,"^1O",963],["^ ","^1N",347,"^1O",963,"^H","cljs.core/seq"],["^ ","^1N",361,"^1O",963],["^ ","^1N",361,"^1O",963,"^H","cljs.core.concat.cljs$core$IFn$_invoke$arity$1"],["^ ","^1N",408,"^1O",963],["^ ","^1N",413,"^1O",963,"^H","cljs.core/List"],["^ ","^1N",428,"^1O",963],["^ ","^1N",449,"^1O",963],["^ ","^1N",454,"^1O",963],["^ ","^1N",458,"^1O",963],["^ ","^1N",468,"^1O",963],["^ ","^1N",473,"^1O",963],["^ ","^1N",477,"^1O",963]],"^2?",[["^ ","^1N",109,"^1O",963,"^H","fulcro.client.primitives/query->ast1"]],"^2T",[["^ ","^1N",433,"^1O",963,"^H","dispatch-symbol"]]],"~i464",["^ ","^21",[["^ ","^1N",547,"^1O",963],["^ ","^1N",568,"^1O",963]],"^2?",[["^ ","^1N",547,"^1O",963,"^H","cljs.core/constantly"]]],"~i465",["^ ","^21",[["^ ","^1N",630,"^1O",963,"^H","remote"]]],"~i466",["^ ","^21",[["^ ","^1N",693,"^1O",963]],"^2?",[["^ ","^1N",693,"^1O",963,"^H","cljs.core.atom.cljs$core$IFn$_invoke$arity$1"]],"^1Y",[["^ ","^1N",738,"^1O",963,"^H","state-map"]],"^2E",[["^ ","^1N",15,"^1O",964,"^H","dispatch-symbol"]]],"~i467",["^ ","~i5",[["^ ","^1N",0,"^1O",968],["^ ","^1N",4,"^1O",989]],"~i6",[["^ ","^1N",7,"^1O",968,"^H","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^1M",[["^ ","^1N",54,"^1O",968],["^ ","^1N",0,"^1O",969]],"^1Z",[["^ ","^1N",65,"^1O",968,"^H","remotes"]],"^1W",[["^ ","^1N",73,"^1O",968,"^H","r"]]],"~i468",["^ ","^1P",[["^ ","^1N",0,"^1O",969],["^ ","^1N",4,"^1O",969],["^ ","^1N",16,"^1O",978],["^ ","^1N",24,"^1O",978,"^H","e46672"],["^ ","^1N",0,"^1O",979]]],"~i469",["^ ","^1Q",[["^ ","^1N",4,"^1O",969],["^ ","^1N",24,"^1O",972],["^ ","^1N",18,"^1O",973,"^H","p1__46663#"],["^ ","^1N",0,"^1O",974],["^ ","^1N",0,"^1O",977]],"^1V",[["^ ","^1N",8,"^1O",969,"^H","mutation-map"]],"^2:",[["^ ","^1N",23,"^1O",969]],"^2R",[["^ ","^1N",23,"^1O",969,"^H","run-mutation"]],"^2V",[["^ ","^1N",36,"^1O",969,"^H","r"]]],"~i470",["^ ","^1V",[["^ ","^1N",4,"^1O",970,"^H","ks"]],"^2:",[["^ ","^1N",9,"^1O",970]],"^2R",[["^ ","^1N",9,"^1O",970,"^H","cljs.core/set"]],"^2@",[["^ ","^1N",23,"^1O",970]],"^2A",[["^ ","^1N",23,"^1O",970,"^H","cljs.core/keys"]],"^2Q",[["^ ","^1N",38,"^1O",970,"^H","mutation-map"]]],"~i471",["^ ","^1V",[["^ ","^1N",4,"^1O",971,"^H","possible-remotes"]],"^2:",[["^ ","^1N",23,"^1O",971],["^ ","^1N",79,"^1O",971],["^ ","^1N",160,"^1O",971],["^ ","^1N",224,"^1O",971],["^ ","^1N",283,"^1O",971],["^ ","^1N",341,"^1O",971]],"^2R",[["^ ","^1N",23,"^1O",971,"^H","clojure.set.difference.cljs$core$IFn$_invoke$arity$2"]],"^2I",[["^ ","^1N",76,"^1O",971,"^H","ks"]]],"~i472",["^ ","^1V",[["^ ","^1N",4,"^1O",972,"^H","active-now?"]],"^2R",[["^ ","^1N",0,"^1O",974],["^ ","^1N",64,"^1O",974,"^H","p1__46663#"],["^ ","^1N",81,"^1O",974]],"^2H",[["^ ","^1N",7,"^1O",974,"^H","cljs.core.get.cljs$core$IFn$_invoke$arity$3"]],"^2A",[["^ ","^1N",51,"^1O",974,"^H","mutation-map"]]],"~i473",["^ ","^1U",[["^ ","^1N",0,"^1O",977]],"^2<",[["^ ","^1N",7,"^1O",977,"^H","cljs.core.into.cljs$core$IFn$_invoke$arity$2"]],"^2>",[["^ ","^1N",52,"^1O",977,"^H","remotes"]],"^23",[["^ ","^1N",60,"^1O",977]],"^2G",[["^ ","^1N",60,"^1O",977,"^H","cljs.core.filter.cljs$core$IFn$_invoke$arity$2"]],"^2R",[["^ ","^1N",107,"^1O",977,"^H","active-now?"]],"^2U",[["^ ","^1N",125,"^1O",977,"^H","possible-remotes"]]],"~i474",["^ ","^31",[["^ ","^1N",20,"^1O",978,"^H","e"]]],"~i475",["^ ","^1U",[["^ ","^1N",0,"^1O",979],["^ ","^1N",4,"^1O",979],["^ ","^1N",4,"^1O",979],["^ ","^1N",4,"^1O",979,"^H","fulcro.logging._log.cljs$core$IFn$_invoke$arity$variadic"],["^ ","^1N",61,"^1O",979],["^ ","^1N",104,"^1O",979],["^ ","^1N",158,"^1O",979],["^ ","^1N",185,"^1O",979],["^ ","^1N",237,"^1O",979],["^ ","^1N",249,"^1O",979],["^ ","^1N",354,"^1O",979],["^ ","^1N",416,"^1O",979],["^ ","^1N",16,"^1O",980],["^ ","^1N",19,"^1O",980],["^ ","^1N",20,"^1O",980,"^H","e46673"],["^ ","^1N",38,"^1O",980,"^H","js/Error"],["^ ","^1N",0,"^1O",981],["^ ","^1N",4,"^1O",981,"^H","e__31518__auto__"],["^ ","^1N",29,"^1O",981,"^H","e46673"],["^ ","^1N",0,"^1O",982],["^ ","^1N",0,"^1O",982],["^ ","^1N",0,"^1O",982,"^H","fulcro.logging._log.cljs$core$IFn$_invoke$arity$variadic"],["^ ","^1N",57,"^1O",982],["^ ","^1N",100,"^1O",982],["^ ","^1N",154,"^1O",982],["^ ","^1N",181,"^1O",982],["^ ","^1N",233,"^1O",982],["^ ","^1N",245,"^1O",982],["^ ","^1N",350,"^1O",982],["^ ","^1N",403,"^1O",982,"^H","e__31518__auto__"],["^ ","^1N",0,"^1O",984],["^ ","^1N",0,"^1O",984],["^ ","^1N",6,"^1O",984,"^H","e46673"]],"^2N",[["^ ","^1N",400,"^1O",979,"^H","dispatch-symbol"]],"~i160",[["^ ","^1N",484,"^1O",979,"^H","e"]]],"~i476",["^ ","^1U",[["^ ","^1N",0,"^1O",988]],"^2<",[["^ ","^1N",7,"^1O",988,"^H","cljs.core/reduced"]],"^27",[["^ ","^1N",25,"^1O",988],["^ ","^1N",59,"^1O",988],["^ ","^1N",140,"^1O",988]],"^22",[["^ ","^1N",27,"^1O",988]],"^23",[["^ ","^1N",27,"^1O",988,"^H","cljs.core/seq"]],"^25",[["^ ","^1N",41,"^1O",988,"^H","remotes"]],"^2A",[["^ ","^1N",51,"^1O",988,"^H","remotes"]]],"~i477",["^ ","^1R",[["^ ","^1N",38,"^1O",989,"^H","legal-remotes"]]]],"~:cljc",true],"~:cache-keys",["~#cmap",[["^1E","goog/dom/tagname.js"],[1508737613441,"^[","~$goog.dom.HtmlElement"],["^1E","goog/async/freelist.js"],[1508737613441,"^["],["^1E","cljs/core/async/impl/ioc_helpers.cljs"],[1516100900795,"^[","^Z","~$cljs.core.async.impl.protocols"],["^1E","goog/labs/useragent/platform.js"],[1508737613441,"^[","~$goog.labs.userAgent.util","~$goog.string"],["~:macro","^Z"],[1537260906000],["^1E","cljs/core/async.cljs"],[1516100900795,"^[","^Z","^7L","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers"],["^1E","goog/timer/timer.js"],[1508737613441,"^[","~$goog.Promise","~$goog.events.EventTarget"],["^1E","fulcro/util.cljc"],[1537260907310,"^[","^Z","^A","^12","^Q"],["^1E","goog/module/basemodule.js"],[1508737613441,"^[","~$goog.Disposable","~$goog.module"],["^1E","cljs/spec/gen/alpha.cljs"],[1537260906289,"^[","^Z","~$goog.Uri"],["^1E","cljs/tools/reader/impl/utils.cljs"],[1537358547920,"^[","^Z","~$clojure.string","^7N"],["^1E","goog/math/math.js"],[1508737613441,"^[","~$goog.array","~$goog.asserts"],["^1E","goog/events/eventtype.js"],[1508737613441,"^[","~$goog.userAgent"],["^1E","goog/labs/useragent/browser.js"],[1508737613441,"^[","^7[","^7M","~$goog.object","^7N"],["^1E","goog/html/safeurl.js"],[1508737613441,"^[","^80","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","^7N","~$goog.string.Const","~$goog.string.TypedString"],["^1E","goog/array/array.js"],[1508737613441,"^[","^80"],["~:shadow.build.npm/resource","node_modules/prop-types/checkPropTypes.js"],[1537358551000,1529422278000,"~$shadow.js","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"],["^7O","^D"],[1537260907000],["^1E","fulcro/client/primitives.cljc"],[1537260907310,"^[","^Z","^7N","~$cljsjs.react","^82","~$fulcro-css.css-protocols","~$fulcro-css.css-implementation","^=","^O","~$fulcro.history","^Q","~$fulcro.tempid","~$fulcro.transit","~$clojure.zip","^U","~$fulcro.client.impl.protocols","~$fulcro.client.impl.parser","^10","^12","^7Z","^A","~$cognitect.transit"],["^7O","~$cljs.core.async.macros"],[1516100900000],["^1E","goog/useragent/useragent.js"],[1508737613441,"^[","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^7M","~$goog.reflect","^7N"],["^7O","~$cljs.tools.reader.reader-types"],[1537358547000],["^7O","^W"],[1537260907000],["^1E","goog/async/run.js"],[1508737613441,"^[","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"],["^1E","com/cognitect/transit/impl/reader.js"],[1482686437866,"^[","~$com.cognitect.transit.impl.decoder","~$com.cognitect.transit.caching"],["^1E","goog/debug/error.js"],[1508737613441,"^["],["^1E","goog/async/workqueue.js"],[1508737613441,"^[","^80","~$goog.async.FreeList"],["^1E","goog/events/events.js"],[1508737613441,"^[","^80","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","~$goog.events.BrowserFeature","~$goog.events.Listenable","~$goog.events.ListenerMap"],["^1E","goog/promise/resolver.js"],[1508737613441,"^["],["^1E","goog/events/browserfeature.js"],[1508737613441,"^[","^81"],["^1E","cljs/tools/reader/edn.cljs"],[1537358547920,"^[","^Z","~$cljs.tools.reader.impl.errors","^8K","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^7N","~$goog.string.StringBuffer"],["^1E","goog/net/xhrio.js"],[1508737613441,"^[","~$goog.Timer","^7[","^80","^8R","^7V","~$goog.json.hybrid","~$goog.log","~$goog.net.ErrorCode","~$goog.net.EventType","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^7N","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","^81"],["^1E","goog/promise/thenable.js"],[1508737613441,"^["],["^1E","goog/dom/nodetype.js"],[1508737613441,"^["],["^1E","goog/net/bulkloaderhelper.js"],[1508737613441,"^[","^7W"],["^1E","cljs/tools/reader/impl/inspect.cljs"],[1537358547920,"^[","^Z"],["^1E","com/cognitect/transit/util.js"],[1482686437866,"^[","^82"],["^7O","~$cljs.spec.gen.alpha"],[1537260906000],["^1E","cljs/tools/reader.cljs"],[1537358547920,"^[","^Z","^8K","^8X","^8Y","^8W","^7[","^7N","^8["],["^1E","goog/module/modulemanager.js"],[1508737613441,"^[","^7W","^7[","^80","~$goog.async.Deferred","~$goog.debug.Trace","~$goog.dispose","^92","^7X","~$goog.module.AbstractModuleLoader","~$goog.module.ModuleInfo","~$goog.module.ModuleLoadCallback","^82"],["^1E","goog/net/wrapperxmlhttpfactory.js"],[1508737613441,"^[","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"],["^1E","goog/events/eventtarget.js"],[1508737613441,"^[","^7W","^80","~$goog.events","~$goog.events.Event","^8U","^8V","^82"],["^1E","fulcro/client.cljc"],[1537260907310,"^[","^Z","^W","~$fulcro.client.impl.application","^D","~$fulcro.client.network","^Q","^=","^8C","^10","~$fulcro.client.util","^O","~$goog.dom","^A","^8?","^7Y"],["^1E","goog/module/moduleinfo.js"],[1508737613441,"^[","^7W","^8N","~$goog.functions","^7X","~$goog.module.BaseModule","^9@"],["^1E","goog/disposable/disposable.js"],[1508737613441,"^[","~$goog.disposable.IDisposable"],["^1E","goog/string/typedstring.js"],[1508737613441,"^["],["^89","node_modules/react/index.js"],[1537358551000,499162500000,"^8:","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"],["^1E","shadow/js.js"],[1537358551352,"^["],["^1E","goog/object/object.js"],[1508737613441,"^["],["^1E","goog/dom/asserts.js"],[1508737613441,"^[","^80"],"~:SHADOW-TIMESTAMP",[1537358551000,1537260906000],["^89","node_modules/react/cjs/react.development.js"],[1537358551000,499162500000,"^8:","~$module$node_modules$object_assign$index","~$module$node_modules$prop_types$checkPropTypes"],["^1E","cljs/stacktrace.cljc"],[1537260906289,"^[","^Z","^7N","^7Z"],["^1E","goog/math/long.js"],[1508737613441,"^[","^80","^8J"],["^1E","fulcro/transit.cljc"],[1537260907310,"^[","^Z","^8E","~$com.cognitect.transit","^8@"],["^1E","goog/events/listener.js"],[1508737613441,"^[","~$goog.events.ListenableKey"],["^1E","goog/html/trustedresourceurl.js"],[1508737613441,"^[","^80","^85","^86","^87","^88"],["^1E","goog/html/legacyconversions.js"],[1508737613441,"^[","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","~$goog.html.SafeStyleSheet","~$goog.html.SafeUrl","^84"],["^1E","goog/net/jsloader.js"],[1508737613441,"^[","^7[","^9;","~$goog.debug.Error","^9H","~$goog.dom.TagName","~$goog.dom.safe","^84","^82"],["^1E","goog/debug/tracer.js"],[1508737613441,"^[","^7[","~$goog.debug.Logger","~$goog.iter","^92","^98","~$goog.structs.SimplePool"],["^1E","cljs/core/async/impl/channels.cljs"],[1516100900795,"^[","^Z","^7L","^7S","^7Q"],["^1E","goog/events/listenermap.js"],[1508737613441,"^[","^7[","~$goog.events.Listener","^82"],["^1E","goog/events/eventid.js"],[1508737613441,"^["],["^1E","fulcro/client/network.cljc"],[1537260907310,"^[","^Z","^Q","^A","^8E","^9C","^8A","^7Z","~$goog.net.XhrIo","^94","^93"],["^1E","goog/functions/functions.js"],[1508737613441,"^["],["^1E","cljs/core/async/impl/dispatch.cljs"],[1516100900795,"^[","^Z","^7Q","^8M"],["^1E","goog/html/safestyle.js"],[1508737613441,"^[","^7[","^80","^9W","^7N","^87","^88"],["^1E","goog/dom/safe.js"],[1508737613441,"^[","^80","~$goog.dom.asserts","^9S","^9T","^9U","^9W","^84","^7N","^87"],["^1E","clojure/walk.cljs"],[1537260906289,"^[","^Z"],["^1E","goog/useragent/product.js"],[1508737613441,"^[","^8G","^8I","^81"],["^1E","cljs/core/async/impl/protocols.cljs"],[1516100900795,"^[","^Z"],["^1E","goog/net/eventtype.js"],[1508737613441,"^["],["^1E","goog/structs/map.js"],[1508737613441,"^[","~$goog.iter.Iterator","~$goog.iter.StopIteration","^82"],["^1E","com/cognitect/transit/delimiters.js"],[1482686437866,"^["],["^1E","goog/html/safehtml.js"],[1508737613441,"^[","^7[","^80","^9Y","~$goog.dom.tags","^9T","^9U","^9V","^9W","^84","^85","^86","^8G","^82","^7N","^87","^88"],["^1E","goog/dom/tags.js"],[1508737613441,"^[","^82"],["^1E","goog/module/moduleloadcallback.js"],[1508737613441,"^[","^8R","^7X"],["^1E","goog/math/size.js"],[1508737613441,"^["],["^1E","fulcro/client/impl/data_targeting.cljc"],[1537260907310,"^[","^Z","^O","^10"],["^7O","^Q"],[1537260907000],["^1E","goog/labs/useragent/engine.js"],[1508737613441,"^[","^7[","^7M","^7N"],["^1E","com/cognitect/transit/impl/decoder.js"],[1482686437866,"^[","~$com.cognitect.transit.util","~$com.cognitect.transit.delimiters","^8P","~$com.cognitect.transit.types"],["^1E","fulcro_css/css_implementation.cljc"],[1537260907310,"^[","^Z","~$cljs.tagged-literals","^8=","^7Z"],["^1E","cljs/reader.cljs"],[1537260906289,"^[","^Z","^82","^8Z","~$cljs.tools.reader.edn","^8["],["^1E","fulcro_css/css_protocols.cljc"],[1537260907310,"^[","^Z"],["^1E","goog/dom/dom.js"],[1508737613441,"^[","^7[","^80","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^9Y","^9Z","^9S","~$goog.html.uncheckedconversions","~$goog.math.Coordinate","~$goog.math.Size","^82","^7N","~$goog.string.Unicode","^81"],["^7O","^A"],[1537260906000],["^1E","goog/asserts/asserts.js"],[1508737613441,"^[","^9X","^:>","^7N"],["^1E","goog/debug/relativetimeprovider.js"],[1508737613441,"^["],["^1E","cljs/core/async/impl/buffers.cljs"],[1516100900795,"^[","^Z","^7L"],["^1E","goog/debug/logbuffer.js"],[1508737613441,"^[","^80","~$goog.debug.LogRecord"],["^1E","cljs/tagged_literals.cljc"],[1537260906289,"^[","^Z","~$cljs.reader"],["^1E","goog/uri/uri.js"],[1508737613441,"^[","^7[","^80","^7N","^97","^98","^99","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^1E","goog/net/errorcode.js"],[1508737613441,"^["],["^1E","goog/i18n/bidi.js"],[1508737613441,"^["],["^89","node_modules/object-assign/index.js"],[1537358551000,1484580833000,"^8:"],["^1E","fulcro/client/impl/data_fetch.cljc"],[1537260907310,"^[","^Z","^W","^U","^10","^9G","^12","^O","^Q","^8?","^D","^8C","^A"],["^7O","^="],[1516100900000],["^1E","goog/module/module.js"],[1508737613441,"^["],["^1E","fulcro/tempid.cljc"],[1537260907310,"^[","^Z"],["^1E","cljs/loader.cljs"],[1537260906289,"^[","^Z","^82","~$goog.module.ModuleLoader","~$goog.module.ModuleManager"],["^1E","goog/disposable/idisposable.js"],[1508737613441,"^["],["^1E","goog/debug/formatter.js"],[1508737613441,"^[","~$goog.debug","^9[","~$goog.debug.RelativeTimeProvider","^9S","^9W","^:?","^87"],["^1E","goog/promise/promise.js"],[1508737613441,"^[","~$goog.Thenable","^80","^8Q","~$goog.async.run","^8N","^9X","~$goog.promise.Resolver"],["^1E","cljs/core/async/impl/timers.cljs"],[1516100900795,"^[","^Z","^7L","^7P","^7S"],["^1E","cljs/spec/alpha.cljs"],[1537260906289,"^[","^Z","^82","^12","^9:","^7Z"],["^1E","goog/fs/url.js"],[1508737613441,"^["],["^1E","goog/debug/logrecord.js"],[1508737613441,"^["],["^1E","goog/base.js"],[1508737613441],["^1E","fulcro/client/util.cljc"],[1537260907310,"^[","^Z","^A","^12","^W","^8C","^8A","^10","^8E","^8D"],["^1E","goog/json/hybrid.js"],[1508737613441,"^[","^80","~$goog.json"],["^1E","goog/structs/structs.js"],[1508737613441,"^[","^7[","^82"],["^1E","cljs/tools/reader/impl/errors.cljs"],[1537358547920,"^[","^Z","^8K","^7Z","~$cljs.tools.reader.impl.inspect"],["^1E","cljsjs/react.cljs"],[1537358551030,"^[","^Z","~$module$node_modules$react$index"],["^1E","clojure/string.cljs"],[1537260906289,"^[","^Z","^7N","^8["],["^1E","fulcro/history.cljc"],[1537260907310,"^[","^Z","^Q","^10","^O","^A"],["^89","node_modules/react/cjs/react.production.min.js"],[1537358551000,499162500000,"^8:","^9O"],["^1E","goog/net/httpstatus.js"],[1508737613441,"^["],["^1E","fulcro/client/mutations.cljc"],[1537260907310,"^[","^Z","^A","^10","^Q","^W","~$cljs.loader","^8C","^8D"],["^1E","com/cognitect/transit/handlers.js"],[1482686437866,"^[","^:8","^::","~$goog.math.Long"],["^1E","fulcro/client/impl/protocols.cljc"],[1537260907310,"^[","^Z"],["^1E","goog/debug/entrypointregistry.js"],[1508737613441,"^[","^80"],["^1E","goog/string/string.js"],[1508737613441,"^["],["^1E","com/cognitect/transit/types.js"],[1482686437866,"^[","^:8","~$com.cognitect.transit.eq","^:R"],["^1E","goog/module/abstractmoduleloader.js"],[1508737613441,"^[","^7X","^9?"],["^1E","goog/reflect/reflect.js"],[1508737613441,"^["],["^1E","goog/labs/useragent/util.js"],[1508737613441,"^[","^7N"],["^1E","com/cognitect/transit/eq.js"],[1482686437866,"^[","^:8"],["^7O","~$cljs.core.async.impl.ioc-macros"],[1516100900000],["^1E","goog/debug/debug.js"],[1508737613441,"^[","^7[","~$goog.debug.errorcontext","^81"],["^1E","clojure/zip.cljs"],[1537260906289,"^[","^Z"],["^1E","goog/string/stringbuffer.js"],[1508737613441,"^["],["^1E","goog/math/coordinate.js"],[1508737613441,"^[","~$goog.math"],["^1E","goog/debug/errorcontext.js"],[1508737613441,"^["],["^1E","cljs/tools/reader/reader_types.cljs"],[1537358547920,"^[","^Z","^8X","^7N","^8["],["^1E","goog/iter/iter.js"],[1508737613441,"^[","^7[","^80","^9I","^:V"],["^1E","goog/async/nexttick.js"],[1508737613441,"^[","^8R","^9Y","^9I","^8G","^8H"],["^1E","goog/html/uncheckedconversions.js"],[1508737613441,"^[","^80","^9S","^9T","^9U","^9V","^9W","^84","^7N","^87"],["^1E","goog/debug/logger.js"],[1508737613441,"^[","^7[","^80","^:I","~$goog.debug.LogBuffer","^:C"],["^1E","com/cognitect/transit/caching.js"],[1482686437866,"^[","^:9"],["^89","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1537358551000,1529417620000,"^8:"],["^1E","fulcro/client/impl/application.cljc"],[1537260907310,"^[","^Z","^Q","^W","^D","^8?","^O","^S","^10","^9G","^A","^=","^9F","^8C"],["^1E","goog/module/moduleloader.js"],[1508737613441,"^[","^90","^7[","^9C","^9D","~$goog.events.EventHandler","~$goog.events.EventId","^7V","~$goog.html.legacyconversions","^8G","^92","^9>","~$goog.net.BulkLoader","^94","~$goog.net.jsloader","^81","~$goog.userAgent.product"],["^1E","goog/events/event.js"],[1508737613441,"^[","^7W","^:Y"],["^1E","cljs/tools/reader/impl/commons.cljs"],[1537358547920,"^[","^Z","^8W","^8K","^8X"],["^1E","goog/events/eventhandler.js"],[1508737613441,"^[","^7W","^9C","^82"],["^1E","goog/dom/htmlelement.js"],[1508737613441,"^["],["^1E","cljs/core.cljs"],[1537260906289,"^:R","~$goog.math.Integer","^7N","^82","^7[","^7Y","^8["],["^1E","com/cognitect/transit.js"],[1482686437866,"^[","^:8","~$com.cognitect.transit.impl.reader","~$com.cognitect.transit.impl.writer","^::","^:S","^8O","^8P"],["^1E","goog/html/safescript.js"],[1508737613441,"^[","^80","^87","^88"],["^1E","goog/log/log.js"],[1508737613441,"^[","^:I","~$goog.debug.LogManager","^:C","^9["],["^1E","fulcro/client/data_fetch.cljc"],[1537260907310,"^[","^Z","^12","^W","^S","^U","^D","^Q","^Y","^10","^O"],["^1E","fulcro/logging.cljc"],[1537260907310,"^[","^Z","^7Z","^?","^92","^82","~$goog.debug.Logger.Level","~$goog.debug.Console"],["^1E","goog/html/safestylesheet.js"],[1508737613441,"^[","^7[","^80","^9U","^82","^7N","^87","^88"],["^1E","goog/events/browserevent.js"],[1508737613441,"^[","^8T","^9D","~$goog.events.EventType","^8J","^81"],["^1E","goog/math/integer.js"],[1508737613441,"^["],["^1E","goog/debug/console.js"],[1508737613441,"^[","^;5","^9[","~$goog.debug.TextFormatter"],["^1E","goog/structs/simplepool.js"],[1508737613441,"^[","^7W"],["^1E","goog/dom/browserfeature.js"],[1508737613441,"^[","^81"],["^1E","goog/net/bulkloader.js"],[1508737613441,"^[","^:X","^7V","^92","~$goog.net.BulkLoaderHelper","^94","^:3"],["^1E","clojure/set.cljs"],[1537260906289,"^[","^Z"],["^1E","goog/uri/utils.js"],[1508737613441,"^[","^7[","^80","^7N"],["^1E","goog/string/const.js"],[1508737613441,"^[","^80","^88"],["^1E","goog/json/json.js"],[1508737613441,"^["],["^1E","goog/events/listenable.js"],[1508737613441,"^[","^:Y"],["^1E","com/cognitect/transit/impl/writer.js"],[1482686437866,"^[","^:8","^8P","~$com.cognitect.transit.handlers","^::","^:9","^:R"],["^1E","goog/net/xmlhttpfactory.js"],[1508737613441,"^[","^9A"],["^1E","goog/net/xmlhttp.js"],[1508737613441,"^[","^80","~$goog.net.WrapperXmlHttpFactory","^9B"],["^1E","fulcro/client/impl/parser.cljc"],[1537260907310,"^[","^Z","^O","^Q","^10"],["^1E","goog/net/xhrlike.js"],[1508737613441,"^["],["^1E","goog/mochikit/async/deferred.js"],[1508737611097,"^[","^7U","^:K","^7[","^80","^9X"],["^1E","cognitect/transit.cljs"],[1537260903184,"^[","^Z","^9Q","^::","^:S","^:R"],["^7O","^:D"],[1537260906000]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","fulcro/client/data_fetch.cljc","^7",1,"^8",5,"^9",1,"^:",29],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",["^ ","^C","^D"],"^E",["^F",["^G"]],"^H","^I","^L",null,"^M",["^ ","^N","^O","^P","^Q","^R","^S","^T","^U","^V","^W","^X","^Y","^Q","^Q","^Z","^Z","^S","^S","^[","^[","^D","^D","^W","^W","^10","^10","^O","^O","~$m","^D","^11","^10","^12","^12","^Y","^Y","^U","^U"],"^13",["^F",["^14"]],"~:shadow/js-access-global",["^F",["Error","setTimeout"]],"^15",["^ ","^16","^12","^17","^12","^18","^D","^C","^D"],"~:defs",["^ ","~$load*",["^ ","~:protocol-inline",null,"^5",["^ ","^6","fulcro/client/data_fetch.cljc","^7",399,"^8",8,"^9",399,"^:",13,"~:private",true,"~:arglists",["^1;",["~$quote",["^1;",[["~$env",["^ ","~:keys",["~$post-mutation","~$remote"],"^1@","~$config"]]]]]]],"^;B",true,"^H","~$fulcro.client.data-fetch/load*","~:variadic",false,"^6","fulcro/client/data_fetch.cljc","^:",13,"~:method-params",["^1;",[["^;E","~$p__46605"]]],"~:protocol-impl",null,"~:arglists-meta",["^1;",[null,null]],"^8",1,"^7",399,"^9",399,"~:max-fixed-arity",2,"~:fn-var",true,"^;C",["^1;",["^;D",["^1;",[["^;E",["^ ","^;F",["^;G","^;H"],"^1@","^;I"]]]]]]],"~$replace-at",["^ ","^;A",null,"^5",["^ ","^6","fulcro/client/data_fetch.cljc","^7",33,"^8",7,"^9",33,"^:",17,"^;C",["^1;",["^;D",["^1;",[["~$target"]]]]]],"^H","~$fulcro.client.data-fetch/replace-at","^;K",false,"^6","fulcro/client/data_fetch.cljc","^:",17,"^;L",["^1;",[["^;S"]]],"^;N",null,"^;O",["^1;",[null,null]],"^8",1,"^7",33,"^9",33,"^;P",1,"^;Q",true,"^;C",["^1;",["^;D",["^1;",[["^;S"]]]]]],"~$failed?",["^ ","^;A",null,"^5",["^ ","^6","fulcro/client/data_fetch.cljc","^7",331,"^8",7,"^9",331,"^:",14,"^;C",["^1;",["^;D",["^1;",[["~$state"]]]]]],"^H","~$fulcro.client.data-fetch/failed?","^;K",false,"^6","fulcro/client/data_fetch.cljc","^:",14,"^;L",["^1;",[["^;V"]]],"^;N",null,"^;O",["^1;",[null,null]],"^8",1,"^7",331,"^9",331,"^;P",1,"^;Q",true,"^;C",["^1;",["^;D",["^1;",[["^;V"]]]]]],"~$refresh!",["^ ","^;A",null,"^5",["^ ","^6","fulcro/client/data_fetch.cljc","^7",393,"^8",7,"^9",393,"^:",15,"^;C",["^1;",["^;D",["^1;",[["~$component","~$load-options"],["^;Y"]]]]],"~:top-fn",["^ ","^;K",false,"^;P",2,"^;L",["^1;",[["^;Y","^;Z"],["^;Y"]]],"^;C",["^1;",[["^;Y","^;Z"],["^;Y"]]],"^;O",["^1;",[null,null]]]],"^H","~$fulcro.client.data-fetch/refresh!","^;K",false,"^6","fulcro/client/data_fetch.cljc","^:",15,"^;[",["^ ","^;K",false,"^;P",2,"^;L",["^1;",[["^;Y","^;Z"],["^;Y"]]],"^;C",["^1;",[["^;Y","^;Z"],["^;Y"]]],"^;O",["^1;",[null,null]]],"^;L",["^1;",[["^;Y","^;Z"],["^;Y"]]],"^;N",null,"^;O",["^1;",[null,null]],"^8",1,"^7",393,"^9",393,"^;P",2,"^;Q",true,"^;C",["^1;",[["^;Y","^;Z"],["^;Y"]]]],"~$data-state?",["^ ","^;A",null,"^5",["^ ","^6","fulcro/client/data_fetch.cljc","^7",328,"^8",7,"^9",328,"^:",18,"^;C",["^1;",["^;D",["^1;",[["^;V"]]]]]],"^H","~$fulcro.client.data-fetch/data-state?","^;K",false,"^6","fulcro/client/data_fetch.cljc","^:",18,"^;L",["^1;",[["^;V"]]],"^;N",null,"^;O",["^1;",[null,null]],"^8",1,"^7",328,"^9",328,"^;P",1,"^;Q",true,"^;C",["^1;",["^;D",["^1;",[["^;V"]]]]]],"~$get-remotes",["^ ","^;A",null,"^5",["^ ","^6","fulcro/client/data_fetch.cljc","^7",455,"^8",7,"^9",455,"^:",18,"^;C",["^1;",["^;D",["^1;",[["~$state-map","~$dispatch-symbol"],["^<4","^<5","~$legal-remotes"]]]]],"~:doc","Returns the remote against which the given mutation will try to execute. Returns nil if it is not a remote mutation.\n  `legal-remotes` is a set of legal remote names. Defaults to `#{:remote}`.\n\n  Returns a set of the remotes that will be triggered for this mutation, which may be empty.\n  ","^;[",["^ ","^;K",false,"^;P",3,"^;L",["^1;",[["^<4","^<5"],["^<4","^<5","^<6"]]],"^;C",["^1;",[["^<4","^<5"],["^<4","^<5","^<6"]]],"^;O",["^1;",[null,null]]]],"^H","~$fulcro.client.data-fetch/get-remotes","^;K",false,"^6","fulcro/client/data_fetch.cljc","^:",18,"^;[",["^ ","^;K",false,"^;P",3,"^;L",["^1;",[["^<4","^<5"],["^<4","^<5","^<6"]]],"^;C",["^1;",[["^<4","^<5"],["^<4","^<5","^<6"]]],"^;O",["^1;",[null,null]]],"^;L",["^1;",[["^<4","^<5"],["^<4","^<5","^<6"]]],"^;N",null,"^;O",["^1;",[null,null]],"^8",1,"^7",455,"^9",455,"^;P",3,"^;Q",true,"^;C",["^1;",[["^<4","^<5"],["^<4","^<5","^<6"]]],"^<7","Returns the remote against which the given mutation will try to execute. Returns nil if it is not a remote mutation.\n  `legal-remotes` is a set of legal remote names. Defaults to `#{:remote}`.\n\n  Returns a set of the remotes that will be triggered for this mutation, which may be empty.\n  "],"~$ready?",["^ ","^;A",null,"^5",["^ ","^6","fulcro/client/data_fetch.cljc","^7",329,"^8",7,"^9",329,"^:",13,"^;C",["^1;",["^;D",["^1;",[["^;V"]]]]]],"^H","~$fulcro.client.data-fetch/ready?","^;K",false,"^6","fulcro/client/data_fetch.cljc","^:",13,"^;L",["^1;",[["^;V"]]],"^;N",null,"^;O",["^1;",[null,null]],"^8",1,"^7",329,"^9",329,"^;P",1,"^;Q",true,"^;C",["^1;",["^;D",["^1;",[["^;V"]]]]]],"^G",["^ ","^;A",null,"^5",["^ ","^6","fulcro/client/data_fetch.cljc","^7",116,"^8",7,"^9",116,"^:",11,"^;C",["^1;",["^;D",["^1;",[["~$app-or-comp-or-reconciler","~$server-property-or-ident","~$class-or-factory"],["^<;","^<<","^<=","^;I"]]]]],"^<7","Load data from the server.\n\n  This function triggers a server interaction and normalizes the server response into your app state database. During\n  operation it also adds (by default) fetch markers into the app state so you can show busy indicators on the UI\n  components that are waiting for data. The `:target` parameter can be used to place the data somewhere besides app\n  state root (which is the default).\n\n  The server will receive a query of the form: [({server-property (prim/get-query class-or-factory)} params)], which\n  a Fulcro parser will correctly parse as a join on server-property with the given subquery and params. See the AST and\n  instructions on parsing queries in the developer's guide.\n\n  Parameters:\n  - `app-or-comp-or-reconciler` : A component instance, Fulcro application, or reconciler\n  - `server-property-or-ident` : A keyword or ident that represents the root of the query to send to the server. If this is an ident\n  you are loading a specific entity from the database into a local app db table. A custom target will be ignored.\n  - `class-or-factory` : A component that implements IQuery, or a factory for it (if using dynamic queries). This will be combined with `server-property` into a join for the server query. Needed to normalize results.\n    class-or-factory can be nil, in which case the resulting server query will not be a join.\n  - `config` : A map of load configuration parameters.\n\n  Config (all optional):\n  - `target` - An assoc-in path at which to put the result of the Subquery (as an edge (normalized) or value (not normalized)).\n    Can also be special targets (multiple-targets, append-to,\n    prepend-to, or replace-at). If you are loading by keyword (into root), then this relocates the result (ident or value) after load.\n    When loading an entity (by ident), then this option will place additional idents at the target path(s) that point to that entity.\n  - `initialize` - Optional. If `true`, uses `get-initial-state` on class-or-factory to  get a basis for merge of the result. This allows you\n    to use initial state to pre-populate loads with things like UI concerns. If `:initialize` is passed a map, then it uses that as\n    the base target merge value for class-or-factory instead.\n  - `remote` - Optional. Keyword name of the remote that this load should come from.\n  - `params` - Optional parameters to add to the generated query\n  - `marker` - Boolean to determine if you want a fetch-state marker in your app state. Defaults to true. Add `:ui/fetch-state` to the\n  target component in order to see this data in your component.\n  - `refresh` - A vector of keywords that will cause component re-renders after the final load/mutations. Same as follow-on\n  reads in normal `transact!`\n  - `parallel` - If true, indicates that this load does not have to go through the sequential network queue. Defaults to false.\n  - `post-mutation` - A mutation (symbol) to run after the data is merged. Note, if target is supplied be sure your post mutation\n  should expect the data at the targeted location. The `env` of that mutation will be the env of the load (if available), but will also include `:load-request`.\n  - `post-mutation-params` - An optional map  that will be passed to the post-mutation when it is called. May only contain raw data, not code!\n  - `fallback` - A mutation (symbol) to run if there is a server/network error. The `env` of the fallback will be the env of the load (if available), but will also include `:load-request`.\n  - `update-query` - A optional function that can transform the component query before sending to remote.\n      For example, to focus a subquery using update-query:\n          {:update-query #(prim/focus-subquery % [:my {:sub [:query]}])}\n\n      Removing properties (like previous :without option):\n          {:update-query #(df/elide-query-nodes % #{:my :elisions})}\n  - `focus` - An optional subquery to focus on some parts of the original query.\n  - `without` - An optional set of keywords that should (recursively) be removed from the query.\n  - `abort-id` - An ID (typically a keyword) that you can use to cancel the load via `fulcro.client/abort`.\n\n  Notes on UI Refresh:\n  The refresh list will automatically include what you load (as a non-duplicate):\n  - When target is set and has 2+ elements: refresh will include an ident of the first two elements\n     - e.g. `:target [:a 1 :thing]` -> `:refresh [[:a 1]]`\n  - When target has a single element, refresh will include that element as a keyword\n     - e.g. `:target [:thing]` -> `:refresh [:thing]`\n  - When there is no target:\n     - If prop-or-ident is a kw -> `:refresh [kw]`\n     - If prop-or-ident is an ident -> `:refresh [ident]`\n  In all cases, any explicit refresh things you include will not be dropped. The computed refresh list\n  is essentially a `(-> original-refresh-list set add-computed-bits vec)`.\n  ","^;[",["^ ","^;K",false,"^;P",4,"^;L",["^1;",[["^<;","^<<","^<="],["^<;","^<<","^<=","^;I"]]],"^;C",["^1;",[["^<;","^<<","^<="],["^<;","^<<","^<=","^;I"]]],"^;O",["^1;",[null,null]]]],"^H","~$fulcro.client.data-fetch/load","^;K",false,"^6","fulcro/client/data_fetch.cljc","^:",11,"^;[",["^ ","^;K",false,"^;P",4,"^;L",["^1;",[["^<;","^<<","^<="],["^<;","^<<","^<=","^;I"]]],"^;C",["^1;",[["^<;","^<<","^<="],["^<;","^<<","^<=","^;I"]]],"^;O",["^1;",[null,null]]],"^;L",["^1;",[["^<;","^<<","^<="],["^<;","^<<","^<=","^;I"]]],"^;N",null,"^;O",["^1;",[null,null]],"^8",1,"^7",116,"^9",116,"^;P",4,"^;Q",true,"^;C",["^1;",[["^<;","^<<","^<="],["^<;","^<<","^<=","^;I"]]],"^<7","Load data from the server.\n\n  This function triggers a server interaction and normalizes the server response into your app state database. During\n  operation it also adds (by default) fetch markers into the app state so you can show busy indicators on the UI\n  components that are waiting for data. The `:target` parameter can be used to place the data somewhere besides app\n  state root (which is the default).\n\n  The server will receive a query of the form: [({server-property (prim/get-query class-or-factory)} params)], which\n  a Fulcro parser will correctly parse as a join on server-property with the given subquery and params. See the AST and\n  instructions on parsing queries in the developer's guide.\n\n  Parameters:\n  - `app-or-comp-or-reconciler` : A component instance, Fulcro application, or reconciler\n  - `server-property-or-ident` : A keyword or ident that represents the root of the query to send to the server. If this is an ident\n  you are loading a specific entity from the database into a local app db table. A custom target will be ignored.\n  - `class-or-factory` : A component that implements IQuery, or a factory for it (if using dynamic queries). This will be combined with `server-property` into a join for the server query. Needed to normalize results.\n    class-or-factory can be nil, in which case the resulting server query will not be a join.\n  - `config` : A map of load configuration parameters.\n\n  Config (all optional):\n  - `target` - An assoc-in path at which to put the result of the Subquery (as an edge (normalized) or value (not normalized)).\n    Can also be special targets (multiple-targets, append-to,\n    prepend-to, or replace-at). If you are loading by keyword (into root), then this relocates the result (ident or value) after load.\n    When loading an entity (by ident), then this option will place additional idents at the target path(s) that point to that entity.\n  - `initialize` - Optional. If `true`, uses `get-initial-state` on class-or-factory to  get a basis for merge of the result. This allows you\n    to use initial state to pre-populate loads with things like UI concerns. If `:initialize` is passed a map, then it uses that as\n    the base target merge value for class-or-factory instead.\n  - `remote` - Optional. Keyword name of the remote that this load should come from.\n  - `params` - Optional parameters to add to the generated query\n  - `marker` - Boolean to determine if you want a fetch-state marker in your app state. Defaults to true. Add `:ui/fetch-state` to the\n  target component in order to see this data in your component.\n  - `refresh` - A vector of keywords that will cause component re-renders after the final load/mutations. Same as follow-on\n  reads in normal `transact!`\n  - `parallel` - If true, indicates that this load does not have to go through the sequential network queue. Defaults to false.\n  - `post-mutation` - A mutation (symbol) to run after the data is merged. Note, if target is supplied be sure your post mutation\n  should expect the data at the targeted location. The `env` of that mutation will be the env of the load (if available), but will also include `:load-request`.\n  - `post-mutation-params` - An optional map  that will be passed to the post-mutation when it is called. May only contain raw data, not code!\n  - `fallback` - A mutation (symbol) to run if there is a server/network error. The `env` of the fallback will be the env of the load (if available), but will also include `:load-request`.\n  - `update-query` - A optional function that can transform the component query before sending to remote.\n      For example, to focus a subquery using update-query:\n          {:update-query #(prim/focus-subquery % [:my {:sub [:query]}])}\n\n      Removing properties (like previous :without option):\n          {:update-query #(df/elide-query-nodes % #{:my :elisions})}\n  - `focus` - An optional subquery to focus on some parts of the original query.\n  - `without` - An optional set of keywords that should (recursively) be removed from the query.\n  - `abort-id` - An ID (typically a keyword) that you can use to cancel the load via `fulcro.client/abort`.\n\n  Notes on UI Refresh:\n  The refresh list will automatically include what you load (as a non-duplicate):\n  - When target is set and has 2+ elements: refresh will include an ident of the first two elements\n     - e.g. `:target [:a 1 :thing]` -> `:refresh [[:a 1]]`\n  - When target has a single element, refresh will include that element as a keyword\n     - e.g. `:target [:thing]` -> `:refresh [:thing]`\n  - When there is no target:\n     - If prop-or-ident is a kw -> `:refresh [kw]`\n     - If prop-or-ident is an ident -> `:refresh [ident]`\n  In all cases, any explicit refresh things you include will not be dropped. The computed refresh list\n  is essentially a `(-> original-refresh-list set add-computed-bits vec)`.\n  "],"~$load-params*",["^ ","^;A",null,"^5",["^ ","^6","fulcro/client/data_fetch.cljc","^7",59,"^8",7,"^9",59,"^:",19,"^;C",["^1;",["^;D",["^1;",[["^<4","^<<","^<=",["^ ","^;F",["^;S","~$params","~$marker","~$refresh","~$parallel","^;G","~$post-mutation-params","~$fallback","^;H","~$focus","~$without","~$initialize","~$abort-id","~$update-query"],"~:or",["^ ","^;H","~:remote","^<A",true,"^<C",false,"^<B",[],"^<G",["^F",[]],"^<H",false]]]]]]],"^<7","Internal function to validate and process the parameters of `load` and `load-action`."],"^H","~$fulcro.client.data-fetch/load-params*","^;K",false,"^6","fulcro/client/data_fetch.cljc","^:",19,"^;L",["^1;",[["^<4","^<<","^<=","~$p__46350"]]],"^;N",null,"^;O",["^1;",[null,null]],"^8",1,"^7",59,"^9",59,"^;P",4,"^;Q",true,"^;C",["^1;",["^;D",["^1;",[["^<4","^<<","^<=",["^ ","^;F",["^;S","^<@","^<A","^<B","^<C","^;G","^<D","^<E","^;H","^<F","^<G","^<H","^<I","^<J"],"^<K",["^ ","^;H","^<L","^<A",true,"^<C",false,"^<B",[],"^<G",["^F",[]],"^<H",false]]]]]]],"^<7","Internal function to validate and process the parameters of `load` and `load-action`."],"~$bool?",["^ ","^;A",null,"^5",["^ ","^6","fulcro/client/data_fetch.cljc","^7",16,"^8",7,"^9",16,"^:",12,"^;C",["^1;",["^;D",["^1;",[["~$v"]]]]]],"^H","~$fulcro.client.data-fetch/bool?","^;K",false,"^6","fulcro/client/data_fetch.cljc","^:",12,"^;L",["^1;",[["~$v"]]],"^;N",null,"^;O",["^1;",[null,null]],"^8",1,"^7",16,"^9",16,"^;P",1,"^;Q",true,"^;C",["^1;",["^;D",["^1;",[["~$v"]]]]]],"~$multiple-targets",["^ ","^;A",null,"^5",["^ ","^6","fulcro/client/data_fetch.cljc","^7",24,"^8",7,"^9",24,"^:",23,"^;C",["^1;",["^;D",["^1;",[["~$&","~$targets"]]]]],"^;[",["^ ","^;K",true,"^;P",0,"^;L",[["^1;",["^<R"]]],"^;C",["^1;",[["~$&","^<R"]]],"^;O",["^1;",[null]]]],"^H","~$fulcro.client.data-fetch/multiple-targets","^;K",true,"^6","fulcro/client/data_fetch.cljc","^:",23,"^;[",["^ ","^;K",true,"^;P",0,"^;L",[["^1;",["^<R"]]],"^;C",["^1;",[["~$&","^<R"]]],"^;O",["^1;",[null]]],"^;L",[["^1;",["^<R"]]],"^;N",null,"^;O",["^1;",[null]],"^8",1,"^7",24,"^9",24,"^;P",0,"^;Q",true,"^;C",["^1;",[["~$&","^<R"]]]],"~$elide-query-nodes",["^ ","^;A",null,"^5",["^ ","^6","fulcro/client/data_fetch.cljc","^7",36,"^8",7,"^9",36,"^:",24,"^;C",["^1;",["^;D",["^1;",[["~$query","~$elision-set"]]]]],"^<7","Remove items from a query that have a key listed in the elision-set"],"^H","~$fulcro.client.data-fetch/elide-query-nodes","^;K",false,"^6","fulcro/client/data_fetch.cljc","^:",24,"^;L",["^1;",[["^<U","^<V"]]],"^;N",null,"^;O",["^1;",[null,null]],"^8",1,"^7",36,"^9",36,"^;P",2,"^;Q",true,"^;C",["^1;",["^;D",["^1;",[["^<U","^<V"]]]]],"^<7","Remove items from a query that have a key listed in the elision-set"],"~$load-action",["^ ","^;A",null,"^5",["^ ","^6","fulcro/client/data_fetch.cljc","^7",194,"^8",10,"^9",194,"^:",21,"^;C",["^1;",["^;D",["^1;",[["^;E","^<<","~$SubqueryClass"],["^;E","^<<","^<Y","^;I"]]]]],"^<7","\n     See `load` for descriptions of parameters and config.\n\n     Queue up a remote load from within an already-running mutation. Similar to `load`, but usable from\n     within a mutation. IMPORTANT: Make sure you specify the `:remote` parameter to this function, as\n     well as including a `remote-load` for that remote.\n\n     Note the `:refresh` parameter is supported, and defaults to empty. If you want anything to refresh other than\n     the targeted component you will want to include the :refresh parameter.\n\n     To use this function make sure your mutation specifies a return value with a remote. The remote\n     should use the helper function `remote-load` as it's value:\n\n     { :remote (df/remote-load env)\n       ; NOTE: :remote must be the keyword name of a legal remote in your system; however,\n       ; You must still name the remote in the `load-action` if it is something other than default.\n       :action (fn []\n          (load-action env ...)\n          ; other optimistic updates/state changes)}\n\n     `env` is the mutation's environment parameter.","^;[",["^ ","^;K",false,"^;P",4,"^;L",["^1;",[["^;E","^<<","^<Y"],["^;E","^<<","^<Y","^;I"]]],"^;C",["^1;",[["^;E","^<<","^<Y"],["^;E","^<<","^<Y","^;I"]]],"^;O",["^1;",[null,null]]]],"^H","~$fulcro.client.data-fetch/load-action","^;K",false,"^6","fulcro/client/data_fetch.cljc","^:",21,"^;[",["^ ","^;K",false,"^;P",4,"^;L",["^1;",[["^;E","^<<","^<Y"],["^;E","^<<","^<Y","^;I"]]],"^;C",["^1;",[["^;E","^<<","^<Y"],["^;E","^<<","^<Y","^;I"]]],"^;O",["^1;",[null,null]]],"^;L",["^1;",[["^;E","^<<","^<Y"],["^;E","^<<","^<Y","^;I"]]],"^;N",null,"^;O",["^1;",[null,null]],"^8",4,"^7",194,"^9",194,"^;P",4,"^;Q",true,"^;C",["^1;",[["^;E","^<<","^<Y"],["^;E","^<<","^<Y","^;I"]]],"^<7","\n     See `load` for descriptions of parameters and config.\n\n     Queue up a remote load from within an already-running mutation. Similar to `load`, but usable from\n     within a mutation. IMPORTANT: Make sure you specify the `:remote` parameter to this function, as\n     well as including a `remote-load` for that remote.\n\n     Note the `:refresh` parameter is supported, and defaults to empty. If you want anything to refresh other than\n     the targeted component you will want to include the :refresh parameter.\n\n     To use this function make sure your mutation specifies a return value with a remote. The remote\n     should use the helper function `remote-load` as it's value:\n\n     { :remote (df/remote-load env)\n       ; NOTE: :remote must be the keyword name of a legal remote in your system; however,\n       ; You must still name the remote in the `load-action` if it is something other than default.\n       :action (fn []\n          (load-action env ...)\n          ; other optimistic updates/state changes)}\n\n     `env` is the mutation's environment parameter."],"~$load-mutation",["^ ","^;A",null,"^5",["^ ","^6","fulcro/client/data_fetch.cljc","^7",107,"^8",7,"^9",107,"^:",20,"^;C",["^1;",["^;D",["^1;",[["~$load-args"]]]]],"^<7","Generates a transaction expression for a load mutation. It includes a follow-on read for :ui/loading-data. The args\n  must be a map of the parameters usable from `load`. Returns a complete tx (as a vector), not just the mutation\n  since follow-on reads are part of the mutation. You may use `concat` to join this with additional expressions."],"^H","~$fulcro.client.data-fetch/load-mutation","^;K",false,"^6","fulcro/client/data_fetch.cljc","^:",20,"^;L",["^1;",[["^=0"]]],"^;N",null,"^;O",["^1;",[null,null]],"^8",1,"^7",107,"^9",107,"^;P",1,"^;Q",true,"^;C",["^1;",["^;D",["^1;",[["^=0"]]]]],"^<7","Generates a transaction expression for a load mutation. It includes a follow-on read for :ui/loading-data. The args\n  must be a map of the parameters usable from `load`. Returns a complete tx (as a vector), not just the mutation\n  since follow-on reads are part of the mutation. You may use `concat` to join this with additional expressions."],"^<E",["^ ","^;A",null,"^5",["^ ","^6","fulcro/client/data_fetch.cljc","^7",447,"^8",7,"^9",447,"^:",15,"^;C",["^1;",["^;D",["^1;",[[["^ ","^;F",["~$action"]]]]]]],"^<7","Mutation: Add a fallback to the current tx. `action` is the symbol of the mutation to run if this tx fails due to\n  network or server errors (bad status codes)."],"^H","~$fulcro.client.data-fetch/fallback","^;K",false,"^6","fulcro/client/data_fetch.cljc","^:",15,"^;L",["^1;",[["~$p__46660"]]],"^;N",null,"^;O",["^1;",[null,null]],"^8",1,"^7",447,"^9",447,"^;P",1,"^;Q",true,"^;C",["^1;",["^;D",["^1;",[[["^ ","^;F",["^=2"]]]]]]],"^<7","Mutation: Add a fallback to the current tx. `action` is the symbol of the mutation to run if this tx fails due to\n  network or server errors (bad status codes)."],"~$loading?",["^ ","^;A",null,"^5",["^ ","^6","fulcro/client/data_fetch.cljc","^7",330,"^8",7,"^9",330,"^:",15,"^;C",["^1;",["^;D",["^1;",[["^;V"]]]]]],"^H","~$fulcro.client.data-fetch/loading?","^;K",false,"^6","fulcro/client/data_fetch.cljc","^:",15,"^;L",["^1;",[["^;V"]]],"^;N",null,"^;O",["^1;",[null,null]],"^8",1,"^7",330,"^9",330,"^;P",1,"^;Q",true,"^;C",["^1;",["^;D",["^1;",[["^;V"]]]]]],"~$load-field-action",["^ ","^;A",null,"^5",["^ ","^6","fulcro/client/data_fetch.cljc","^7",273,"^8",7,"^9",273,"^:",24,"^;C",["^1;",["^;D",["^1;",[["~$env-or-app-state","~$component-class","~$ident","~$field","~$&","^<@"]]]]],"^<7","Queue up a remote load of a component's field from within an already-running mutation. Similar to `load-field`\n  but usable from within a mutation. Note the `:refresh` parameter is supported, and defaults to nothing, even for\n  fields, in actions. If you want anything to refresh other than the targeted component you will want to use the\n  :refresh parameter.\n\n  `params` can be a map or named parameters, just like in `load-field`.\n\n  To use this function make sure your mutation specifies a return value with a remote. The remote\n  should use the helper function `remote-load` as it's value:\n\n  { :remote (df/remote-load env)\n    ; NOTE: :remote must be the keyword name of a legal remote in your system; however,\n    ; You must still name the remote in the `load-action` if it is something other than default.\n    :action (fn []\n       (load-field-action ...)\n       ; other optimistic updates/state changes)}\n\n  It is preferable that you use `env` instead of `app-state` for the first argument, as this allows more details to\n  be available for post mutations and fallbacks.\n  ","^;[",["^ ","^;K",true,"^;P",4,"^;L",[["^1;",["^=8","^=9","^=:","^=;","^<@"]]],"^;C",["^1;",[["^=8","^=9","^=:","^=;","~$&","^<@"]]],"^;O",["^1;",[null]]]],"^H","~$fulcro.client.data-fetch/load-field-action","^;K",true,"^6","fulcro/client/data_fetch.cljc","^:",24,"^;[",["^ ","^;K",true,"^;P",4,"^;L",[["^1;",["^=8","^=9","^=:","^=;","^<@"]]],"^;C",["^1;",[["^=8","^=9","^=:","^=;","~$&","^<@"]]],"^;O",["^1;",[null]]],"^;L",[["^1;",["^=8","^=9","^=:","^=;","^<@"]]],"^;N",null,"^;O",["^1;",[null]],"^8",1,"^7",273,"^9",273,"^;P",4,"^;Q",true,"^;C",["^1;",[["^=8","^=9","^=:","^=;","~$&","^<@"]]],"^<7","Queue up a remote load of a component's field from within an already-running mutation. Similar to `load-field`\n  but usable from within a mutation. Note the `:refresh` parameter is supported, and defaults to nothing, even for\n  fields, in actions. If you want anything to refresh other than the targeted component you will want to use the\n  :refresh parameter.\n\n  `params` can be a map or named parameters, just like in `load-field`.\n\n  To use this function make sure your mutation specifies a return value with a remote. The remote\n  should use the helper function `remote-load` as it's value:\n\n  { :remote (df/remote-load env)\n    ; NOTE: :remote must be the keyword name of a legal remote in your system; however,\n    ; You must still name the remote in the `load-action` if it is something other than default.\n    :action (fn []\n       (load-field-action ...)\n       ; other optimistic updates/state changes)}\n\n  It is preferable that you use `env` instead of `app-state` for the first argument, as this allows more details to\n  be available for post mutations and fallbacks.\n  "],"~$lazily-loaded",["^ ","^;A",null,"^5",["^ ","^6","fulcro/client/data_fetch.cljc","^7",335,"^8",7,"^9",335,"^:",20,"^;C",["^1;",["^;D",["^1;",[["~$data-render","~$props","~$&",["^ ","^;F",["~$ready-render","~$loading-render","~$failed-render","~$not-present-render"],"^<K",["^ ","^=A",["^1;",["~$fn",["~$_"],"Loading..."]],"^=@",["^1;",["^=D",["~$_"],"Queued"]],"^=B",["^1;",["^=D",["~$_"],"Loading error!"]]]]]]]]],"^<7","Custom rendering for use while data is being lazily loaded using the data fetch methods\n  load-collection and load-field.\n\n  `data-render` : the render method to call once the data has been successfully loaded from\n  the server. Can be a factory method or a React rendering function.\n\n  `props` : the React properties for the element to be loaded.\n\n  Optional:\n\n  `ready-render` : the render method to call when the desired data has been marked as ready\n  to load, but the server request has not yet been sent.\n\n  `loading-render` : render method once the server request has been sent, and UI is waiting\n  on the response\n\n  `failed-render` : render method when the server returns a failure state for the requested data\n\n  `not-present-render` : called when props is nil (helpful for differentiating between a nil and\n  empty response from the server).\n\n  Example Usage:\n\n  ```\n  (defui Thing\n    static prim/IQuery\n    (query [this] [{:thing2 (prim/get-query Thing2)}])\n    Object\n    (componentDidMount [this]\n       (load-field this :thing2))\n\n    (render [this]\n      (let [thing2 (:thing2 (prim/props this))]\n        (lazily-loaded ui-thing2 thing2))))\n\n  (defui Thing2\n    static prim/IQuery\n    (query [this] [:ui/fetch-state])\n    Object\n    (render [this]\n      (display-thing-2))\n\n  (def ui-thing2 (prim/factory Thing2))\n  ```","^;[",["^ ","^;K",true,"^;P",2,"^;L",[["^1;",["^=>","^=?",["^ ","^;F",["^=@","^=A","^=B","^=C"],"^<K",["^ ","^=A",["^1;",["^=D",["~$_"],"Loading..."]],"^=@",["^1;",["^=D",["~$_"],"Queued"]],"^=B",["^1;",["^=D",["~$_"],"Loading error!"]]]]]]],"^;C",["^1;",[["^=>","^=?","~$&",["^ ","^;F",["^=@","^=A","^=B","^=C"],"^<K",["^ ","^=A",["^1;",["^=D",["~$_"],"Loading..."]],"^=@",["^1;",["^=D",["~$_"],"Queued"]],"^=B",["^1;",["^=D",["~$_"],"Loading error!"]]]]]]],"^;O",["^1;",[null]]]],"^H","~$fulcro.client.data-fetch/lazily-loaded","^;K",true,"^6","fulcro/client/data_fetch.cljc","^:",20,"^;[",["^ ","^;K",true,"^;P",2,"^;L",[["^1;",["^=>","^=?",["^ ","^;F",["^=@","^=A","^=B","^=C"],"^<K",["^ ","^=A",["^1;",["^=D",["~$_"],"Loading..."]],"^=@",["^1;",["^=D",["~$_"],"Queued"]],"^=B",["^1;",["^=D",["~$_"],"Loading error!"]]]]]]],"^;C",["^1;",[["^=>","^=?","~$&",["^ ","^;F",["^=@","^=A","^=B","^=C"],"^<K",["^ ","^=A",["^1;",["^=D",["~$_"],"Loading..."]],"^=@",["^1;",["^=D",["~$_"],"Queued"]],"^=B",["^1;",["^=D",["~$_"],"Loading error!"]]]]]]],"^;O",["^1;",[null]]],"^;L",[["^1;",["^=>","^=?",["^ ","^;F",["^=@","^=A","^=B","^=C"],"^<K",["^ ","^=A",["^1;",["^=D",["~$_"],"Loading..."]],"^=@",["^1;",["^=D",["~$_"],"Queued"]],"^=B",["^1;",["^=D",["~$_"],"Loading error!"]]]]]]],"^;N",null,"^;O",["^1;",[null]],"^8",1,"^7",335,"^9",335,"^;P",2,"^;Q",true,"^;C",["^1;",[["^=>","^=?","~$&",["^ ","^;F",["^=@","^=A","^=B","^=C"],"^<K",["^ ","^=A",["^1;",["^=D",["~$_"],"Loading..."]],"^=@",["^1;",["^=D",["~$_"],"Queued"]],"^=B",["^1;",["^=D",["~$_"],"Loading error!"]]]]]]],"^<7","Custom rendering for use while data is being lazily loaded using the data fetch methods\n  load-collection and load-field.\n\n  `data-render` : the render method to call once the data has been successfully loaded from\n  the server. Can be a factory method or a React rendering function.\n\n  `props` : the React properties for the element to be loaded.\n\n  Optional:\n\n  `ready-render` : the render method to call when the desired data has been marked as ready\n  to load, but the server request has not yet been sent.\n\n  `loading-render` : render method once the server request has been sent, and UI is waiting\n  on the response\n\n  `failed-render` : render method when the server returns a failure state for the requested data\n\n  `not-present-render` : called when props is nil (helpful for differentiating between a nil and\n  empty response from the server).\n\n  Example Usage:\n\n  ```\n  (defui Thing\n    static prim/IQuery\n    (query [this] [{:thing2 (prim/get-query Thing2)}])\n    Object\n    (componentDidMount [this]\n       (load-field this :thing2))\n\n    (render [this]\n      (let [thing2 (:thing2 (prim/props this))]\n        (lazily-loaded ui-thing2 thing2))))\n\n  (defui Thing2\n    static prim/IQuery\n    (query [this] [:ui/fetch-state])\n    Object\n    (render [this]\n      (display-thing-2))\n\n  (def ui-thing2 (prim/factory Thing2))\n  ```"],"~$load-field",["^ ","^;A",null,"^5",["^ ","^6","fulcro/client/data_fetch.cljc","^7",223,"^8",7,"^9",223,"^:",17,"^;C",["^1;",["^;D",["^1;",[["^;Y","^=;","~$&","^<@"]]]]],"^<7","Load a field of the current component. Runs `prim/transact!`.\n\n  Parameters\n  - `component`: The component (**instance**, not class). This component MUST have an Ident.\n  - `field`: A field on the component's query that you wish to load.\n  - `parameters` : A map of: (will also accept as named parameters)\n\n    - `without`: See `load`\n    - `params`: See `load`\n    - `post-mutation`: See `load`\n    - `post-mutation-params`: See `load`\n    - `parallel`: See `load`\n    - `fallback`: See `load`\n    - `marker`: See `load`\n    - `remote`: See `load`\n    - `refresh`: See `load`\n    - `abort-id`: See `load`\n\n  NOTE: The :ui/loading-data attribute is always included in refresh. This means you probably don't want to\n  query for that attribute near the root of your UI. Instead, create some leaf component with an ident that queries for :ui/loading-data\n  using a link  query (e.g. `[:ui/loading-data '_]`). The presence of the ident on components will enable query optimization, which can\n  improve your frame rate because we will not have to run a full root query.\n\n  WARNING: If you're using dynamic queries, you won't really know what factory your parent is using,\n  nor can you pass it as a parameter to this function. Therefore, it is not recommended to use load-field from within\n  a component that has a dynamic query unless you can base it on the original static query (which\n  is what this function will use).\n  ","^;[",["^ ","^;K",true,"^;P",2,"^;L",[["^1;",["^;Y","^=;","^<@"]]],"^;C",["^1;",[["^;Y","^=;","~$&","^<@"]]],"^;O",["^1;",[null]]]],"^H","~$fulcro.client.data-fetch/load-field","^;K",true,"^6","fulcro/client/data_fetch.cljc","^:",17,"^;[",["^ ","^;K",true,"^;P",2,"^;L",[["^1;",["^;Y","^=;","^<@"]]],"^;C",["^1;",[["^;Y","^=;","~$&","^<@"]]],"^;O",["^1;",[null]]],"^;L",[["^1;",["^;Y","^=;","^<@"]]],"^;N",null,"^;O",["^1;",[null]],"^8",1,"^7",223,"^9",223,"^;P",2,"^;Q",true,"^;C",["^1;",[["^;Y","^=;","~$&","^<@"]]],"^<7","Load a field of the current component. Runs `prim/transact!`.\n\n  Parameters\n  - `component`: The component (**instance**, not class). This component MUST have an Ident.\n  - `field`: A field on the component's query that you wish to load.\n  - `parameters` : A map of: (will also accept as named parameters)\n\n    - `without`: See `load`\n    - `params`: See `load`\n    - `post-mutation`: See `load`\n    - `post-mutation-params`: See `load`\n    - `parallel`: See `load`\n    - `fallback`: See `load`\n    - `marker`: See `load`\n    - `remote`: See `load`\n    - `refresh`: See `load`\n    - `abort-id`: See `load`\n\n  NOTE: The :ui/loading-data attribute is always included in refresh. This means you probably don't want to\n  query for that attribute near the root of your UI. Instead, create some leaf component with an ident that queries for :ui/loading-data\n  using a link  query (e.g. `[:ui/loading-data '_]`). The presence of the ident on components will enable query optimization, which can\n  improve your frame rate because we will not have to run a full root query.\n\n  WARNING: If you're using dynamic queries, you won't really know what factory your parent is using,\n  nor can you pass it as a parameter to this function. Therefore, it is not recommended to use load-field from within\n  a component that has a dynamic query unless you can base it on the original static query (which\n  is what this function will use).\n  "],"~$fallback-action*",["^ ","^;A",null,"^5",["^ ","^6","fulcro/client/data_fetch.cljc","^7",430,"^8",8,"^9",430,"^:",24,"^;B",true,"^;C",["^1;",["^;D",["^1;",[["^;E",["^ ","^;F",["^=2"],"^1@","^<@"]]]]]]],"^;B",true,"^H","~$fulcro.client.data-fetch/fallback-action*","^;K",false,"^6","fulcro/client/data_fetch.cljc","^:",24,"^;L",["^1;",[["^;E","~$p__46644"]]],"^;N",null,"^;O",["^1;",[null,null]],"^8",1,"^7",430,"^9",430,"^;P",2,"^;Q",true,"^;C",["^1;",["^;D",["^1;",[["^;E",["^ ","^;F",["^=2"],"^1@","^<@"]]]]]]],"~$marker-table",["^ ","^H","~$fulcro.client.data-fetch/marker-table","^6","fulcro/client/data_fetch.cljc","^7",20,"^8",1,"^9",20,"^:",18,"^5",["^ ","^6","fulcro/client/data_fetch.cljc","^7",20,"^8",6,"^9",20,"^:",18],"^<7","The name of the table in which fulcro load markers are stored","~:tag","~$cljs.core/Keyword"],"~$computed-refresh",["^ ","^;A",null,"^5",["^ ","^6","fulcro/client/data_fetch.cljc","^7",41,"^8",8,"^9",41,"^:",24,"^;B",true,"^;C",["^1;",["^;D",["^1;",[["~$explicit-refresh","~$load-key","^;S"]]]]],"^<7","Computes the refresh for the load by ensuring the loaded data is on the\n  list of things to re-render."],"^;B",true,"^H","~$fulcro.client.data-fetch/computed-refresh","^;K",false,"^6","fulcro/client/data_fetch.cljc","^:",24,"^;L",["^1;",[["^=P","^=Q","^;S"]]],"^;N",null,"^;O",["^1;",[null,null]],"^8",1,"^7",41,"^9",41,"^;P",3,"^;Q",true,"^;C",["^1;",["^;D",["^1;",[["^=P","^=Q","^;S"]]]]],"^<7","Computes the refresh for the load by ensuring the loaded data is on the\n  list of things to re-render."],"~$append-to",["^ ","^;A",null,"^5",["^ ","^6","fulcro/client/data_fetch.cljc","^7",30,"^8",7,"^9",30,"^:",16,"^;C",["^1;",["^;D",["^1;",[["^;S"]]]]]],"^H","~$fulcro.client.data-fetch/append-to","^;K",false,"^6","fulcro/client/data_fetch.cljc","^:",16,"^;L",["^1;",[["^;S"]]],"^;N",null,"^;O",["^1;",[null,null]],"^8",1,"^7",30,"^9",30,"^;P",1,"^;Q",true,"^;C",["^1;",["^;D",["^1;",[["^;S"]]]]]],"~$prepend-to",["^ ","^;A",null,"^5",["^ ","^6","fulcro/client/data_fetch.cljc","^7",27,"^8",7,"^9",27,"^:",17,"^;C",["^1;",["^;D",["^1;",[["^;S"]]]]]],"^H","~$fulcro.client.data-fetch/prepend-to","^;K",false,"^6","fulcro/client/data_fetch.cljc","^:",17,"^;L",["^1;",[["^;S"]]],"^;N",null,"^;O",["^1;",[null,null]],"^8",1,"^7",27,"^9",27,"^;P",1,"^;Q",true,"^;C",["^1;",["^;D",["^1;",[["^;S"]]]]]],"~$remote-load",["^ ","^;A",null,"^5",["^ ","^6","fulcro/client/data_fetch.cljc","^7",318,"^8",7,"^9",318,"^:",18,"^;C",["^1;",["^;D",["^1;",[["~$parsing-env"]]]]],"^<7","Returns the correct value for the `:remote` side of a mutation that should act as a\n  trigger for remote loads. Must be used in conjunction with running `load-action` or\n  `load-field-action` in the `:action` side of the mutation (which queues the exact things to\n  load)."],"^H","~$fulcro.client.data-fetch/remote-load","^;K",false,"^6","fulcro/client/data_fetch.cljc","^:",18,"^;L",["^1;",[["^=X"]]],"^;N",null,"^;O",["^1;",[null,null]],"^8",1,"^7",318,"^9",318,"^;P",1,"^;Q",true,"^;C",["^1;",["^;D",["^1;",[["^=X"]]]]],"^<7","Returns the correct value for the `:remote` side of a mutation that should act as a\n  trigger for remote loads. Must be used in conjunction with running `load-action` or\n  `load-field-action` in the `:action` side of the mutation (which queues the exact things to\n  load)."]],"^19",["^ ","^Z","^Z","^P","^Q","^V","^W","^Q","^Q","^D","^D","^W","^W","~$m","^D"],"~:cljs.analyzer/constants",["^ ","^13",["^F",["~$fulcro/load","^<L","~:update-query","~:fulcro.client.primitives/ref","^=3","~$fulcro.client.data-fetch/deferred-transaction","~:key","~:refresh","~:else","~:not-present-render","~:ref","~:ui/fetch-state","~:parallel","~:warn","~:fallback","~:marker","~:value","^6","~:reconciler","~:params","~:ast","~:field","~:execute","~:state","~:env","~:ui.fulcro.client.data-fetch.load-markers/by-id","~:component","~:post-mutation","~:otherwise","~:without","~:initialize","~:parser","^;F","~:tx","~$fulcro.client.data-fetch/run-deferred-transaction","^7","~:failed-render","~:class","^<>","~:ident","~:dispatch-key","~:loading-render","~:post-mutation-params","~:focus","~:action","~:error","~:ready-render","~:ui/loading-data","~:target","~:fulcro.client.impl.data-fetch/deferred-transaction","~:query","~:abort-id","~$tx/fallback"]],"~:order",["^>5","^>Y","^?0","^<L","^>0","^>4","^>9","^>;","^><","^>?","^>G","^>I","^>J","^>S","^>T","^6","^7","^>:","^>[","^>O","^=[","^>X","^>>","^>C","^>D","^>A","^>P","^>E","^>@","^>3","^>Q","^>W","^>R","^>N","^>6","^>8","^>V","^>U","^<>","^>M","^>L","^>7","^>2","^>F","^>H","^>Z","^>B","^?1","^>1","^=3","^>K","^>=","^;F"]],"^1A",["^ ","^14",["^F",[]]],"^1B",["^ "],"^1C",["^[","^Z","^12","^W","^S","^U","^D","^Q","^Y","^10","^O"]],"^K","^I","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^7J",[["^?5","~:static-fns"],true,["^?5","~:elide-asserts"],false,["^?5","~:optimize-constants"],null,["^?5","~:external-config"],null,["^?5","~:tooling-config"],null,["^?5","~:emit-constants"],null,["^?5","~:infer-externs"],true,["^?5","^1J"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^?5","~:fn-invoke-direct"],null,["^?5","^1L"],"/dev/null"]]]