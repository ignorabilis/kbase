["^ ","~:output",["^ ","~:js","goog.provide('garden.compression');\r\ngoog.require('cljs.core');\r\n/**\r\n * Return a function which when given a string will return a map\r\n *   containing the chunk of text matched by re, it's size, and tag.\r\n */\r\ngarden.compression.token_fn = (function garden$compression$token_fn(p__28022){\r\nvar vec__28023 = p__28022;\r\nvar tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28023,(0),null);\r\nvar re = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__28023,(1),null);\r\nreturn ((function (vec__28023,tag,re){\r\nreturn (function (s){\r\nvar temp__5457__auto__ = cljs.core.re_find(re,s);\r\nif(cljs.core.truth_(temp__5457__auto__)){\r\nvar chunk = temp__5457__auto__;\r\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),tag,new cljs.core.Keyword(null,\"chunk\",\"chunk\",-1191159620),chunk,new cljs.core.Keyword(null,\"size\",\"size\",1098693007),cljs.core.count(chunk)], null);\r\n} else {\r\nreturn null;\r\n}\r\n});\r\n;})(vec__28023,tag,re))\r\n});\r\n/**\r\n * Given an arbitrary number of [tag regex] pairs, return a function\r\n *   which when given a string s will return the first matching token of s.\r\n *   Token precedence is determined by the order of the pairs. The first\r\n *   and last pairs have the highest and lowest precedence respectively.\r\n */\r\ngarden.compression.tokenizer = (function garden$compression$tokenizer(var_args){\r\nvar args__4534__auto__ = [];\r\nvar len__4531__auto___28042 = arguments.length;\r\nvar i__4532__auto___28043 = (0);\r\nwhile(true){\r\nif((i__4532__auto___28043 < len__4531__auto___28042)){\r\nargs__4534__auto__.push((arguments[i__4532__auto___28043]));\r\n\r\nvar G__28046 = (i__4532__auto___28043 + (1));\r\ni__4532__auto___28043 = G__28046;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4535__auto__ = ((((0) < args__4534__auto__.length))?(new cljs.core.IndexedSeq(args__4534__auto__.slice((0)),(0),null)):null);\r\nreturn garden.compression.tokenizer.cljs$core$IFn$_invoke$arity$variadic(argseq__4535__auto__);\r\n});\r\n\r\ngarden.compression.tokenizer.cljs$core$IFn$_invoke$arity$variadic = (function (tags_PLUS_regexes){\r\nvar fs = cljs.core.map.cljs$core$IFn$_invoke$arity$2(garden.compression.token_fn,tags_PLUS_regexes);\r\nreturn ((function (fs){\r\nreturn (function (s){\r\nreturn cljs.core.some(((function (fs){\r\nreturn (function (p1__28030_SHARP_){\r\nreturn (p1__28030_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__28030_SHARP_.cljs$core$IFn$_invoke$arity$1(s) : p1__28030_SHARP_.call(null,s));\r\n});})(fs))\r\n,fs);\r\n});\r\n;})(fs))\r\n});\r\n\r\ngarden.compression.tokenizer.cljs$lang$maxFixedArity = (0);\r\n\r\n/** @this {Function} */\r\ngarden.compression.tokenizer.cljs$lang$applyTo = (function (seq28034){\r\nvar self__4519__auto__ = this;\r\nreturn self__4519__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq28034));\r\n});\r\n\r\n/**\r\n * Tokenizer used during stylesheet compression.\r\n */\r\ngarden.compression.stylesheet_tokenizer = garden.compression.tokenizer.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),/^\\\"(?:\\\\.|[^\\\"])*\\\"/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"r-brace\",\"r-brace\",-1335738887),/^\\s*\\{\\s*/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"l-brace\",\"l-brace\",613286657),/^;?\\s*}/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"r-paren\",\"r-paren\",-1688338021),/^\\s*\\(\\s*/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"l-paren\",\"l-paren\",2052672514),/^\\s*\\)/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"comma\",\"comma\",1699024745),/^,\\s*/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"colon\",\"colon\",-965200945),/^:\\s*/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"semicolon\",\"semicolon\",797086549),/^;/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"space+\",\"space+\",378127624),/^ +/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"white-space+\",\"white-space+\",1452157162),/^\\s+/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"any\",\"any\",1705907423),/^./], null)], 0));\r\n/**\r\n * Compress a string of CSS using a basic compressor.\r\n */\r\ngarden.compression.compress_stylesheet = (function garden$compression$compress_stylesheet(stylesheet){\r\nvar s1 = stylesheet;\r\nvar s2 = \"\";\r\nwhile(true){\r\nvar temp__5455__auto__ = (garden.compression.stylesheet_tokenizer.cljs$core$IFn$_invoke$arity$1 ? garden.compression.stylesheet_tokenizer.cljs$core$IFn$_invoke$arity$1(s1) : garden.compression.stylesheet_tokenizer.call(null,s1));\r\nif(cljs.core.truth_(temp__5455__auto__)){\r\nvar map__28055 = temp__5455__auto__;\r\nvar map__28055__$1 = ((((!((map__28055 == null)))?(((((map__28055.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__28055.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__28055):map__28055);\r\nvar tag = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28055__$1,new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223));\r\nvar chunk = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28055__$1,new cljs.core.Keyword(null,\"chunk\",\"chunk\",-1191159620));\r\nvar size = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28055__$1,new cljs.core.Keyword(null,\"size\",\"size\",1098693007));\r\nvar G__28060 = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s1,size);\r\nvar G__28061 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(s2),cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var G__28059 = tag;\r\nvar G__28059__$1 = (((G__28059 instanceof cljs.core.Keyword))?G__28059.fqn:null);\r\nswitch (G__28059__$1) {\r\ncase \"string\":\r\nreturn chunk;\r\n\r\nbreak;\r\ncase \"r-brace\":\r\nreturn \"{\";\r\n\r\nbreak;\r\ncase \"l-brace\":\r\nreturn \"}\";\r\n\r\nbreak;\r\ncase \"r-paren\":\r\nreturn \"(\";\r\n\r\nbreak;\r\ncase \"l-paren\":\r\nreturn \")\";\r\n\r\nbreak;\r\ncase \"comma\":\r\nreturn \",\";\r\n\r\nbreak;\r\ncase \"semi-comma\":\r\nreturn \";\";\r\n\r\nbreak;\r\ncase \"colon\":\r\nreturn \":\";\r\n\r\nbreak;\r\ncase \"space+\":\r\nreturn \" \";\r\n\r\nbreak;\r\ncase \"white-space+\":\r\nreturn \"\";\r\n\r\nbreak;\r\ndefault:\r\nreturn chunk;\r\n\r\n}\r\n})())].join('');\r\ns1 = G__28060;\r\ns2 = G__28061;\r\ncontinue;\r\n} else {\r\nreturn s2;\r\n}\r\nbreak;\r\n}\r\n});\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Stylesheet compression utilities.","~:file","garden/compression.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",23],"~:ns-aliases",["^ ","~$clojure.core.async","~$cljs.core.async","~$clojure.stacktrace","~$cljs.stacktrace","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$garden.compression","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^L","~$goog","^M"],"~:seen",["^E",[]],"~:uses",null,"~:require-macros",["^ ","^L","^L"],"~:form",["~#list",["~$ns","^G","Stylesheet compression utilities."]],"~:js-deps",["^ "],"~:deps",["^M","^L"]],"^I","^G","~:resource-id",["~:shadow.build.classpath/resource","garden/compression.cljc"],"~:compiled-at",1537360773162,"~:resource-name","garden/compression.cljc","~:warnings",[],"~:source","(ns garden.compression\n  \"Stylesheet compression utilities.\"\n  #?(:clj\n     (:import (java.io StringReader StringWriter)\n               (com.yahoo.platform.yui.compressor CssCompressor))))\n\n;; ---------------------------------------------------------------------\n;; Clojure\n\n;; Clojure stylesheet compression leverages the YUI Compressor as it\n;; provides a performant and excellent solution to CSS compression.\n\n#?(:clj\n   (defn compress-stylesheet\n     \"Compress a stylesheet with the YUI CSSCompressor. Set\n  line-break-position to -1 for no line breaks, 0 for a line break\n  after each rule, and n > 0 for a line break after at most n\n  columns. Defaults to no -1\"\n     ([stylesheet]\n      (compress-stylesheet stylesheet -1))\n     ([^String stylesheet line-break-position]\n      (with-open [reader (StringReader. stylesheet)\n                  writer (StringWriter.)]\n        (doto (CssCompressor. reader)\n          (.compress writer line-break-position))\n        (str writer)))))\n\n;; ---------------------------------------------------------------------\n;; ClojureScript\n\n;; ClojureScript stylesheet compression uses a simple tokenizer and\n;; loop/recur to construct a new string of minified CSS.\n\n#?(:cljs\n   (defn- token-fn\n     \"Return a function which when given a string will return a map\n  containing the chunk of text matched by re, it's size, and tag.\"\n     [[tag re]]\n     (fn [s]\n       (when-let [chunk (re-find re s)]\n         {:tag tag\n          :chunk chunk\n          :size (count chunk)}))))\n\n#?(:cljs\n   (defn- tokenizer\n     \"Given an arbitrary number of [tag regex] pairs, return a function\n  which when given a string s will return the first matching token of s.\n  Token precedence is determined by the order of the pairs. The first\n  and last pairs have the highest and lowest precedence respectively.\"\n     [& tags+regexes]\n     (let [fs (map token-fn tags+regexes)]\n       (fn [s]\n         (some #(% s) fs)))))\n\n#?(:cljs\n   (def\n     ^{:private true\n       :doc \"Tokenizer used during stylesheet compression.\"}\n     stylesheet-tokenizer\n     (tokenizer\n      ;; String literals\n      [:string #\"^\\\"(?:\\\\.|[^\\\"])*\\\"\"]\n      ;; Delimiters\n      [:r-brace #\"^\\s*\\{\\s*\"]\n      [:l-brace #\"^;?\\s*}\"]\n      [:r-paren #\"^\\s*\\(\\s*\"]\n      [:l-paren #\"^\\s*\\)\"]\n      [:comma #\"^,\\s*\"]\n      [:colon #\"^:\\s*\"]\n      [:semicolon #\"^;\"]\n      ;; White space\n      [:space+ #\"^ +\"]\n      [:white-space+ #\"^\\s+\"]\n      ;; Everything else\n      [:any #\"^.\"])))\n\n#?(:cljs\n   (defn compress-stylesheet\n     \"Compress a string of CSS using a basic compressor.\"\n     [stylesheet]\n     (loop [s1 stylesheet s2 \"\"]\n       (if-let [{:keys [tag chunk size]} (stylesheet-tokenizer s1)]\n         (recur (subs s1 size)\n                (str s2 (case tag\n                          :string chunk\n                          :r-brace \"{\"\n                          :l-brace \"}\"\n                          :r-paren \"(\"\n                          :l-paren \")\"\n                          :comma \",\"\n                          :semi-comma \";\"\n                          :colon \":\"\n                          :space+ \" \"\n                          :white-space+ \"\"\n                          chunk)))\n         s2))))\n","~:reader-features",["^E",["~:cljs"]],"~:source-map",["^ ","~i34",["^ ","~i3",[["^ ","~:gcol",0,"~:gline",2],["^ ","^14",30,"^15",6],["^ ","^14",68,"^15",6,"^F","p__28022"],["^ ","^14",0,"^15",7],["^ ","^14",0,"^15",7],["^ ","^14",4,"^15",7,"^F","vec__28023"],["^ ","^14",17,"^15",7,"^F","p__28022"],["^ ","^14",10,"^15",8],["^ ","^14",10,"^15",8,"^F","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^14",54,"^15",8,"^F","vec__28023"],["^ ","^14",65,"^15",8],["^ ","^14",69,"^15",8],["^ ","^14",9,"^15",9],["^ ","^14",9,"^15",9,"^F","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^14",53,"^15",9,"^F","vec__28023"],["^ ","^14",64,"^15",9],["^ ","^14",68,"^15",9],["^ ","^14",0,"^15",10]],"~i10",[["^ ","^14",0,"^15",6,"^F","garden.compression/token-fn"]]],"~i37",["^ ","~i7",[["^ ","^14",4,"^15",8,"^F","tag"]],"~i11",[["^ ","^14",4,"^15",9,"^F","re"]]],"~i38",["^ ","~i5",[["^ ","^14",0,"^15",10],["^ ","^14",0,"^15",12]],"^16",[["^ ","^14",18,"^15",11,"^F","s"]]],"~i39",["^ ","~i7",[["^ ","^14",0,"^15",12],["^ ","^14",4,"^15",12,"^F","temp__5457__auto__"],["^ ","^14",0,"^15",13],["^ ","^14",0,"^15",13],["^ ","^14",20,"^15",13,"^F","temp__5457__auto__"],["^ ","^14",0,"^15",14],["^ ","^14",0,"^15",14],["^ ","^14",12,"^15",14,"^F","temp__5457__auto__"],["^ ","^14",0,"^15",15],["^ ","^14",0,"^15",15],["^ ","^14",50,"^15",15],["^ ","^14",106,"^15",15],["^ ","^14",168,"^15",15],["^ ","^14",0,"^15",17]],"~i18",[["^ ","^14",4,"^15",14,"^F","chunk"]],"~i24",[["^ ","^14",25,"^15",12]],"~i25",[["^ ","^14",25,"^15",12,"^F","cljs.core/re-find"]],"~i33",[["^ ","^14",43,"^15",12,"^F","re"]],"~i36",[["^ ","^14",46,"^15",12,"^F","s"]]],"~i40",["^ ","~i15",[["^ ","^14",102,"^15",15,"^F","tag"]]],"~i41",["^ ","~i17",[["^ ","^14",162,"^15",15,"^F","chunk"]]],"~i42",["^ ","~i16",[["^ ","^14",221,"^15",15]],"^1C",[["^ ","^14",221,"^15",15,"^F","cljs.core/count"]],"~i23",[["^ ","^14",237,"^15",15,"^F","chunk"]]],"~i45",["^ ","~i3",[["^ ","^14",0,"^15",22],["^ ","^14",0,"^15",22],["^ ","^14",31,"^15",28],["^ ","^14",70,"^15",28,"^F","var_args"],["^ ","^14",0,"^15",29],["^ ","^14",0,"^15",29],["^ ","^14",4,"^15",29,"^F","args__4534__auto__"],["^ ","^14",25,"^15",29],["^ ","^14",0,"^15",30],["^ ","^14",0,"^15",30],["^ ","^14",4,"^15",30,"^F","len__4531__auto__"],["^ ","^14",30,"^15",30],["^ ","^14",30,"^15",30],["^ ","^14",0,"^15",31],["^ ","^14",0,"^15",31],["^ ","^14",4,"^15",31,"^F","i__4532__auto__"],["^ ","^14",28,"^15",31],["^ ","^14",0,"^15",33],["^ ","^14",0,"^15",33],["^ ","^14",3,"^15",33],["^ ","^14",4,"^15",33,"^F","i__4532__auto__"],["^ ","^14",28,"^15",33,"^F","len__4531__auto__"],["^ ","^14",0,"^15",34],["^ ","^14",0,"^15",34],["^ ","^14",0,"^15",34,"^F","args__4534__auto__"],["^ ","^14",24,"^15",34],["^ ","^14",25,"^15",34],["^ ","^14",35,"^15",34,"^F","i__4532__auto__"],["^ ","^14",0,"^15",36],["^ ","^14",15,"^15",36],["^ ","^14",16,"^15",36,"^F","i__4532__auto__"],["^ ","^14",40,"^15",36],["^ ","^14",0,"^15",40],["^ ","^14",0,"^15",44],["^ ","^14",4,"^15",44,"^F","argseq__4535__auto__"],["^ ","^14",27,"^15",44],["^ ","^14",29,"^15",44],["^ ","^14",30,"^15",44],["^ ","^14",36,"^15",44],["^ ","^14",36,"^15",44,"^F","args__4534__auto__"],["^ ","^14",64,"^15",44],["^ ","^14",64,"^15",44],["^ ","^14",69,"^15",44,"^F","cljs.core/IndexedSeq"],["^ ","^14",90,"^15",44],["^ ","^14",90,"^15",44,"^F","args__4534__auto__"],["^ ","^14",115,"^15",44],["^ ","^14",120,"^15",44],["^ ","^14",124,"^15",44],["^ ","^14",131,"^15",44],["^ ","^14",0,"^15",45],["^ ","^14",0,"^15",45],["^ ","^14",7,"^15",45,"^F","garden.compression/tokenizer"],["^ ","^14",73,"^15",45,"^F","argseq__4535__auto__"],["^ ","^14",0,"^15",48],["^ ","^14",0,"^15",48],["^ ","^14",0,"^15",48],["^ ","^14",0,"^15",48,"^F","garden.compression/tokenizer"],["^ ","^14",68,"^15",48],["^ ","^14",0,"^15",49],["^ ","^14",0,"^15",61],["^ ","^14",0,"^15",61],["^ ","^14",0,"^15",61,"^F","garden.compression/tokenizer"],["^ ","^14",55,"^15",61],["^ ","^14",0,"^15",63],["^ ","^14",0,"^15",64],["^ ","^14",0,"^15",64],["^ ","^14",0,"^15",64,"^F","garden.compression/tokenizer"],["^ ","^14",49,"^15",64],["^ ","^14",60,"^15",64,"^F","seq28034"],["^ ","^14",0,"^15",65],["^ ","^14",0,"^15",65],["^ ","^14",4,"^15",65,"^F","self__4519__auto__"],["^ ","^14",25,"^15",65],["^ ","^14",0,"^15",66],["^ ","^14",0,"^15",66],["^ ","^14",7,"^15",66,"^F","self__4519__auto__"],["^ ","^14",63,"^15",66],["^ ","^14",63,"^15",66,"^F","cljs.core/seq"],["^ ","^14",77,"^15",66,"^F","seq28034"],["^ ","^14",0,"^15",69]],"^16",[["^ ","^14",0,"^15",28,"^F","garden.compression/tokenizer"]]],"~i50",["^ ","~i8",[["^ ","^14",79,"^15",48,"^F","tags+regexes"]]],"~i51",["^ ","~i5",[["^ ","^14",0,"^15",49],["^ ","^14",0,"^15",50]],"^18",[["^ ","^14",4,"^15",49,"^F","fs"]],"~i14",[["^ ","^14",9,"^15",49]],"^1A",[["^ ","^14",9,"^15",49,"^F","cljs.core.map.cljs$core$IFn$_invoke$arity$2"]],"~i19",[["^ ","^14",53,"^15",49,"^F","garden.compression/token-fn"]],"~i28",[["^ ","^14",81,"^15",49,"^F","tags+regexes"]]],"~i52",["^ ","~i7",[["^ ","^14",0,"^15",50],["^ ","^14",0,"^15",52]],"~i12",[["^ ","^14",18,"^15",51,"^F","s"]]],"~i53",["^ ","~i9",[["^ ","^14",0,"^15",52],["^ ","^14",22,"^15",52],["^ ","^14",18,"^15",53,"^F","p1__28030#"],["^ ","^14",0,"^15",54]],"^16",[["^ ","^14",7,"^15",52,"^F","cljs.core/some"]],"^1E",[["^ ","^14",0,"^15",54],["^ ","^14",8,"^15",54,"^F","p1__28030#"],["^ ","^14",57,"^15",54,"^F","p1__28030#"],["^ ","^14",109,"^15",54,"^F","p1__28030#"]],"^1K",[["^ ","^14",104,"^15",54,"^F","s"],["^ ","^14",136,"^15",54,"^F","s"]],"~i22",[["^ ","^14",1,"^15",56,"^F","fs"]]],"~i56",["^ ","~i3",[["^ ","^14",0,"^15",69]]],"~i59",["^ ","~i5",[["^ ","^14",0,"^15",72,"^F","garden.compression/stylesheet-tokenizer"]]],"~i60",["^ ","~i5",[["^ ","^14",42,"^15",72],["^ ","^14",158,"^15",72],["^ ","^14",241,"^15",72],["^ ","^14",299,"^15",72],["^ ","^14",329,"^15",72],["^ ","^14",412,"^15",72],["^ ","^14",472,"^15",72],["^ ","^14",492,"^15",72],["^ ","^14",575,"^15",72],["^ ","^14",633,"^15",72],["^ ","^14",651,"^15",72],["^ ","^14",734,"^15",72],["^ ","^14",794,"^15",72],["^ ","^14",814,"^15",72],["^ ","^14",897,"^15",72],["^ ","^14",956,"^15",72],["^ ","^14",973,"^15",72],["^ ","^14",1056,"^15",72],["^ ","^14",1111,"^15",72],["^ ","^14",1127,"^15",72],["^ ","^14",1210,"^15",72],["^ ","^14",1265,"^15",72],["^ ","^14",1281,"^15",72],["^ ","^14",1364,"^15",72],["^ ","^14",1426,"^15",72],["^ ","^14",1439,"^15",72],["^ ","^14",1522,"^15",72],["^ ","^14",1578,"^15",72],["^ ","^14",1592,"^15",72],["^ ","^14",1675,"^15",72],["^ ","^14",1744,"^15",72],["^ ","^14",1759,"^15",72],["^ ","^14",1842,"^15",72],["^ ","^14",1893,"^15",72]],"~i6",[["^ ","^14",42,"^15",72,"^F","garden.compression.tokenizer.cljs$core$IFn$_invoke$arity$variadic"]]],"~i78",["^ ","~i3",[["^ ","^14",0,"^15",73],["^ ","^14",41,"^15",76],["^ ","^14",0,"^15",77]],"~i9",[["^ ","^14",0,"^15",76,"^F","garden.compression/compress-stylesheet"]]],"~i80",["^ ","~i6",[["^ ","^14",90,"^15",76,"^F","stylesheet"]]],"~i81",["^ ","~i5",[["^ ","^14",0,"^15",77],["^ ","^14",9,"^15",78],["^ ","^14",0,"^15",80]],"^1N",[["^ ","^14",4,"^15",77,"^F","s1"]],"^1A",[["^ ","^14",9,"^15",77,"^F","stylesheet"]],"~i26",[["^ ","^14",4,"^15",78,"^F","s2"]]],"~i82",["^ ","~i7",[["^ ","^14",0,"^15",80],["^ ","^14",4,"^15",80,"^F","temp__5455__auto__"],["^ ","^14",0,"^15",81],["^ ","^14",0,"^15",81],["^ ","^14",20,"^15",81,"^F","temp__5455__auto__"],["^ ","^14",0,"^15",82],["^ ","^14",4,"^15",82,"^F","map__28055"],["^ ","^14",17,"^15",82,"^F","temp__5455__auto__"],["^ ","^14",4,"^15",83,"^F","map__28055"],["^ ","^14",21,"^15",83],["^ ","^14",23,"^15",83],["^ ","^14",25,"^15",83],["^ ","^14",27,"^15",83],["^ ","^14",28,"^15",83,"^F","map__28055"],["^ ","^14",42,"^15",83],["^ ","^14",50,"^15",83],["^ ","^14",52,"^15",83],["^ ","^14",54,"^15",83],["^ ","^14",55,"^15",83],["^ ","^14",55,"^15",83,"^F","map__28055"],["^ ","^14",104,"^15",83],["^ ","^14",115,"^15",83],["^ ","^14",116,"^15",83,"^F","cljs.core/PROTOCOL_SENTINEL"],["^ ","^14",148,"^15",83],["^ ","^14",148,"^15",83,"^F","map__28055"],["^ ","^14",179,"^15",83],["^ ","^14",184,"^15",83],["^ ","^14",191,"^15",83],["^ ","^14",199,"^15",83],["^ ","^14",199,"^15",83,"^F","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^14",245,"^15",83,"^F","cljs.core/hash-map"],["^ ","^14",264,"^15",83,"^F","map__28055"],["^ ","^14",276,"^15",83,"^F","map__28055"],["^ ","^14",10,"^15",84],["^ ","^14",10,"^15",84,"^F","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^14",54,"^15",84,"^F","map__28055"],["^ ","^14",69,"^15",84],["^ ","^14",12,"^15",85],["^ ","^14",12,"^15",85,"^F","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^14",56,"^15",85,"^F","map__28055"],["^ ","^14",71,"^15",85],["^ ","^14",11,"^15",86],["^ ","^14",11,"^15",86,"^F","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^14",55,"^15",86,"^F","map__28055"],["^ ","^14",70,"^15",86],["^ ","^14",0,"^15",87]],"^1<",[["^ ","^14",4,"^15",84,"^F","tag"]],"^1L",[["^ ","^14",4,"^15",85,"^F","chunk"]],"^13",[["^ ","^14",4,"^15",86,"^F","size"]],"^1B",[["^ ","^14",25,"^15",80]],"^1D",[["^ ","^14",26,"^15",80,"^F","garden.compression/stylesheet-tokenizer"],["^ ","^14",98,"^15",80,"^F","garden.compression/stylesheet-tokenizer"],["^ ","^14",174,"^15",80,"^F","garden.compression/stylesheet-tokenizer"]],"~i63",[["^ ","^14",168,"^15",80,"^F","s1"],["^ ","^14",224,"^15",80,"^F","s1"]]],"~i83",["^ ","~i9",[["^ ","^14",0,"^15",87]],"^1E",[["^ ","^14",15,"^15",87]],"^1C",[["^ ","^14",15,"^15",87,"^F","cljs.core.subs.cljs$core$IFn$_invoke$arity$2"]],"^1P",[["^ ","^14",60,"^15",87,"^F","s1"]],"^1=",[["^ ","^14",63,"^15",87,"^F","size"]]],"~i84",["^ ","^1E",[["^ ","^14",15,"^15",88]],"~i21",[["^ ","^14",60,"^15",88,"^F","s2"]],"^1<",[["^ ","^14",108,"^15",88],["^ ","^14",125,"^15",88,"^F","G__28059"],["^ ","^14",4,"^15",89,"^F","G__28059"],["^ ","^14",19,"^15",89],["^ ","^14",21,"^15",89],["^ ","^14",22,"^15",89,"^F","G__28059"],["^ ","^14",42,"^15",89,"^F","cljs.core/Keyword"],["^ ","^14",75,"^15",89],["^ ","^14",0,"^15",90],["^ ","^14",0,"^15",90],["^ ","^14",8,"^15",90,"^F","G__28059"],["^ ","^14",5,"^15",91],["^ ","^14",5,"^15",95],["^ ","^14",0,"^15",96],["^ ","^14",5,"^15",99],["^ ","^14",0,"^15",100],["^ ","^14",5,"^15",103],["^ ","^14",0,"^15",104],["^ ","^14",5,"^15",107],["^ ","^14",0,"^15",108],["^ ","^14",5,"^15",111],["^ ","^14",0,"^15",112],["^ ","^14",5,"^15",115],["^ ","^14",0,"^15",116],["^ ","^14",5,"^15",119],["^ ","^14",0,"^15",120],["^ ","^14",5,"^15",123],["^ ","^14",0,"^15",124],["^ ","^14",5,"^15",127],["^ ","^14",0,"^15",128]],"~i30",[["^ ","^14",136,"^15",88,"^F","tag"]]],"~i85",["^ ","^13",[["^ ","^14",0,"^15",92,"^F","chunk"]]],"~i95",["^ ","^1W",[["^ ","^14",0,"^15",132,"^F","chunk"]]],"~i96",["^ ","~i9",[["^ ","^14",0,"^15",140,"^F","s2"]]],"~i660",["^ ","^1D",[["^ ","^14",62,"^15",89],["^ ","^14",62,"^15",89,"^F","G__28059"]]]],"~:cljc",true],"~:cache-keys",["~#cmap",[["~:macro","^L"],[1537260906000],["^W","goog/math/math.js"],[1508737613441,"^M","~$goog.array","~$goog.asserts"],["^W","goog/array/array.js"],[1508737613441,"^M","^2;"],["^W","goog/debug/error.js"],[1508737613441,"^M"],["^W","goog/dom/nodetype.js"],[1508737613441,"^M"],["^W","goog/object/object.js"],[1508737613441,"^M"],"~:SHADOW-TIMESTAMP",[1537358551000,1537260906000],["^W","goog/math/long.js"],[1508737613441,"^M","^2;","~$goog.reflect"],["^W","goog/functions/functions.js"],[1508737613441,"^M"],["^W","goog/structs/map.js"],[1508737613441,"^M","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^W","goog/asserts/asserts.js"],[1508737613441,"^M","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^W","goog/uri/uri.js"],[1508737613441,"^M","^2:","^2;","^2C","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^W","goog/base.js"],[1508737613441],["^W","garden/compression.cljc"],[1537260906883,"^M","^L"],["^W","goog/structs/structs.js"],[1508737613441,"^M","^2:","^2@"],["^W","goog/string/string.js"],[1508737613441,"^M"],["^W","goog/reflect/reflect.js"],[1508737613441,"^M"],["^W","goog/string/stringbuffer.js"],[1508737613441,"^M"],["^W","goog/iter/iter.js"],[1508737613441,"^M","^2:","^2;","~$goog.functions","~$goog.math"],["^W","cljs/core.cljs"],[1537260906289,"~$goog.math.Long","~$goog.math.Integer","^2C","^2@","^2:","~$goog.Uri","~$goog.string.StringBuffer"],["^W","goog/math/integer.js"],[1508737613441,"^M"],["^W","goog/uri/utils.js"],[1508737613441,"^M","^2:","^2;","^2C"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Stylesheet compression utilities.","^7","garden/compression.cljc","^8",1,"^9",5,"^:",1,"^;",23],"^<",["^ ","^=","^>","^?","^@","^A","^B"],"^C",null,"^D",["^E",[]],"^F","^G","^J",null,"^K",["^ ","^L","^L","^M","^M"],"^N",["^E",[]],"^O",null,"~:defs",["^ ","~$token-fn",["^ ","~:protocol-inline",null,"^5",["^ ","^7","garden/compression.cljc","^8",35,"^9",11,"^:",35,"^;",19,"~:private",true,"~:arglists",["^R",["~$quote",["^R",[[["~$tag","~$re"]]]]]],"^6","Return a function which when given a string will return a map\n  containing the chunk of text matched by re, it's size, and tag."],"^2S",true,"^F","~$garden.compression/token-fn","~:variadic",false,"^7","garden/compression.cljc","^;",19,"~:method-params",["^R",[["~$p__28022"]]],"~:protocol-impl",null,"~:arglists-meta",["^R",[null,null]],"^9",4,"^8",35,"^:",35,"~:max-fixed-arity",1,"~:fn-var",true,"^2T",["^R",["^2U",["^R",[[["^2V","^2W"]]]]]],"^6","Return a function which when given a string will return a map\n  containing the chunk of text matched by re, it's size, and tag."],"~$tokenizer",["^ ","^2R",null,"^5",["^ ","^7","garden/compression.cljc","^8",46,"^9",11,"^:",46,"^;",20,"^2S",true,"^2T",["^R",["^2U",["^R",[["~$&","~$tags+regexes"]]]]],"^6","Given an arbitrary number of [tag regex] pairs, return a function\n  which when given a string s will return the first matching token of s.\n  Token precedence is determined by the order of the pairs. The first\n  and last pairs have the highest and lowest precedence respectively.","~:top-fn",["^ ","^2Y",true,"^32",0,"^2Z",[["^R",["^35"]]],"^2T",["^R",[["~$&","^35"]]],"^31",["^R",[null]]]],"^2S",true,"^F","~$garden.compression/tokenizer","^2Y",true,"^7","garden/compression.cljc","^;",20,"^36",["^ ","^2Y",true,"^32",0,"^2Z",[["^R",["^35"]]],"^2T",["^R",[["~$&","^35"]]],"^31",["^R",[null]]],"^2Z",[["^R",["^35"]]],"^30",null,"^31",["^R",[null]],"^9",4,"^8",46,"^:",46,"^32",0,"^33",true,"^2T",["^R",[["~$&","^35"]]],"^6","Given an arbitrary number of [tag regex] pairs, return a function\n  which when given a string s will return the first matching token of s.\n  Token precedence is determined by the order of the pairs. The first\n  and last pairs have the highest and lowest precedence respectively."],"~$stylesheet-tokenizer",["^ ","^5",["^ ","^7","garden/compression.cljc","^8",60,"^9",6,"^:",60,"^;",26,"^2S",true,"^6","Tokenizer used during stylesheet compression."],"^2S",true,"^F","~$garden.compression/stylesheet-tokenizer","^7","garden/compression.cljc","^;",26,"^9",4,"^8",57,"^:",60,"~:tag","~$any","^6","Tokenizer used during stylesheet compression."],"~$compress-stylesheet",["^ ","^2R",null,"^5",["^ ","^7","garden/compression.cljc","^8",79,"^9",10,"^:",79,"^;",29,"^2T",["^R",["^2U",["^R",[["~$stylesheet"]]]]],"^6","Compress a string of CSS using a basic compressor."],"^F","~$garden.compression/compress-stylesheet","^2Y",false,"^7","garden/compression.cljc","^;",29,"^2Z",["^R",[["^3="]]],"^30",null,"^31",["^R",[null,null]],"^9",4,"^8",79,"^:",79,"^32",1,"^33",true,"^2T",["^R",["^2U",["^R",[["^3="]]]]],"^6","Compress a string of CSS using a basic compressor."]],"^P",["^ ","^L","^L"],"~:cljs.analyzer/constants",["^ ","^N",["^E",["~:l-brace","~:l-paren","~:space+","~:comma","~:white-space+","~:string","~:size","~:colon","~:semicolon","~:r-brace","^3:","~:r-paren","~:chunk","~:any"]],"~:order",["^3:","^3K","^3F","^3E","^3I","^3@","^3J","^3A","^3C","^3G","^3H","^3B","^3D","^3L"]],"^T",["^ "],"^U",["^M","^L"]],"^I","^G","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^28",[["^3P","~:static-fns"],true,["^3P","~:elide-asserts"],false,["^3P","~:optimize-constants"],null,["^3P","~:external-config"],null,["^3P","~:tooling-config"],null,["^3P","~:emit-constants"],null,["^3P","~:infer-externs"],true,["^3P","^10"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^3P","~:fn-invoke-direct"],null,["^3P","^12"],"/dev/null"]]]