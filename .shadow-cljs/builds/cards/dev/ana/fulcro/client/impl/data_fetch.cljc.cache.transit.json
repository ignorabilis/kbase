["^ ","~:output",["^ ","~:js","goog.provide('fulcro.client.impl.data_fetch');\r\ngoog.require('cljs.core');\r\ngoog.require('fulcro.client.primitives');\r\ngoog.require('fulcro.client.impl.data_targeting');\r\ngoog.require('fulcro.util');\r\ngoog.require('fulcro.client.util');\r\ngoog.require('clojure.walk');\r\ngoog.require('clojure.set');\r\ngoog.require('fulcro.logging');\r\ngoog.require('fulcro.history');\r\ngoog.require('fulcro.client.mutations');\r\ngoog.require('fulcro.client.impl.protocols');\r\ngoog.require('cljs.spec.alpha');\r\nfulcro.client.impl.data_fetch.optional = (function fulcro$client$impl$data_fetch$optional(pred){\r\nreturn cljs.spec.alpha.or_spec_impl(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"nothing\",\"nothing\",-1022703296),new cljs.core.Keyword(null,\"value\",\"value\",305978217)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"cljs.core\",\"nil?\",\"cljs.core/nil?\",945071861,null),new cljs.core.Symbol(null,\"pred\",\"pred\",-727012372,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.nil_QMARK_,pred], null),null);\r\n});\r\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"type\",\"fulcro.client.impl.data-fetch/type\",296514265),new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null),cljs.core.keyword_QMARK_);\r\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"uuid\",\"fulcro.client.impl.data-fetch/uuid\",1534451240),new cljs.core.Symbol(\"cljs.core\",\"string?\",\"cljs.core/string?\",-2072921719,null),cljs.core.string_QMARK_);\r\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"target\",\"fulcro.client.impl.data-fetch/target\",1805324748),cljs.core.list(new cljs.core.Symbol(\"fulcro.client.impl.data-fetch\",\"optional\",\"fulcro.client.impl.data-fetch/optional\",-2141468527,null),new cljs.core.Symbol(\"cljs.core\",\"vector?\",\"cljs.core/vector?\",-1550392028,null)),fulcro.client.impl.data_fetch.optional(cljs.core.vector_QMARK_));\r\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"field\",\"fulcro.client.impl.data-fetch/field\",-439885921),cljs.core.list(new cljs.core.Symbol(\"fulcro.client.impl.data-fetch\",\"optional\",\"fulcro.client.impl.data-fetch/optional\",-2141468527,null),new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null)),fulcro.client.impl.data_fetch.optional(cljs.core.keyword_QMARK_));\r\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"post-mutation\",\"fulcro.client.impl.data-fetch/post-mutation\",-75376962),cljs.core.list(new cljs.core.Symbol(\"fulcro.client.impl.data-fetch\",\"optional\",\"fulcro.client.impl.data-fetch/optional\",-2141468527,null),new cljs.core.Symbol(\"cljs.core\",\"symbol?\",\"cljs.core/symbol?\",1422196122,null)),fulcro.client.impl.data_fetch.optional(cljs.core.symbol_QMARK_));\r\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"post-mutation-params\",\"fulcro.client.impl.data-fetch/post-mutation-params\",430524764),cljs.core.list(new cljs.core.Symbol(\"fulcro.client.impl.data-fetch\",\"optional\",\"fulcro.client.impl.data-fetch/optional\",-2141468527,null),new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null)),fulcro.client.impl.data_fetch.optional(cljs.core.map_QMARK_));\r\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"refresh\",\"fulcro.client.impl.data-fetch/refresh\",-12271976),cljs.core.list(new cljs.core.Symbol(\"fulcro.client.impl.data-fetch\",\"optional\",\"fulcro.client.impl.data-fetch/optional\",-2141468527,null),new cljs.core.Symbol(\"cljs.core\",\"vector?\",\"cljs.core/vector?\",-1550392028,null)),fulcro.client.impl.data_fetch.optional(cljs.core.vector_QMARK_));\r\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"marker\",\"fulcro.client.impl.data-fetch/marker\",392378046),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"reference\",\"reference\",-1711695023),new cljs.core.Symbol(\"cljs.core\",\"any?\",\"cljs.core/any?\",-2068111842,null),new cljs.core.Keyword(null,\"legacy\",\"legacy\",1434943289),new cljs.core.Symbol(\"cljs.core\",\"true?\",\"cljs.core/true?\",-77973136,null),new cljs.core.Keyword(null,\"nothing\",\"nothing\",-1022703296),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"nil\",\"nil\",99600501),new cljs.core.Symbol(\"cljs.core\",\"nil?\",\"cljs.core/nil?\",945071861,null),new cljs.core.Keyword(null,\"false\",\"false\",1277713805),new cljs.core.Symbol(\"cljs.core\",\"false?\",\"cljs.core/false?\",-1660815306,null))),cljs.spec.alpha.or_spec_impl(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"reference\",\"reference\",-1711695023),new cljs.core.Keyword(null,\"legacy\",\"legacy\",1434943289),new cljs.core.Keyword(null,\"nothing\",\"nothing\",-1022703296)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"cljs.core\",\"any?\",\"cljs.core/any?\",-2068111842,null),new cljs.core.Symbol(\"cljs.core\",\"true?\",\"cljs.core/true?\",-77973136,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"or\",\"cljs.spec.alpha/or\",-831679639,null),new cljs.core.Keyword(null,\"nil\",\"nil\",99600501),new cljs.core.Symbol(\"cljs.core\",\"nil?\",\"cljs.core/nil?\",945071861,null),new cljs.core.Keyword(null,\"false\",\"false\",1277713805),new cljs.core.Symbol(\"cljs.core\",\"false?\",\"cljs.core/false?\",-1660815306,null))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.any_QMARK_,cljs.core.true_QMARK_,cljs.spec.alpha.or_spec_impl(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"nil\",\"nil\",99600501),new cljs.core.Keyword(null,\"false\",\"false\",1277713805)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"cljs.core\",\"nil?\",\"cljs.core/nil?\",945071861,null),new cljs.core.Symbol(\"cljs.core\",\"false?\",\"cljs.core/false?\",-1660815306,null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.nil_QMARK_,cljs.core.false_QMARK_], null),null)], null),null));\r\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"parallel\",\"fulcro.client.impl.data-fetch/parallel\",1010707051),cljs.core.list(new cljs.core.Symbol(\"fulcro.client.impl.data-fetch\",\"optional\",\"fulcro.client.impl.data-fetch/optional\",-2141468527,null),new cljs.core.Symbol(\"cljs.core\",\"boolean?\",\"cljs.core/boolean?\",1400713761,null)),fulcro.client.impl.data_fetch.optional(cljs.core.boolean_QMARK_));\r\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"fallback\",\"fulcro.client.impl.data-fetch/fallback\",-644539810),cljs.core.list(new cljs.core.Symbol(\"fulcro.client.impl.data-fetch\",\"optional\",\"fulcro.client.impl.data-fetch/optional\",-2141468527,null),new cljs.core.Symbol(\"cljs.core\",\"symbol?\",\"cljs.core/symbol?\",1422196122,null)),fulcro.client.impl.data_fetch.optional(cljs.core.symbol_QMARK_));\r\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"original-env\",\"fulcro.client.impl.data-fetch/original-env\",1405563884),new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),cljs.core.map_QMARK_);\r\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"load-marker\",\"fulcro.client.impl.data-fetch/load-marker\",1926035537),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"keys\",\"cljs.spec.alpha/keys\",1109346032,null),new cljs.core.Keyword(null,\"req\",\"req\",-326448303),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"type\",\"fulcro.client.impl.data-fetch/type\",296514265),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"uuid\",\"fulcro.client.impl.data-fetch/uuid\",1534451240),new cljs.core.Keyword(\"fulcro.client.primitives\",\"query\",\"fulcro.client.primitives/query\",261276758),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"original-env\",\"fulcro.client.impl.data-fetch/original-env\",1405563884),new cljs.core.Keyword(\"fulcro.history\",\"tx-time\",\"fulcro.history/tx-time\",816348456)], null),new cljs.core.Keyword(null,\"opt\",\"opt\",-794706369),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"target\",\"fulcro.client.impl.data-fetch/target\",1805324748),new cljs.core.Keyword(\"fulcro.client.primitives\",\"remote\",\"fulcro.client.primitives/remote\",82057012),new cljs.core.Keyword(\"fulcro.client.primitives\",\"ident\",\"fulcro.client.primitives/ident\",-1688940366),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"field\",\"fulcro.client.impl.data-fetch/field\",-439885921),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"post-mutation-params\",\"fulcro.client.impl.data-fetch/post-mutation-params\",430524764),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"post-mutation\",\"fulcro.client.impl.data-fetch/post-mutation\",-75376962),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"refresh\",\"fulcro.client.impl.data-fetch/refresh\",-12271976),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"marker\",\"fulcro.client.impl.data-fetch/marker\",392378046),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"parallel\",\"fulcro.client.impl.data-fetch/parallel\",1010707051),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"fallback\",\"fulcro.client.impl.data-fetch/fallback\",-644539810),new cljs.core.Keyword(\"fulcro.client.network\",\"abort-id\",\"fulcro.client.network/abort-id\",-22430267)], null)),cljs.spec.alpha.map_spec_impl(cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"req-un\",\"req-un\",1074571008),new cljs.core.Keyword(null,\"opt-un\",\"opt-un\",883442496),new cljs.core.Keyword(null,\"gfn\",\"gfn\",791517474),new cljs.core.Keyword(null,\"pred-exprs\",\"pred-exprs\",1792271395),new cljs.core.Keyword(null,\"keys-pred\",\"keys-pred\",858984739),new cljs.core.Keyword(null,\"opt-keys\",\"opt-keys\",1262688261),new cljs.core.Keyword(null,\"req-specs\",\"req-specs\",553962313),new cljs.core.Keyword(null,\"req\",\"req\",-326448303),new cljs.core.Keyword(null,\"req-keys\",\"req-keys\",514319221),new cljs.core.Keyword(null,\"opt-specs\",\"opt-specs\",-384905450),new cljs.core.Keyword(null,\"pred-forms\",\"pred-forms\",172611832),new cljs.core.Keyword(null,\"opt\",\"opt\",-794706369)],[null,null,null,new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (G__40686){\r\nreturn cljs.core.map_QMARK_(G__40686);\r\n}),(function (G__40686){\r\nreturn cljs.core.contains_QMARK_(G__40686,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"type\",\"fulcro.client.impl.data-fetch/type\",296514265));\r\n}),(function (G__40686){\r\nreturn cljs.core.contains_QMARK_(G__40686,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"uuid\",\"fulcro.client.impl.data-fetch/uuid\",1534451240));\r\n}),(function (G__40686){\r\nreturn cljs.core.contains_QMARK_(G__40686,new cljs.core.Keyword(\"fulcro.client.primitives\",\"query\",\"fulcro.client.primitives/query\",261276758));\r\n}),(function (G__40686){\r\nreturn cljs.core.contains_QMARK_(G__40686,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"original-env\",\"fulcro.client.impl.data-fetch/original-env\",1405563884));\r\n}),(function (G__40686){\r\nreturn cljs.core.contains_QMARK_(G__40686,new cljs.core.Keyword(\"fulcro.history\",\"tx-time\",\"fulcro.history/tx-time\",816348456));\r\n})], null),(function (G__40686){\r\nreturn ((cljs.core.map_QMARK_(G__40686)) && (cljs.core.contains_QMARK_(G__40686,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"type\",\"fulcro.client.impl.data-fetch/type\",296514265))) && (cljs.core.contains_QMARK_(G__40686,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"uuid\",\"fulcro.client.impl.data-fetch/uuid\",1534451240))) && (cljs.core.contains_QMARK_(G__40686,new cljs.core.Keyword(\"fulcro.client.primitives\",\"query\",\"fulcro.client.primitives/query\",261276758))) && (cljs.core.contains_QMARK_(G__40686,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"original-env\",\"fulcro.client.impl.data-fetch/original-env\",1405563884))) && (cljs.core.contains_QMARK_(G__40686,new cljs.core.Keyword(\"fulcro.history\",\"tx-time\",\"fulcro.history/tx-time\",816348456))));\r\n}),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"target\",\"fulcro.client.impl.data-fetch/target\",1805324748),new cljs.core.Keyword(\"fulcro.client.primitives\",\"remote\",\"fulcro.client.primitives/remote\",82057012),new cljs.core.Keyword(\"fulcro.client.primitives\",\"ident\",\"fulcro.client.primitives/ident\",-1688940366),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"field\",\"fulcro.client.impl.data-fetch/field\",-439885921),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"post-mutation-params\",\"fulcro.client.impl.data-fetch/post-mutation-params\",430524764),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"post-mutation\",\"fulcro.client.impl.data-fetch/post-mutation\",-75376962),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"refresh\",\"fulcro.client.impl.data-fetch/refresh\",-12271976),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"marker\",\"fulcro.client.impl.data-fetch/marker\",392378046),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"parallel\",\"fulcro.client.impl.data-fetch/parallel\",1010707051),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"fallback\",\"fulcro.client.impl.data-fetch/fallback\",-644539810),new cljs.core.Keyword(\"fulcro.client.network\",\"abort-id\",\"fulcro.client.network/abort-id\",-22430267)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"type\",\"fulcro.client.impl.data-fetch/type\",296514265),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"uuid\",\"fulcro.client.impl.data-fetch/uuid\",1534451240),new cljs.core.Keyword(\"fulcro.client.primitives\",\"query\",\"fulcro.client.primitives/query\",261276758),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"original-env\",\"fulcro.client.impl.data-fetch/original-env\",1405563884),new cljs.core.Keyword(\"fulcro.history\",\"tx-time\",\"fulcro.history/tx-time\",816348456)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"type\",\"fulcro.client.impl.data-fetch/type\",296514265),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"uuid\",\"fulcro.client.impl.data-fetch/uuid\",1534451240),new cljs.core.Keyword(\"fulcro.client.primitives\",\"query\",\"fulcro.client.primitives/query\",261276758),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"original-env\",\"fulcro.client.impl.data-fetch/original-env\",1405563884),new cljs.core.Keyword(\"fulcro.history\",\"tx-time\",\"fulcro.history/tx-time\",816348456)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"type\",\"fulcro.client.impl.data-fetch/type\",296514265),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"uuid\",\"fulcro.client.impl.data-fetch/uuid\",1534451240),new cljs.core.Keyword(\"fulcro.client.primitives\",\"query\",\"fulcro.client.primitives/query\",261276758),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"original-env\",\"fulcro.client.impl.data-fetch/original-env\",1405563884),new cljs.core.Keyword(\"fulcro.history\",\"tx-time\",\"fulcro.history/tx-time\",816348456)], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"target\",\"fulcro.client.impl.data-fetch/target\",1805324748),new cljs.core.Keyword(\"fulcro.client.primitives\",\"remote\",\"fulcro.client.primitives/remote\",82057012),new cljs.core.Keyword(\"fulcro.client.primitives\",\"ident\",\"fulcro.client.primitives/ident\",-1688940366),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"field\",\"fulcro.client.impl.data-fetch/field\",-439885921),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"post-mutation-params\",\"fulcro.client.impl.data-fetch/post-mutation-params\",430524764),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"post-mutation\",\"fulcro.client.impl.data-fetch/post-mutation\",-75376962),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"refresh\",\"fulcro.client.impl.data-fetch/refresh\",-12271976),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"marker\",\"fulcro.client.impl.data-fetch/marker\",392378046),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"parallel\",\"fulcro.client.impl.data-fetch/parallel\",1010707051),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"fallback\",\"fulcro.client.impl.data-fetch/fallback\",-644539810),new cljs.core.Keyword(\"fulcro.client.network\",\"abort-id\",\"fulcro.client.network/abort-id\",-22430267)], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"type\",\"fulcro.client.impl.data-fetch/type\",296514265))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"uuid\",\"fulcro.client.impl.data-fetch/uuid\",1534451240))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(\"fulcro.client.primitives\",\"query\",\"fulcro.client.primitives/query\",261276758))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"original-env\",\"fulcro.client.impl.data-fetch/original-env\",1405563884))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(\"fulcro.history\",\"tx-time\",\"fulcro.history/tx-time\",816348456)))], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"target\",\"fulcro.client.impl.data-fetch/target\",1805324748),new cljs.core.Keyword(\"fulcro.client.primitives\",\"remote\",\"fulcro.client.primitives/remote\",82057012),new cljs.core.Keyword(\"fulcro.client.primitives\",\"ident\",\"fulcro.client.primitives/ident\",-1688940366),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"field\",\"fulcro.client.impl.data-fetch/field\",-439885921),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"post-mutation-params\",\"fulcro.client.impl.data-fetch/post-mutation-params\",430524764),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"post-mutation\",\"fulcro.client.impl.data-fetch/post-mutation\",-75376962),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"refresh\",\"fulcro.client.impl.data-fetch/refresh\",-12271976),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"marker\",\"fulcro.client.impl.data-fetch/marker\",392378046),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"parallel\",\"fulcro.client.impl.data-fetch/parallel\",1010707051),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"fallback\",\"fulcro.client.impl.data-fetch/fallback\",-644539810),new cljs.core.Keyword(\"fulcro.client.network\",\"abort-id\",\"fulcro.client.network/abort-id\",-22430267)], null)])));\r\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"on-load\",\"fulcro.client.impl.data-fetch/on-load\",-1170993603),new cljs.core.Symbol(\"cljs.core\",\"fn?\",\"cljs.core/fn?\",71876239,null),cljs.core.fn_QMARK_);\r\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"on-error\",\"fulcro.client.impl.data-fetch/on-error\",867419629),new cljs.core.Symbol(\"cljs.core\",\"fn?\",\"cljs.core/fn?\",71876239,null),cljs.core.fn_QMARK_);\r\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"load-descriptors\",\"fulcro.client.impl.data-fetch/load-descriptors\",1275690424),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"coll-of\",\"cljs.spec.alpha/coll-of\",1019430407,null),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"load-marker\",\"fulcro.client.impl.data-fetch/load-marker\",1926035537)),cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"load-marker\",\"fulcro.client.impl.data-fetch/load-marker\",1926035537),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"load-marker\",\"fulcro.client.impl.data-fetch/load-marker\",1926035537),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(\"cljs.spec.alpha\",\"kind-form\",\"cljs.spec.alpha/kind-form\",-1047104697),null,new cljs.core.Keyword(\"cljs.spec.alpha\",\"cpred\",\"cljs.spec.alpha/cpred\",-693471218),(function (G__40719){\r\nreturn cljs.core.coll_QMARK_(G__40719);\r\n}),new cljs.core.Keyword(\"cljs.spec.alpha\",\"conform-all\",\"cljs.spec.alpha/conform-all\",45201917),true,new cljs.core.Keyword(\"cljs.spec.alpha\",\"describe\",\"cljs.spec.alpha/describe\",1883026911),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"coll-of\",\"cljs.spec.alpha/coll-of\",1019430407,null),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"load-marker\",\"fulcro.client.impl.data-fetch/load-marker\",1926035537))], null),null));\r\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"payload\",\"fulcro.client.impl.data-fetch/payload\",1553254295),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"keys\",\"cljs.spec.alpha/keys\",1109346032,null),new cljs.core.Keyword(null,\"req\",\"req\",-326448303),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"fulcro.client.primitives\",\"query\",\"fulcro.client.primitives/query\",261276758),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"on-load\",\"fulcro.client.impl.data-fetch/on-load\",-1170993603),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"on-error\",\"fulcro.client.impl.data-fetch/on-error\",867419629),new cljs.core.Keyword(\"fulcro.history\",\"history-atom\",\"fulcro.history/history-atom\",-1250797564),new cljs.core.Keyword(\"fulcro.history\",\"tx-time\",\"fulcro.history/tx-time\",816348456)], null),new cljs.core.Keyword(null,\"opt\",\"opt\",-794706369),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"load-descriptors\",\"fulcro.client.impl.data-fetch/load-descriptors\",1275690424)], null)),cljs.spec.alpha.map_spec_impl(cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"req-un\",\"req-un\",1074571008),new cljs.core.Keyword(null,\"opt-un\",\"opt-un\",883442496),new cljs.core.Keyword(null,\"gfn\",\"gfn\",791517474),new cljs.core.Keyword(null,\"pred-exprs\",\"pred-exprs\",1792271395),new cljs.core.Keyword(null,\"keys-pred\",\"keys-pred\",858984739),new cljs.core.Keyword(null,\"opt-keys\",\"opt-keys\",1262688261),new cljs.core.Keyword(null,\"req-specs\",\"req-specs\",553962313),new cljs.core.Keyword(null,\"req\",\"req\",-326448303),new cljs.core.Keyword(null,\"req-keys\",\"req-keys\",514319221),new cljs.core.Keyword(null,\"opt-specs\",\"opt-specs\",-384905450),new cljs.core.Keyword(null,\"pred-forms\",\"pred-forms\",172611832),new cljs.core.Keyword(null,\"opt\",\"opt\",-794706369)],[null,null,null,new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (G__40723){\r\nreturn cljs.core.map_QMARK_(G__40723);\r\n}),(function (G__40723){\r\nreturn cljs.core.contains_QMARK_(G__40723,new cljs.core.Keyword(\"fulcro.client.primitives\",\"query\",\"fulcro.client.primitives/query\",261276758));\r\n}),(function (G__40723){\r\nreturn cljs.core.contains_QMARK_(G__40723,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"on-load\",\"fulcro.client.impl.data-fetch/on-load\",-1170993603));\r\n}),(function (G__40723){\r\nreturn cljs.core.contains_QMARK_(G__40723,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"on-error\",\"fulcro.client.impl.data-fetch/on-error\",867419629));\r\n}),(function (G__40723){\r\nreturn cljs.core.contains_QMARK_(G__40723,new cljs.core.Keyword(\"fulcro.history\",\"history-atom\",\"fulcro.history/history-atom\",-1250797564));\r\n}),(function (G__40723){\r\nreturn cljs.core.contains_QMARK_(G__40723,new cljs.core.Keyword(\"fulcro.history\",\"tx-time\",\"fulcro.history/tx-time\",816348456));\r\n})], null),(function (G__40723){\r\nreturn ((cljs.core.map_QMARK_(G__40723)) && (cljs.core.contains_QMARK_(G__40723,new cljs.core.Keyword(\"fulcro.client.primitives\",\"query\",\"fulcro.client.primitives/query\",261276758))) && (cljs.core.contains_QMARK_(G__40723,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"on-load\",\"fulcro.client.impl.data-fetch/on-load\",-1170993603))) && (cljs.core.contains_QMARK_(G__40723,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"on-error\",\"fulcro.client.impl.data-fetch/on-error\",867419629))) && (cljs.core.contains_QMARK_(G__40723,new cljs.core.Keyword(\"fulcro.history\",\"history-atom\",\"fulcro.history/history-atom\",-1250797564))) && (cljs.core.contains_QMARK_(G__40723,new cljs.core.Keyword(\"fulcro.history\",\"tx-time\",\"fulcro.history/tx-time\",816348456))));\r\n}),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"load-descriptors\",\"fulcro.client.impl.data-fetch/load-descriptors\",1275690424)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"fulcro.client.primitives\",\"query\",\"fulcro.client.primitives/query\",261276758),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"on-load\",\"fulcro.client.impl.data-fetch/on-load\",-1170993603),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"on-error\",\"fulcro.client.impl.data-fetch/on-error\",867419629),new cljs.core.Keyword(\"fulcro.history\",\"history-atom\",\"fulcro.history/history-atom\",-1250797564),new cljs.core.Keyword(\"fulcro.history\",\"tx-time\",\"fulcro.history/tx-time\",816348456)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"fulcro.client.primitives\",\"query\",\"fulcro.client.primitives/query\",261276758),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"on-load\",\"fulcro.client.impl.data-fetch/on-load\",-1170993603),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"on-error\",\"fulcro.client.impl.data-fetch/on-error\",867419629),new cljs.core.Keyword(\"fulcro.history\",\"history-atom\",\"fulcro.history/history-atom\",-1250797564),new cljs.core.Keyword(\"fulcro.history\",\"tx-time\",\"fulcro.history/tx-time\",816348456)], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"fulcro.client.primitives\",\"query\",\"fulcro.client.primitives/query\",261276758),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"on-load\",\"fulcro.client.impl.data-fetch/on-load\",-1170993603),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"on-error\",\"fulcro.client.impl.data-fetch/on-error\",867419629),new cljs.core.Keyword(\"fulcro.history\",\"history-atom\",\"fulcro.history/history-atom\",-1250797564),new cljs.core.Keyword(\"fulcro.history\",\"tx-time\",\"fulcro.history/tx-time\",816348456)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"load-descriptors\",\"fulcro.client.impl.data-fetch/load-descriptors\",1275690424)], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(\"fulcro.client.primitives\",\"query\",\"fulcro.client.primitives/query\",261276758))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"on-load\",\"fulcro.client.impl.data-fetch/on-load\",-1170993603))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"on-error\",\"fulcro.client.impl.data-fetch/on-error\",867419629))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(\"fulcro.history\",\"history-atom\",\"fulcro.history/history-atom\",-1250797564))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(\"fulcro.history\",\"tx-time\",\"fulcro.history/tx-time\",816348456)))], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"load-descriptors\",\"fulcro.client.impl.data-fetch/load-descriptors\",1275690424)], null)])));\r\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"network-error\",\"fulcro.client.impl.data-fetch/network-error\",721360552),new cljs.core.Symbol(\"cljs.core\",\"any?\",\"cljs.core/any?\",-2068111842,null),cljs.core.any_QMARK_);\r\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"network-result\",\"fulcro.client.impl.data-fetch/network-result\",183682473),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"keys\",\"cljs.spec.alpha/keys\",1109346032,null),new cljs.core.Keyword(null,\"opt\",\"opt\",-794706369),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"load-descriptors\",\"fulcro.client.impl.data-fetch/load-descriptors\",1275690424),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"network-error\",\"fulcro.client.impl.data-fetch/network-error\",721360552)], null)),cljs.spec.alpha.map_spec_impl(cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"req-un\",\"req-un\",1074571008),new cljs.core.Keyword(null,\"opt-un\",\"opt-un\",883442496),new cljs.core.Keyword(null,\"gfn\",\"gfn\",791517474),new cljs.core.Keyword(null,\"pred-exprs\",\"pred-exprs\",1792271395),new cljs.core.Keyword(null,\"keys-pred\",\"keys-pred\",858984739),new cljs.core.Keyword(null,\"opt-keys\",\"opt-keys\",1262688261),new cljs.core.Keyword(null,\"req-specs\",\"req-specs\",553962313),new cljs.core.Keyword(null,\"req\",\"req\",-326448303),new cljs.core.Keyword(null,\"req-keys\",\"req-keys\",514319221),new cljs.core.Keyword(null,\"opt-specs\",\"opt-specs\",-384905450),new cljs.core.Keyword(null,\"pred-forms\",\"pred-forms\",172611832),new cljs.core.Keyword(null,\"opt\",\"opt\",-794706369)],[null,null,null,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (G__40745){\r\nreturn cljs.core.map_QMARK_(G__40745);\r\n})], null),(function (G__40745){\r\nreturn cljs.core.map_QMARK_(G__40745);\r\n}),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"load-descriptors\",\"fulcro.client.impl.data-fetch/load-descriptors\",1275690424),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"network-error\",\"fulcro.client.impl.data-fetch/network-error\",721360552)], null),cljs.core.PersistentVector.EMPTY,null,cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"load-descriptors\",\"fulcro.client.impl.data-fetch/load-descriptors\",1275690424),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"network-error\",\"fulcro.client.impl.data-fetch/network-error\",721360552)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)))], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"load-descriptors\",\"fulcro.client.impl.data-fetch/load-descriptors\",1275690424),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"network-error\",\"fulcro.client.impl.data-fetch/network-error\",721360552)], null)])));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Test if the given bit of state is a data fetch state-tracking marker\r\n */\r\nfulcro.client.impl.data_fetch.data_state_QMARK_ = (function fulcro$client$impl$data_fetch$data_state_QMARK_(state){\r\nreturn ((cljs.core.map_QMARK_(state)) && (cljs.core.contains_QMARK_(state,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"type\",\"fulcro.client.impl.data-fetch/type\",296514265))));\r\n});\r\nvar is_kind_QMARK_ = (function fulcro$client$impl$data_fetch$is_kind_QMARK_(state,type){\r\nif(cljs.core.truth_(fulcro.client.impl.data_fetch.data_state_QMARK_(state))){\r\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(type,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"type\",\"fulcro.client.impl.data-fetch/type\",296514265).cljs$core$IFn$_invoke$arity$1(state));\r\n} else {\r\nreturn false;\r\n}\r\n});\r\n/**\r\n * Test if the given item is a data state marker that is in the ready state\r\n */\r\nfulcro.client.impl.data_fetch.ready_QMARK_ = (function fulcro$client$impl$data_fetch$ready_QMARK_(state){\r\nreturn is_kind_QMARK_(state,new cljs.core.Keyword(null,\"ready\",\"ready\",1086465795));\r\n});\r\n\r\n/**\r\n * Test if the given item is a data state marker in the loading state\r\n */\r\nfulcro.client.impl.data_fetch.loading_QMARK_ = (function fulcro$client$impl$data_fetch$loading_QMARK_(state){\r\nreturn is_kind_QMARK_(state,new cljs.core.Keyword(null,\"loading\",\"loading\",-737050189));\r\n});\r\n\r\n/**\r\n * Test if the given item is a data state marker in the failed state\r\n */\r\nfulcro.client.impl.data_fetch.failed_QMARK_ = (function fulcro$client$impl$data_fetch$failed_QMARK_(state){\r\nreturn is_kind_QMARK_(state,new cljs.core.Keyword(null,\"failed\",\"failed\",-1397425762));\r\n});\r\nfulcro.client.impl.data_fetch.is_direct_table_load_QMARK_ = (function fulcro$client$impl$data_fetch$is_direct_table_load_QMARK_(load_marker){\r\nreturn ((cljs.core.not((fulcro.client.impl.data_fetch.data_field.cljs$core$IFn$_invoke$arity$1 ? fulcro.client.impl.data_fetch.data_field.cljs$core$IFn$_invoke$arity$1(load_marker) : fulcro.client.impl.data_fetch.data_field.call(null,load_marker)))) && (fulcro.util.ident_QMARK_((fulcro.client.impl.data_fetch.data_query_key.cljs$core$IFn$_invoke$arity$1 ? fulcro.client.impl.data_fetch.data_query_key.cljs$core$IFn$_invoke$arity$1(load_marker) : fulcro.client.impl.data_fetch.data_query_key.call(null,load_marker)))));\r\n});\r\nfulcro.client.impl.data_fetch.marker_table = new cljs.core.Keyword(\"ui.fulcro.client.data-fetch.load-markers\",\"by-id\",\"ui.fulcro.client.data-fetch.load-markers/by-id\",763321486);\r\nfulcro.client.impl.data_fetch.place_load_marker = (function fulcro$client$impl$data_fetch$place_load_marker(state_map,marker){\r\nvar marker_id = (fulcro.client.impl.data_fetch.data_marker.cljs$core$IFn$_invoke$arity$1 ? fulcro.client.impl.data_fetch.data_marker.cljs$core$IFn$_invoke$arity$1(marker) : fulcro.client.impl.data_fetch.data_marker.call(null,marker));\r\nvar legacy_marker_QMARK_ = marker_id === true;\r\nif(legacy_marker_QMARK_){\r\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(state_map,(fulcro.client.impl.data_fetch.data_path.cljs$core$IFn$_invoke$arity$1 ? fulcro.client.impl.data_fetch.data_path.cljs$core$IFn$_invoke$arity$1(marker) : fulcro.client.impl.data_fetch.data_path.call(null,marker)),((function (marker_id,legacy_marker_QMARK_){\r\nreturn (function (current_val){\r\nif(cljs.core.truth_(fulcro.client.impl.data_fetch.is_direct_table_load_QMARK_(marker))){\r\nif(cljs.core.map_QMARK_(current_val)){\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(current_val,new cljs.core.Keyword(\"ui\",\"fetch-state\",\"ui/fetch-state\",1030289927),marker);\r\n} else {\r\nreturn null;\r\n}\r\n} else {\r\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"ui\",\"fetch-state\",\"ui/fetch-state\",1030289927),marker], null);\r\n}\r\n});})(marker_id,legacy_marker_QMARK_))\r\n);\r\n} else {\r\nreturn cljs.core.assoc_in(state_map,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [fulcro.client.impl.data_fetch.marker_table,marker_id], null),marker);\r\n}\r\n});\r\n/**\r\n * Place load markers in the app state at their data paths so that UI rendering can see them.\r\n */\r\nfulcro.client.impl.data_fetch.place_load_markers = (function fulcro$client$impl$data_fetch$place_load_markers(state_map,items_to_load){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (s,item){\r\nvar i = (fulcro.client.impl.data_fetch.set_loading_BANG_.cljs$core$IFn$_invoke$arity$1 ? fulcro.client.impl.data_fetch.set_loading_BANG_.cljs$core$IFn$_invoke$arity$1(item) : fulcro.client.impl.data_fetch.set_loading_BANG_.call(null,item));\r\nvar G__40770 = cljs.core.update.cljs$core$IFn$_invoke$arity$4(s,new cljs.core.Keyword(\"fulcro\",\"loads-in-progress\",\"fulcro/loads-in-progress\",-1196090224),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentHashSet.EMPTY),(fulcro.client.impl.data_fetch.data_uuid.cljs$core$IFn$_invoke$arity$1 ? fulcro.client.impl.data_fetch.data_uuid.cljs$core$IFn$_invoke$arity$1(i) : fulcro.client.impl.data_fetch.data_uuid.call(null,i)));\r\nif(cljs.core.truth_((fulcro.client.impl.data_fetch.data_marker_QMARK_.cljs$core$IFn$_invoke$arity$1 ? fulcro.client.impl.data_fetch.data_marker_QMARK_.cljs$core$IFn$_invoke$arity$1(i) : fulcro.client.impl.data_fetch.data_marker_QMARK_.call(null,i)))){\r\nreturn fulcro.client.impl.data_fetch.place_load_marker(G__40770,i);\r\n} else {\r\nreturn G__40770;\r\n}\r\n}),state_map,items_to_load);\r\n});\r\ncljs.spec.alpha.def_impl(new cljs.core.Symbol(\"fulcro.client.impl.data-fetch\",\"place-load-markers\",\"fulcro.client.impl.data-fetch/place-load-markers\",508272779,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"fspec\",\"cljs.spec.alpha/fspec\",-1289128341,null),new cljs.core.Keyword(null,\"args\",\"args\",1315556576),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Keyword(null,\"items\",\"items\",1031954938),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"load-descriptors\",\"fulcro.client.impl.data-fetch/load-descriptors\",1275690424)),new cljs.core.Keyword(null,\"ret\",\"ret\",-468222814),new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null)),cljs.spec.alpha.fspec_impl(cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4(cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Keyword(null,\"items\",\"items\",1031954938),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"load-descriptors\",\"fulcro.client.impl.data-fetch/load-descriptors\",1275690424)),cljs.spec.alpha.cat_impl(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),new cljs.core.Keyword(null,\"items\",\"items\",1031954938)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.map_QMARK_,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"load-descriptors\",\"fulcro.client.impl.data-fetch/load-descriptors\",1275690424)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"load-descriptors\",\"fulcro.client.impl.data-fetch/load-descriptors\",1275690424)], null)),null,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Keyword(null,\"items\",\"items\",1031954938),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"load-descriptors\",\"fulcro.client.impl.data-fetch/load-descriptors\",1275690424)),cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),cljs.core.map_QMARK_,null,null),new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),null,null,null));\r\n/**\r\n * Given a sequence of load markers, returns the history tx-time of the earliest one. Returns hist/max-tx-time if there\r\n *   are no markers or none have a time.\r\n */\r\nfulcro.client.impl.data_fetch.earliest_load_time = (function fulcro$client$impl$data_fetch$earliest_load_time(load_markers){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.min,fulcro.history.max_tx_time,cljs.core.map.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"fulcro.history\",\"tx-time\",\"fulcro.history/tx-time\",816348456),load_markers));\r\n});\r\n/**\r\n * Marks all of the items in the ready-to-load state as loading, places the loading markers in the appropriate locations\r\n *   in the app state, and return maps with the keys:\r\n * \r\n *   `query` : The full query to send to the server.\r\n *   `on-load` : The function to call to merge a response. Detects missing data and sets failure markers for those.\r\n *   `on-error` : The function to call to set network/server error(s) in place of loading markers.\r\n *   `load-descriptors` : Args to pass back to on-load and on-error. These are separated\r\n *  so that `rewrite-tempids-in-request-queue` can rewrite tempids for merge and\r\n *  error callbacks\r\n * \r\n *   response-channel will have the response posted to it when the request is done.\r\n *   .\r\n */\r\nfulcro.client.impl.data_fetch.mark_parallel_loading_BANG_ = (function fulcro$client$impl$data_fetch$mark_parallel_loading_BANG_(remote_name,reconciler){\r\nvar state = fulcro.client.primitives.app_state(reconciler);\r\nvar queued_items = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.Keyword(\"fulcro\",\"ready-to-load\",\"fulcro/ready-to-load\",127104696));\r\nvar is_eligible_QMARK_ = ((function (state,queued_items){\r\nreturn (function (item){\r\nvar and__3938__auto__ = new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"parallel\",\"fulcro.client.impl.data-fetch/parallel\",1010707051).cljs$core$IFn$_invoke$arity$1(item);\r\nif(cljs.core.truth_(and__3938__auto__)){\r\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(remote_name,(fulcro.client.impl.data_fetch.data_remote.cljs$core$IFn$_invoke$arity$1 ? fulcro.client.impl.data_fetch.data_remote.cljs$core$IFn$_invoke$arity$1(item) : fulcro.client.impl.data_fetch.data_remote.call(null,item)));\r\n} else {\r\nreturn and__3938__auto__;\r\n}\r\n});})(state,queued_items))\r\n;\r\nvar other_items_loading_QMARK_ = cljs.core.boolean$(cljs.core.seq(cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.Keyword(\"fulcro\",\"loads-in-progress\",\"fulcro/loads-in-progress\",-1196090224))));\r\nvar items_to_load = cljs.core.filter.cljs$core$IFn$_invoke$arity$2(is_eligible_QMARK_,queued_items);\r\nvar remaining_items = cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.not,is_eligible_QMARK_),queued_items);\r\nvar loading_QMARK_ = ((cljs.core.boolean$(cljs.core.seq(items_to_load))) || (other_items_loading_QMARK_));\r\nvar history_atom = fulcro.client.primitives.get_history(reconciler);\r\nvar ok = (fulcro.client.impl.data_fetch.loaded_callback.cljs$core$IFn$_invoke$arity$1 ? fulcro.client.impl.data_fetch.loaded_callback.cljs$core$IFn$_invoke$arity$1(reconciler) : fulcro.client.impl.data_fetch.loaded_callback.call(null,reconciler));\r\nvar error = (fulcro.client.impl.data_fetch.error_callback.cljs$core$IFn$_invoke$arity$1 ? fulcro.client.impl.data_fetch.error_callback.cljs$core$IFn$_invoke$arity$1(reconciler) : fulcro.client.impl.data_fetch.error_callback.call(null,reconciler));\r\nvar tx_time = fulcro.client.impl.data_fetch.earliest_load_time(items_to_load);\r\nif(cljs.core.empty_QMARK_(items_to_load)){\r\nreturn null;\r\n} else {\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(state,((function (state,queued_items,is_eligible_QMARK_,other_items_loading_QMARK_,items_to_load,remaining_items,loading_QMARK_,history_atom,ok,error,tx_time){\r\nreturn (function (s){\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(fulcro.client.impl.data_fetch.place_load_markers(s,items_to_load),new cljs.core.Keyword(\"ui\",\"loading-data\",\"ui/loading-data\",-1566515143),loading_QMARK_,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"fulcro\",\"ready-to-load\",\"fulcro/ready-to-load\",127104696),remaining_items], 0));\r\n});})(state,queued_items,is_eligible_QMARK_,other_items_loading_QMARK_,items_to_load,remaining_items,loading_QMARK_,history_atom,ok,error,tx_time))\r\n);\r\n\r\nvar iter__4324__auto__ = ((function (state,queued_items,is_eligible_QMARK_,other_items_loading_QMARK_,items_to_load,remaining_items,loading_QMARK_,history_atom,ok,error,tx_time){\r\nreturn (function fulcro$client$impl$data_fetch$mark_parallel_loading_BANG__$_iter__40788(s__40789){\r\nreturn (new cljs.core.LazySeq(null,((function (state,queued_items,is_eligible_QMARK_,other_items_loading_QMARK_,items_to_load,remaining_items,loading_QMARK_,history_atom,ok,error,tx_time){\r\nreturn (function (){\r\nvar s__40789__$1 = s__40789;\r\nwhile(true){\r\nvar temp__5457__auto__ = cljs.core.seq(s__40789__$1);\r\nif(temp__5457__auto__){\r\nvar s__40789__$2 = temp__5457__auto__;\r\nif(cljs.core.chunked_seq_QMARK_(s__40789__$2)){\r\nvar c__4322__auto__ = cljs.core.chunk_first(s__40789__$2);\r\nvar size__4323__auto__ = cljs.core.count(c__4322__auto__);\r\nvar b__40791 = cljs.core.chunk_buffer(size__4323__auto__);\r\nif((function (){var i__40790 = (0);\r\nwhile(true){\r\nif((i__40790 < size__4323__auto__)){\r\nvar item = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4322__auto__,i__40790);\r\ncljs.core.chunk_append(b__40791,new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(\"fulcro.client.primitives\",\"query\",\"fulcro.client.primitives/query\",261276758),(function (){var G__40793 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [item], null);\r\nreturn (fulcro.client.impl.data_fetch.full_query.cljs$core$IFn$_invoke$arity$1 ? fulcro.client.impl.data_fetch.full_query.cljs$core$IFn$_invoke$arity$1(G__40793) : fulcro.client.impl.data_fetch.full_query.call(null,G__40793));\r\n})(),new cljs.core.Keyword(\"fulcro.client.primitives\",\"remote\",\"fulcro.client.primitives/remote\",82057012),remote_name,new cljs.core.Keyword(\"fulcro.history\",\"tx-time\",\"fulcro.history/tx-time\",816348456),tx_time,new cljs.core.Keyword(\"fulcro.history\",\"history-atom\",\"fulcro.history/history-atom\",-1250797564),history_atom,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"on-load\",\"fulcro.client.impl.data-fetch/on-load\",-1170993603),ok,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"on-error\",\"fulcro.client.impl.data-fetch/on-error\",867419629),error,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"load-descriptors\",\"fulcro.client.impl.data-fetch/load-descriptors\",1275690424),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [item], null)], null));\r\n\r\nvar G__40818 = (i__40790 + (1));\r\ni__40790 = G__40818;\r\ncontinue;\r\n} else {\r\nreturn true;\r\n}\r\nbreak;\r\n}\r\n})()){\r\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__40791),fulcro$client$impl$data_fetch$mark_parallel_loading_BANG__$_iter__40788(cljs.core.chunk_rest(s__40789__$2)));\r\n} else {\r\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__40791),null);\r\n}\r\n} else {\r\nvar item = cljs.core.first(s__40789__$2);\r\nreturn cljs.core.cons(new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(\"fulcro.client.primitives\",\"query\",\"fulcro.client.primitives/query\",261276758),(function (){var G__40798 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [item], null);\r\nreturn (fulcro.client.impl.data_fetch.full_query.cljs$core$IFn$_invoke$arity$1 ? fulcro.client.impl.data_fetch.full_query.cljs$core$IFn$_invoke$arity$1(G__40798) : fulcro.client.impl.data_fetch.full_query.call(null,G__40798));\r\n})(),new cljs.core.Keyword(\"fulcro.client.primitives\",\"remote\",\"fulcro.client.primitives/remote\",82057012),remote_name,new cljs.core.Keyword(\"fulcro.history\",\"tx-time\",\"fulcro.history/tx-time\",816348456),tx_time,new cljs.core.Keyword(\"fulcro.history\",\"history-atom\",\"fulcro.history/history-atom\",-1250797564),history_atom,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"on-load\",\"fulcro.client.impl.data-fetch/on-load\",-1170993603),ok,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"on-error\",\"fulcro.client.impl.data-fetch/on-error\",867419629),error,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"load-descriptors\",\"fulcro.client.impl.data-fetch/load-descriptors\",1275690424),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [item], null)], null),fulcro$client$impl$data_fetch$mark_parallel_loading_BANG__$_iter__40788(cljs.core.rest(s__40789__$2)));\r\n}\r\n} else {\r\nreturn null;\r\n}\r\nbreak;\r\n}\r\n});})(state,queued_items,is_eligible_QMARK_,other_items_loading_QMARK_,items_to_load,remaining_items,loading_QMARK_,history_atom,ok,error,tx_time))\r\n,null,null));\r\n});})(state,queued_items,is_eligible_QMARK_,other_items_loading_QMARK_,items_to_load,remaining_items,loading_QMARK_,history_atom,ok,error,tx_time))\r\n;\r\nreturn iter__4324__auto__(items_to_load);\r\n}\r\n});\r\ncljs.spec.alpha.def_impl(new cljs.core.Symbol(\"fulcro.client.impl.data-fetch\",\"mark-parallel-loading!\",\"fulcro.client.impl.data-fetch/mark-parallel-loading!\",1842283092,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"fspec\",\"cljs.spec.alpha/fspec\",-1289128341,null),new cljs.core.Keyword(null,\"args\",\"args\",1315556576),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null),new cljs.core.Keyword(null,\"reconciler\",\"reconciler\",-1832826966),new cljs.core.Symbol(\"fulcro.client.primitives\",\"reconciler?\",\"fulcro.client.primitives/reconciler?\",-1575870606,null)),new cljs.core.Keyword(null,\"ret\",\"ret\",-468222814),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"load-descriptors\",\"fulcro.client.impl.data-fetch/load-descriptors\",1275690424)),cljs.spec.alpha.fspec_impl(cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4(cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null),new cljs.core.Keyword(null,\"reconciler\",\"reconciler\",-1832826966),new cljs.core.Symbol(\"fulcro.client.primitives\",\"reconciler?\",\"fulcro.client.primitives/reconciler?\",-1575870606,null)),cljs.spec.alpha.cat_impl(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),new cljs.core.Keyword(null,\"reconciler\",\"reconciler\",-1832826966)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword_QMARK_,fulcro.client.primitives.reconciler_QMARK_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null),new cljs.core.Symbol(\"fulcro.client.primitives\",\"reconciler?\",\"fulcro.client.primitives/reconciler?\",-1575870606,null)], null)),null,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null),new cljs.core.Keyword(null,\"reconciler\",\"reconciler\",-1832826966),new cljs.core.Symbol(\"fulcro.client.primitives\",\"reconciler?\",\"fulcro.client.primitives/reconciler?\",-1575870606,null)),cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"load-descriptors\",\"fulcro.client.impl.data-fetch/load-descriptors\",1275690424),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"load-descriptors\",\"fulcro.client.impl.data-fetch/load-descriptors\",1275690424),null,null),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"load-descriptors\",\"fulcro.client.impl.data-fetch/load-descriptors\",1275690424),null,null,null));\r\n/**\r\n * Returns a lazy sequence of the elements of coll with dupes removed.\r\n * An element is a duplicate IFF (keys-fn element) has key collision with any prior element\r\n * to come before it. E.g. (dedupe-by identity [[:a] [:b] [:a] [:a :c]]) => [[:a] [:b]]\r\n * Returns a stateful transducer when no collection is provided.\r\n */\r\nfulcro.client.impl.data_fetch.dedupe_by = (function fulcro$client$impl$data_fetch$dedupe_by(var_args){\r\nvar G__40836 = arguments.length;\r\nswitch (G__40836) {\r\ncase 1:\r\nreturn fulcro.client.impl.data_fetch.dedupe_by.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn fulcro.client.impl.data_fetch.dedupe_by.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\nfulcro.client.impl.data_fetch.dedupe_by.cljs$core$IFn$_invoke$arity$1 = (function (keys_fn){\r\nreturn (function (rf){\r\nvar keys_seen = cljs.core.volatile_BANG_(cljs.core.PersistentHashSet.EMPTY);\r\nreturn ((function (keys_seen){\r\nreturn (function() {\r\nvar G__40841 = null;\r\nvar G__40841__0 = (function (){\r\nreturn (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));\r\n});\r\nvar G__40841__1 = (function (result){\r\nreturn (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null,result));\r\n});\r\nvar G__40841__2 = (function (result,input){\r\nvar input_keys = cljs.core.set((keys_fn.cljs$core$IFn$_invoke$arity$1 ? keys_fn.cljs$core$IFn$_invoke$arity$1(input) : keys_fn.call(null,input)));\r\nif(cljs.core.empty_QMARK_(clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(keys_seen),input_keys))){\r\ncljs.core._vreset_BANG_(keys_seen,clojure.set.union.cljs$core$IFn$_invoke$arity$2(cljs.core._deref(keys_seen),input_keys));\r\n\r\nreturn (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result,input) : rf.call(null,result,input));\r\n} else {\r\nreturn result;\r\n}\r\n});\r\nG__40841 = function(result,input){\r\nswitch(arguments.length){\r\ncase 0:\r\nreturn G__40841__0.call(this);\r\ncase 1:\r\nreturn G__40841__1.call(this,result);\r\ncase 2:\r\nreturn G__40841__2.call(this,result,input);\r\n}\r\nthrow(new Error('Invalid arity: ' + arguments.length));\r\n};\r\nG__40841.cljs$core$IFn$_invoke$arity$0 = G__40841__0;\r\nG__40841.cljs$core$IFn$_invoke$arity$1 = G__40841__1;\r\nG__40841.cljs$core$IFn$_invoke$arity$2 = G__40841__2;\r\nreturn G__40841;\r\n})()\r\n;})(keys_seen))\r\n});\r\n});\r\n\r\nfulcro.client.impl.data_fetch.dedupe_by.cljs$core$IFn$_invoke$arity$2 = (function (keys_fn,coll){\r\nreturn cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(fulcro.client.impl.data_fetch.dedupe_by.cljs$core$IFn$_invoke$arity$1(keys_fn),coll);\r\n});\r\n\r\nfulcro.client.impl.data_fetch.dedupe_by.cljs$lang$maxFixedArity = 2;\r\n\r\n/**\r\n * This function is used to split accidental colliding queries into separate network\r\n *   requests. The most general description of this issue is\r\n *   from two unrelated `load` calls when black-box composing functions. The two\r\n *   separate queries: One issues `[{:entitlements [:foo]}]`, and the other\r\n *   asks for `[{:entitlements [:bar]}]`. Fulcro merges these into a single query\r\n *   [{:entitlements [:foo]} {:entitlements [:bar]}]. However, the response to a query\r\n *   is a map, and such a query would result in the backend parser being called twice (once per key in the subquery)\r\n *   but one would stomp on the other.\r\n * \r\n *   The other potential collision is if a load includes an abort ID. In this case such a load should not be batched\r\n *   with others because aborting it would take others down with it.\r\n * \r\n *   Thus, this function ensures such accidental collisions are not combined into a single network request.\r\n * \r\n *   This functions returns a list of the load items that can be batched (from the beginning, in order) and the\r\n *   remainder of the items which must be deferred to another request.\r\n */\r\nfulcro.client.impl.data_fetch.split_items_ready_to_load = (function fulcro$client$impl$data_fetch$split_items_ready_to_load(items_ready_to_load){\r\nvar item_keys = (function (item){\r\nreturn cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510),new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(fulcro.client.primitives.query__GT_ast((fulcro.client.impl.data_fetch.data_query.cljs$core$IFn$_invoke$arity$1 ? fulcro.client.impl.data_fetch.data_query.cljs$core$IFn$_invoke$arity$1(item) : fulcro.client.impl.data_fetch.data_query.call(null,item))))));\r\n});\r\nvar abort_id_conflict_QMARK_ = ((function (item_keys){\r\nreturn (function (items_going_QMARK_,active_abort_id,abort_id){\r\nvar and__3938__auto__ = items_going_QMARK_;\r\nif(cljs.core.truth_(and__3938__auto__)){\r\nvar and__3938__auto____$1 = (function (){var or__3949__auto__ = abort_id;\r\nif(cljs.core.truth_(or__3949__auto__)){\r\nreturn or__3949__auto__;\r\n} else {\r\nreturn active_abort_id;\r\n}\r\n})();\r\nif(cljs.core.truth_(and__3938__auto____$1)){\r\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(active_abort_id,abort_id);\r\n} else {\r\nreturn and__3938__auto____$1;\r\n}\r\n} else {\r\nreturn and__3938__auto__;\r\n}\r\n});})(item_keys))\r\n;\r\nvar can_go_now_QMARK_ = ((function (item_keys,abort_id_conflict_QMARK_){\r\nreturn (function (p__40847,item){\r\nvar map__40848 = p__40847;\r\nvar map__40848__$1 = ((((!((map__40848 == null)))?(((((map__40848.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__40848.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__40848):map__40848);\r\nvar items = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__40848__$1,new cljs.core.Keyword(null,\"items\",\"items\",1031954938));\r\nvar current_keys = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__40848__$1,new cljs.core.Keyword(null,\"current-keys\",\"current-keys\",1533136521));\r\nvar current_abort_id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__40848__$1,new cljs.core.Keyword(null,\"current-abort-id\",\"current-abort-id\",-1328568342));\r\nvar abort_id = new cljs.core.Keyword(\"fulcro.client.network\",\"abort-id\",\"fulcro.client.network/abort-id\",-22430267).cljs$core$IFn$_invoke$arity$1(item);\r\nreturn ((cljs.core.not(abort_id_conflict_QMARK_(cljs.core.seq(items),current_abort_id,abort_id))) && (cljs.core.empty_QMARK_(clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(current_keys,item_keys(item)))));\r\n});})(item_keys,abort_id_conflict_QMARK_))\r\n;\r\nvar map__40845 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (item_keys,abort_id_conflict_QMARK_,can_go_now_QMARK_){\r\nreturn (function (acc,item){\r\nif(cljs.core.truth_(can_go_now_QMARK_(acc,item))){\r\nvar G__40855 = acc;\r\nvar G__40855__$1 = (cljs.core.truth_(new cljs.core.Keyword(\"fulcro.client.network\",\"abort-id\",\"fulcro.client.network/abort-id\",-22430267).cljs$core$IFn$_invoke$arity$1(item))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__40855,new cljs.core.Keyword(null,\"current-abort-id\",\"current-abort-id\",-1328568342),new cljs.core.Keyword(\"fulcro.client.network\",\"abort-id\",\"fulcro.client.network/abort-id\",-22430267).cljs$core$IFn$_invoke$arity$1(item)):G__40855);\r\nvar G__40855__$2 = cljs.core.update.cljs$core$IFn$_invoke$arity$4(G__40855__$1,new cljs.core.Keyword(null,\"current-keys\",\"current-keys\",1533136521),clojure.set.union,item_keys(item))\r\n;\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(G__40855__$2,new cljs.core.Keyword(null,\"items\",\"items\",1031954938),cljs.core.conj,item);\r\n\r\n} else {\r\nreturn cljs.core.reduced(acc);\r\n}\r\n});})(item_keys,abort_id_conflict_QMARK_,can_go_now_QMARK_))\r\n,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"current-keys\",\"current-keys\",1533136521),cljs.core.PersistentHashSet.EMPTY,new cljs.core.Keyword(null,\"current-abort-id\",\"current-abort-id\",-1328568342),null,new cljs.core.Keyword(null,\"items\",\"items\",1031954938),cljs.core.PersistentVector.EMPTY], null),items_ready_to_load);\r\nvar map__40845__$1 = ((((!((map__40845 == null)))?(((((map__40845.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__40845.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__40845):map__40845);\r\nvar items_to_load_now = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__40845__$1,new cljs.core.Keyword(null,\"items\",\"items\",1031954938));\r\nvar items_to_defer = cljs.core.vec(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(cljs.core.count(items_to_load_now),items_ready_to_load));\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [items_to_load_now,items_to_defer], null);\r\n});\r\n/**\r\n * Marks all of the items in the ready-to-load state as loading, places the loading markers in the appropriate locations\r\n *   in the app state, and returns a map with the keys:\r\n * \r\n *   `query` : The full query to send to the server.\r\n *   `on-load` : The function to call to merge a response. Detects missing data and sets failure markers for those.\r\n *   `on-error` : The function to call to set network/server error(s) in place of loading markers.\r\n *   `load-descriptors` : Args to pass back to on-load and on-error. These are separated\r\n *  so that `rewrite-tempids-in-request-queue` can rewrite tempids for merge and\r\n *  error callbacks\r\n * \r\n *   response-channel will have the response posted to it when the request is done.\r\n *   .\r\n */\r\nfulcro.client.impl.data_fetch.mark_loading = (function fulcro$client$impl$data_fetch$mark_loading(remote,reconciler){\r\nvar state = fulcro.client.primitives.app_state(reconciler);\r\nvar is_eligible_QMARK_ = ((function (state){\r\nreturn (function (item){\r\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(remote,(fulcro.client.impl.data_fetch.data_remote.cljs$core$IFn$_invoke$arity$1 ? fulcro.client.impl.data_fetch.data_remote.cljs$core$IFn$_invoke$arity$1(item) : fulcro.client.impl.data_fetch.data_remote.call(null,item)));\r\n});})(state))\r\n;\r\nvar all_items = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.Keyword(\"fulcro\",\"ready-to-load\",\"fulcro/ready-to-load\",127104696));\r\nvar items_ready_to_load = cljs.core.filter.cljs$core$IFn$_invoke$arity$2(is_eligible_QMARK_,all_items);\r\nvar items_for_other_remotes = cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.not,is_eligible_QMARK_),all_items);\r\nvar other_items_loading_QMARK_ = cljs.core.boolean$(cljs.core.seq(cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state),new cljs.core.Keyword(\"fulcro\",\"loads-in-progress\",\"fulcro/loads-in-progress\",-1196090224))));\r\nvar vec__40868 = fulcro.client.impl.data_fetch.split_items_ready_to_load(items_ready_to_load);\r\nvar items_to_load_now = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__40868,(0),null);\r\nvar items_to_defer = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__40868,(1),null);\r\nvar remaining_items = cljs.core.concat.cljs$core$IFn$_invoke$arity$2(items_for_other_remotes,items_to_defer);\r\nvar loading_QMARK_ = ((cljs.core.boolean$(cljs.core.seq(items_to_load_now))) || (other_items_loading_QMARK_));\r\nvar tx_time = fulcro.client.impl.data_fetch.earliest_load_time(all_items);\r\nif(cljs.core.empty_QMARK_(items_to_load_now)){\r\nreturn null;\r\n} else {\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(state,((function (state,is_eligible_QMARK_,all_items,items_ready_to_load,items_for_other_remotes,other_items_loading_QMARK_,vec__40868,items_to_load_now,items_to_defer,remaining_items,loading_QMARK_,tx_time){\r\nreturn (function (s){\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(fulcro.client.impl.data_fetch.place_load_markers(s,items_to_load_now),new cljs.core.Keyword(\"ui\",\"loading-data\",\"ui/loading-data\",-1566515143),loading_QMARK_,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"fulcro\",\"ready-to-load\",\"fulcro/ready-to-load\",127104696),remaining_items], 0));\r\n});})(state,is_eligible_QMARK_,all_items,items_ready_to_load,items_for_other_remotes,other_items_loading_QMARK_,vec__40868,items_to_load_now,items_to_defer,remaining_items,loading_QMARK_,tx_time))\r\n);\r\n\r\nreturn new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(\"fulcro.client.primitives\",\"query\",\"fulcro.client.primitives/query\",261276758),(fulcro.client.impl.data_fetch.full_query.cljs$core$IFn$_invoke$arity$1 ? fulcro.client.impl.data_fetch.full_query.cljs$core$IFn$_invoke$arity$1(items_to_load_now) : fulcro.client.impl.data_fetch.full_query.call(null,items_to_load_now)),new cljs.core.Keyword(\"fulcro.history\",\"history-atom\",\"fulcro.history/history-atom\",-1250797564),fulcro.client.primitives.get_history(reconciler),new cljs.core.Keyword(\"fulcro.client.primitives\",\"remote\",\"fulcro.client.primitives/remote\",82057012),remote,new cljs.core.Keyword(\"fulcro.history\",\"tx-time\",\"fulcro.history/tx-time\",816348456),tx_time,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"on-load\",\"fulcro.client.impl.data-fetch/on-load\",-1170993603),(fulcro.client.impl.data_fetch.loaded_callback.cljs$core$IFn$_invoke$arity$1 ? fulcro.client.impl.data_fetch.loaded_callback.cljs$core$IFn$_invoke$arity$1(reconciler) : fulcro.client.impl.data_fetch.loaded_callback.call(null,reconciler)),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"on-error\",\"fulcro.client.impl.data-fetch/on-error\",867419629),(fulcro.client.impl.data_fetch.error_callback.cljs$core$IFn$_invoke$arity$1 ? fulcro.client.impl.data_fetch.error_callback.cljs$core$IFn$_invoke$arity$1(reconciler) : fulcro.client.impl.data_fetch.error_callback.call(null,reconciler)),new cljs.core.Keyword(\"fulcro.client.network\",\"abort-id\",\"fulcro.client.network/abort-id\",-22430267),cljs.core.first(cljs.core.keep.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"fulcro.client.network\",\"abort-id\",\"fulcro.client.network/abort-id\",-22430267),items_to_load_now)),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"load-descriptors\",\"fulcro.client.impl.data-fetch/load-descriptors\",1275690424),items_to_load_now], null);\r\n}\r\n});\r\ncljs.spec.alpha.def_impl(new cljs.core.Symbol(\"fulcro.client.impl.data-fetch\",\"mark-loading\",\"fulcro.client.impl.data-fetch/mark-loading\",2035863225,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"fspec\",\"cljs.spec.alpha/fspec\",-1289128341,null),new cljs.core.Keyword(null,\"args\",\"args\",1315556576),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null),new cljs.core.Keyword(null,\"reconciler\",\"reconciler\",-1832826966),new cljs.core.Symbol(\"fulcro.client.primitives\",\"reconciler?\",\"fulcro.client.primitives/reconciler?\",-1575870606,null)),new cljs.core.Keyword(null,\"ret\",\"ret\",-468222814),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"payload\",\"fulcro.client.impl.data-fetch/payload\",1553254295)),cljs.spec.alpha.fspec_impl(cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4(cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null),new cljs.core.Keyword(null,\"reconciler\",\"reconciler\",-1832826966),new cljs.core.Symbol(\"fulcro.client.primitives\",\"reconciler?\",\"fulcro.client.primitives/reconciler?\",-1575870606,null)),cljs.spec.alpha.cat_impl(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),new cljs.core.Keyword(null,\"reconciler\",\"reconciler\",-1832826966)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword_QMARK_,fulcro.client.primitives.reconciler_QMARK_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null),new cljs.core.Symbol(\"fulcro.client.primitives\",\"reconciler?\",\"fulcro.client.primitives/reconciler?\",-1575870606,null)], null)),null,null),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"cat\",\"cljs.spec.alpha/cat\",-1471398329,null),new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),new cljs.core.Symbol(\"cljs.core\",\"keyword?\",\"cljs.core/keyword?\",713156450,null),new cljs.core.Keyword(null,\"reconciler\",\"reconciler\",-1832826966),new cljs.core.Symbol(\"fulcro.client.primitives\",\"reconciler?\",\"fulcro.client.primitives/reconciler?\",-1575870606,null)),cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"payload\",\"fulcro.client.impl.data-fetch/payload\",1553254295),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"payload\",\"fulcro.client.impl.data-fetch/payload\",1553254295),null,null),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"payload\",\"fulcro.client.impl.data-fetch/payload\",1553254295),null,null,null));\r\nfulcro.client.impl.data_fetch.valid_types = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"ready\",\"ready\",1086465795),null,new cljs.core.Keyword(null,\"loading\",\"loading\",-737050189),null,new cljs.core.Keyword(null,\"failed\",\"failed\",-1397425762),null], null), null);\r\n/**\r\n * This is just a testing function -- using ready-state as public interface and call the\r\n *   `set-{type}!` functions to change it as needed.\r\n */\r\nfulcro.client.impl.data_fetch.make_data_state = (function fulcro$client$impl$data_fetch$make_data_state(var_args){\r\nvar G__40894 = arguments.length;\r\nswitch (G__40894) {\r\ncase 1:\r\nreturn fulcro.client.impl.data_fetch.make_data_state.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn fulcro.client.impl.data_fetch.make_data_state.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\nfulcro.client.impl.data_fetch.make_data_state.cljs$core$IFn$_invoke$arity$1 = (function (type){\r\nreturn fulcro.client.impl.data_fetch.make_data_state.cljs$core$IFn$_invoke$arity$2(type,cljs.core.PersistentArrayMap.EMPTY);\r\n});\r\n\r\nfulcro.client.impl.data_fetch.make_data_state.cljs$core$IFn$_invoke$arity$2 = (function (type,params){\r\nif(cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(fulcro.client.impl.data_fetch.valid_types,type))){\r\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"type\",\"fulcro.client.impl.data-fetch/type\",296514265),type,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"params\",\"fulcro.client.impl.data-fetch/params\",1865690070),params], null);\r\n} else {\r\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"INVALID DATA STATE TYPE: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(type)].join(''),cljs.core.PersistentArrayMap.EMPTY);\r\n}\r\n});\r\n\r\nfulcro.client.impl.data_fetch.make_data_state.cljs$lang$maxFixedArity = 2;\r\n\r\n/**\r\n * Remove items from a query (AST) that have a key listed in the elision-set\r\n */\r\nfulcro.client.impl.data_fetch.elide_ast_nodes = (function fulcro$client$impl$data_fetch$elide_ast_nodes(p__40901,elision_set){\r\nvar map__40903 = p__40901;\r\nvar map__40903__$1 = ((((!((map__40903 == null)))?(((((map__40903.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__40903.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__40903):map__40903);\r\nvar ast = map__40903__$1;\r\nvar key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__40903__$1,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\r\nvar union_key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__40903__$1,new cljs.core.Keyword(null,\"union-key\",\"union-key\",1529707234));\r\nvar children = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__40903__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\r\nvar union_elision_QMARK_ = cljs.core.contains_QMARK_(elision_set,union_key);\r\nif(((union_elision_QMARK_) || (cljs.core.contains_QMARK_(elision_set,key)))){\r\nreturn null;\r\n} else {\r\nif(((union_elision_QMARK_) && ((cljs.core.count(children) <= (2))))){\r\ntry{fulcro.logging._log.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),\"fulcro.client.impl.data-fetch\",new cljs.core.Keyword(null,\"line\",\"line\",212345235),279], null),new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Unions are not designed to be used with fewer than two children. Check your calls to Fulcro\\n        load functions where the :without set contains \",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([union_key], 0))], 0));\r\n}catch (e40905){if((e40905 instanceof Error)){\r\nvar e__31527__auto___40910 = e40905;\r\nfulcro.logging._log.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),\"fulcro.client.impl.data-fetch\",new cljs.core.Keyword(null,\"line\",\"line\",212345235),279], null),new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Log statement failed (arguments did not evaluate).\",e__31527__auto___40910], 0));\r\n} else {\r\nthrow e40905;\r\n\r\n}\r\n}} else {\r\n}\r\n\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(ast,new cljs.core.Keyword(null,\"children\",\"children\",-940561982),((function (union_elision_QMARK_,map__40903,map__40903__$1,ast,key,union_key,children){\r\nreturn (function (c){\r\nreturn cljs.core.vec(cljs.core.keep.cljs$core$IFn$_invoke$arity$2(((function (union_elision_QMARK_,map__40903,map__40903__$1,ast,key,union_key,children){\r\nreturn (function (p1__40899_SHARP_){\r\nreturn (fulcro.client.impl.data_fetch.elide_ast_nodes.cljs$core$IFn$_invoke$arity$2 ? fulcro.client.impl.data_fetch.elide_ast_nodes.cljs$core$IFn$_invoke$arity$2(p1__40899_SHARP_,elision_set) : fulcro.client.impl.data_fetch.elide_ast_nodes.call(null,p1__40899_SHARP_,elision_set));\r\n});})(union_elision_QMARK_,map__40903,map__40903__$1,ast,key,union_key,children))\r\n,c));\r\n});})(union_elision_QMARK_,map__40903,map__40903__$1,ast,key,union_key,children))\r\n);\r\n}\r\n});\r\n/**\r\n * Inject parameters into elements of the top-level query.\r\n * \r\n *   `params` is a map from keyword (on the query in the AST) to parameter maps. So, given the AST for this query:\r\n * \r\n *   ```\r\n *   [:a :b :c]\r\n *   ```\r\n * \r\n *   and a `params` of `{:a {:x 1} :c {:y 2}}` you'll get an AST representing:\r\n * \r\n *   ```\r\n *   [(:a {:x 1}) :b (:c {:y 2})]\r\n *   ```\r\n *   \r\n */\r\nfulcro.client.impl.data_fetch.inject_query_params = (function fulcro$client$impl$data_fetch$inject_query_params(ast,params){\r\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(ast,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"children\",\"children\",-940561982)], null),(function (p1__40913_SHARP_){\r\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (c){\r\nvar temp__5455__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(params,new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(c));\r\nif(cljs.core.truth_(temp__5455__auto__)){\r\nvar new_params = temp__5455__auto__;\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(c,new cljs.core.Keyword(null,\"params\",\"params\",710516235),cljs.core.merge,new_params);\r\n} else {\r\nreturn c;\r\n}\r\n}),p1__40913_SHARP_);\r\n}));\r\n});\r\n/**\r\n * Generate a ready-to-load state with all of the necessary details to do\r\n *   remoting and merging.\r\n */\r\nfulcro.client.impl.data_fetch.ready_state = (function fulcro$client$impl$data_fetch$ready_state(p__40918){\r\nvar map__40919 = p__40918;\r\nvar map__40919__$1 = ((((!((map__40919 == null)))?(((((map__40919.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__40919.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__40919):map__40919);\r\nvar target = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__40919__$1,new cljs.core.Keyword(null,\"target\",\"target\",253001721));\r\nvar query = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__40919__$1,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\r\nvar abort_id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__40919__$1,new cljs.core.Keyword(null,\"abort-id\",\"abort-id\",1559937819));\r\nvar remote = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__40919__$1,new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576));\r\nvar refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__40919__$1,new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525),cljs.core.PersistentVector.EMPTY);\r\nvar parallel = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__40919__$1,new cljs.core.Keyword(null,\"parallel\",\"parallel\",-1863607128));\r\nvar fallback = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__40919__$1,new cljs.core.Keyword(null,\"fallback\",\"fallback\",761637929));\r\nvar marker = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__40919__$1,new cljs.core.Keyword(null,\"marker\",\"marker\",865118313),true);\r\nvar params = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__40919__$1,new cljs.core.Keyword(null,\"params\",\"params\",710516235));\r\nvar field = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__40919__$1,new cljs.core.Keyword(null,\"field\",\"field\",-1302436500));\r\nvar env = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__40919__$1,new cljs.core.Keyword(null,\"env\",\"env\",-1815813235));\r\nvar post_mutation = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__40919__$1,new cljs.core.Keyword(null,\"post-mutation\",\"post-mutation\",-1076606705));\r\nvar without = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__40919__$1,new cljs.core.Keyword(null,\"without\",\"without\",1107036688),cljs.core.PersistentHashSet.EMPTY);\r\nvar initialize = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__40919__$1,new cljs.core.Keyword(null,\"initialize\",\"initialize\",609952913));\r\nvar ident = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__40919__$1,new cljs.core.Keyword(null,\"ident\",\"ident\",-742346));\r\nvar post_mutation_params = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__40919__$1,new cljs.core.Keyword(null,\"post-mutation-params\",\"post-mutation-params\",-849425897));\r\nif(cljs.core.truth_((function (){var or__3949__auto__ = field;\r\nif(cljs.core.truth_(or__3949__auto__)){\r\nreturn or__3949__auto__;\r\n} else {\r\nreturn query;\r\n}\r\n})())){\r\n} else {\r\nthrow (new Error([\"Assert failed: \",\"You must supply a query or a field/ident pair\",\"\\n\",\"(or field query)\"].join('')));\r\n}\r\n\r\nif(cljs.core.truth_((function (){var or__3949__auto__ = cljs.core.not(field);\r\nif(or__3949__auto__){\r\nreturn or__3949__auto__;\r\n} else {\r\nvar and__3938__auto__ = field;\r\nif(cljs.core.truth_(and__3938__auto__)){\r\nreturn fulcro.util.ident_QMARK_(ident);\r\n} else {\r\nreturn and__3938__auto__;\r\n}\r\n}\r\n})())){\r\n} else {\r\nthrow (new Error([\"Assert failed: \",\"Field requires ident\",\"\\n\",\"(or (not field) (and field (util/ident? ident)))\"].join('')));\r\n}\r\n\r\nvar old_ast = fulcro.client.primitives.query__GT_ast(query);\r\nvar ast = (function (){var G__40924 = old_ast;\r\nvar G__40924__$1 = (cljs.core.truth_(cljs.core.not_empty(without))?fulcro.client.impl.data_fetch.elide_ast_nodes(G__40924,without):G__40924);\r\nvar G__40924__$2 = (cljs.core.truth_((function (){var and__3938__auto__ = field;\r\nif(cljs.core.truth_(and__3938__auto__)){\r\nvar and__3938__auto____$1 = params;\r\nif(cljs.core.truth_(and__3938__auto____$1)){\r\nreturn !(cljs.core.contains_QMARK_(params,field));\r\n} else {\r\nreturn and__3938__auto____$1;\r\n}\r\n} else {\r\nreturn and__3938__auto__;\r\n}\r\n})())?fulcro.client.impl.data_fetch.inject_query_params(G__40924__$1,cljs.core.PersistentArrayMap.createAsIfByAssoc([field,params])):G__40924__$1);\r\nif(cljs.core.truth_(params)){\r\nreturn fulcro.client.impl.data_fetch.inject_query_params(G__40924__$2,params);\r\n} else {\r\nreturn G__40924__$2;\r\n}\r\n})();\r\nvar query_field = cljs.core.first(query);\r\nvar key = (cljs.core.truth_(fulcro.util.join_QMARK_(query_field))?fulcro.util.join_key(query_field):query_field);\r\nvar query_SINGLEQUOTE_ = fulcro.client.primitives.ast__GT_query(ast);\r\nif(((cljs.core.not(field)) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(field,key)))){\r\n} else {\r\nthrow (new Error([\"Assert failed: \",\"Component fetch query does not match supplied field.\",\"\\n\",\"(or (not field) (= field key))\"].join('')));\r\n}\r\n\r\nreturn cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"initialize\",\"fulcro.client.impl.data-fetch/initialize\",-1870031324),new cljs.core.Keyword(\"fulcro.client.network\",\"abort-id\",\"fulcro.client.network/abort-id\",-22430267),new cljs.core.Keyword(\"fulcro.history\",\"tx-time\",\"fulcro.history/tx-time\",816348456),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"uuid\",\"fulcro.client.impl.data-fetch/uuid\",1534451240),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"parallel\",\"fulcro.client.impl.data-fetch/parallel\",1010707051),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"target\",\"fulcro.client.impl.data-fetch/target\",1805324748),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"original-env\",\"fulcro.client.impl.data-fetch/original-env\",1405563884),new cljs.core.Keyword(\"fulcro.client.primitives\",\"ident\",\"fulcro.client.primitives/ident\",-1688940366),new cljs.core.Keyword(\"fulcro.client.primitives\",\"remote\",\"fulcro.client.primitives/remote\",82057012),new cljs.core.Keyword(\"fulcro.client.primitives\",\"query\",\"fulcro.client.primitives/query\",261276758),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"refresh\",\"fulcro.client.impl.data-fetch/refresh\",-12271976),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"type\",\"fulcro.client.impl.data-fetch/type\",296514265),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"post-mutation-params\",\"fulcro.client.impl.data-fetch/post-mutation-params\",430524764),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"fallback\",\"fulcro.client.impl.data-fetch/fallback\",-644539810),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"marker\",\"fulcro.client.impl.data-fetch/marker\",392378046),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"post-mutation\",\"fulcro.client.impl.data-fetch/post-mutation\",-75376962),new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"field\",\"fulcro.client.impl.data-fetch/field\",-439885921)],[initialize,abort_id,(cljs.core.truth_((function (){var G__40927 = env;\r\nif((G__40927 == null)){\r\nreturn null;\r\n} else {\r\nreturn new cljs.core.Keyword(null,\"reconciler\",\"reconciler\",-1832826966).cljs$core$IFn$_invoke$arity$1(G__40927);\r\n}\r\n})())?fulcro.client.primitives.get_current_time(new cljs.core.Keyword(null,\"reconciler\",\"reconciler\",-1832826966).cljs$core$IFn$_invoke$arity$1(env)):fulcro.history.max_tx_time),[cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.random_uuid())].join(''),parallel,target,cljs.core.with_meta(cljs.core.PersistentArrayMap.EMPTY,env),ident,remote,query_SINGLEQUOTE_,refresh,new cljs.core.Keyword(null,\"ready\",\"ready\",1086465795),post_mutation_params,fallback,marker,post_mutation,field]);\r\n});\r\n/**\r\n * Place a ready-to-load marker into the application state. This should be done from\r\n *   a mutate function that is abstractly loading something. This is intended for internal use.\r\n * \r\n *   See the `load` and `load-field` functions in `fulcro.client.data-fetch` for the public API.\r\n */\r\nfulcro.client.impl.data_fetch.mark_ready = (function fulcro$client$impl$data_fetch$mark_ready(p__40950){\r\nvar map__40951 = p__40950;\r\nvar map__40951__$1 = ((((!((map__40951 == null)))?(((((map__40951.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__40951.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__40951):map__40951);\r\nvar config = map__40951__$1;\r\nvar env = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__40951__$1,new cljs.core.Keyword(null,\"env\",\"env\",-1815813235));\r\nvar state = cljs.core.get.cljs$core$IFn$_invoke$arity$2(env,new cljs.core.Keyword(null,\"state\",\"state\",-1988618099));\r\nvar marker_QMARK_ = !((false === new cljs.core.Keyword(null,\"marker\",\"marker\",865118313).cljs$core$IFn$_invoke$arity$1(config)));\r\nvar load_request = fulcro.client.impl.data_fetch.ready_state(cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"marker\",\"marker\",865118313),true,new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"without\",\"without\",1107036688),cljs.core.PersistentHashSet.EMPTY,new cljs.core.Keyword(null,\"env\",\"env\",-1815813235),env], null),config], 0)));\r\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(state,((function (state,marker_QMARK_,load_request,map__40951,map__40951__$1,config,env){\r\nreturn (function (s){\r\nvar G__40954 = cljs.core.update.cljs$core$IFn$_invoke$arity$4(s,new cljs.core.Keyword(\"fulcro\",\"ready-to-load\",\"fulcro/ready-to-load\",127104696),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentVector.EMPTY),load_request);\r\nif(marker_QMARK_){\r\nreturn fulcro.client.impl.data_fetch.place_load_marker(G__40954,load_request);\r\n} else {\r\nreturn G__40954;\r\n}\r\n});})(state,marker_QMARK_,load_request,map__40951,map__40951__$1,config,env))\r\n);\r\n});\r\n/**\r\n * Return the ident (if any) of the component related to the query in the data state marker. An ident is required\r\n *   to be present if the marker is targeting a field.\r\n */\r\nfulcro.client.impl.data_fetch.data_target = (function fulcro$client$impl$data_fetch$data_target(state){\r\nreturn new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"target\",\"fulcro.client.impl.data-fetch/target\",1805324748).cljs$core$IFn$_invoke$arity$1(state);\r\n});\r\n/**\r\n * Return the ident (if any) of the component related to the query in the data state marker. An ident is required\r\n *   to be present if the marker is targeting a field.\r\n */\r\nfulcro.client.impl.data_fetch.data_ident = (function fulcro$client$impl$data_fetch$data_ident(state){\r\nreturn new cljs.core.Keyword(\"fulcro.client.primitives\",\"ident\",\"fulcro.client.primitives/ident\",-1688940366).cljs$core$IFn$_invoke$arity$1(state);\r\n});\r\n/**\r\n * Get the query that will be sent to the server as a result of the given data state marker\r\n */\r\nfulcro.client.impl.data_fetch.data_query = (function fulcro$client$impl$data_fetch$data_query(state){\r\nif(cljs.core.truth_(fulcro.client.impl.data_fetch.data_ident(state))){\r\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentArrayMap.createAsIfByAssoc([fulcro.client.impl.data_fetch.data_ident(state),new cljs.core.Keyword(\"fulcro.client.primitives\",\"query\",\"fulcro.client.primitives/query\",261276758).cljs$core$IFn$_invoke$arity$1(state)])], null);\r\n} else {\r\nreturn new cljs.core.Keyword(\"fulcro.client.primitives\",\"query\",\"fulcro.client.primitives/query\",261276758).cljs$core$IFn$_invoke$arity$1(state);\r\n}\r\n});\r\n/**\r\n * Get the target field (if any) from the data state marker\r\n */\r\nfulcro.client.impl.data_fetch.data_field = (function fulcro$client$impl$data_fetch$data_field(state){\r\nreturn new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"field\",\"fulcro.client.impl.data-fetch/field\",-439885921).cljs$core$IFn$_invoke$arity$1(state);\r\n});\r\n/**\r\n * Get the UUID of the data fetch\r\n */\r\nfulcro.client.impl.data_fetch.data_uuid = (function fulcro$client$impl$data_fetch$data_uuid(state){\r\nreturn new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"uuid\",\"fulcro.client.impl.data-fetch/uuid\",1534451240).cljs$core$IFn$_invoke$arity$1(state);\r\n});\r\n/**\r\n * Returns the ID of the data marker, or nil/false if there isn't one. True means to use the old marker behavior of\r\n *   replacing the data in app state with a marker (DEPRECATED)\r\n */\r\nfulcro.client.impl.data_fetch.data_marker = (function fulcro$client$impl$data_fetch$data_marker(state){\r\nreturn new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"marker\",\"fulcro.client.impl.data-fetch/marker\",392378046).cljs$core$IFn$_invoke$arity$1(state);\r\n});\r\n/**\r\n * Test if the user desires a copy of the state marker to appear in the app state at the data path of the target data.\r\n */\r\nfulcro.client.impl.data_fetch.data_marker_QMARK_ = (function fulcro$client$impl$data_fetch$data_marker_QMARK_(state){\r\nreturn cljs.core.boolean$(new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"marker\",\"fulcro.client.impl.data-fetch/marker\",392378046).cljs$core$IFn$_invoke$arity$1(state));\r\n});\r\n/**\r\n * Get the list of query keywords that should be refreshed (re-rendered) when this load completes.\r\n */\r\nfulcro.client.impl.data_fetch.data_refresh = (function fulcro$client$impl$data_fetch$data_refresh(state){\r\nreturn new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"refresh\",\"fulcro.client.impl.data-fetch/refresh\",-12271976).cljs$core$IFn$_invoke$arity$1(state);\r\n});\r\n/**\r\n * Get the remote that this marker is meant to talk to\r\n */\r\nfulcro.client.impl.data_fetch.data_remote = (function fulcro$client$impl$data_fetch$data_remote(state){\r\nreturn new cljs.core.Keyword(\"fulcro.client.primitives\",\"remote\",\"fulcro.client.primitives/remote\",82057012).cljs$core$IFn$_invoke$arity$1(state);\r\n});\r\n/**\r\n * Get the 'primary' query key of the data fetch. This is defined as the first keyword of the overall query (which might\r\n *   be a simple prop or join key for example)\r\n */\r\nfulcro.client.impl.data_fetch.data_query_key = (function fulcro$client$impl$data_fetch$data_query_key(state){\r\nvar ast = fulcro.client.primitives.query__GT_ast(new cljs.core.Keyword(\"fulcro.client.primitives\",\"query\",\"fulcro.client.primitives/query\",261276758).cljs$core$IFn$_invoke$arity$1(state));\r\nvar node = cljs.core.first(new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(ast));\r\nreturn new cljs.core.Keyword(null,\"key\",\"key\",-1516042587).cljs$core$IFn$_invoke$arity$1(node);\r\n});\r\n/**\r\n * Get the app-state database path of the target of the load that the given data state marker is trying to load.\r\n */\r\nfulcro.client.impl.data_fetch.data_path = (function fulcro$client$impl$data_fetch$data_path(state){\r\nvar target = fulcro.client.impl.data_fetch.data_target(state);\r\nif(cljs.core.truth_((function (){var and__3938__auto__ = (fulcro.client.impl.data_fetch.data_field(state) == null);\r\nif(and__3938__auto__){\r\nvar and__3938__auto____$1 = cljs.core.vector_QMARK_(target);\r\nif(and__3938__auto____$1){\r\nreturn cljs.core.not_empty(target);\r\n} else {\r\nreturn and__3938__auto____$1;\r\n}\r\n} else {\r\nreturn and__3938__auto__;\r\n}\r\n})())){\r\nreturn target;\r\n} else {\r\nif(((cljs.core.vector_QMARK_(fulcro.client.impl.data_fetch.data_ident(state))) && ((fulcro.client.impl.data_fetch.data_field(state) instanceof cljs.core.Keyword)))){\r\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(fulcro.client.impl.data_fetch.data_ident(state),fulcro.client.impl.data_fetch.data_field(state));\r\n} else {\r\nif(fulcro.util.ident_QMARK_(fulcro.client.impl.data_fetch.data_query_key(state))){\r\nreturn fulcro.client.impl.data_fetch.data_query_key(state);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [fulcro.client.impl.data_fetch.data_query_key(state)], null);\r\n\r\n}\r\n}\r\n}\r\n});\r\n/**\r\n * Get the parameters that the user wants to add to the first join/keyword of the data fetch query.\r\n */\r\nfulcro.client.impl.data_fetch.data_params = (function fulcro$client$impl$data_fetch$data_params(state){\r\nreturn new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"params\",\"fulcro.client.impl.data-fetch/params\",1865690070).cljs$core$IFn$_invoke$arity$1(state);\r\n});\r\nvar set_type = (function fulcro$client$impl$data_fetch$set_type(state,type,params){\r\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([state,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"type\",\"fulcro.client.impl.data-fetch/type\",296514265),type,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"params\",\"fulcro.client.impl.data-fetch/params\",1865690070),params], null)], 0));\r\n});\r\n/**\r\n * Returns a state (based on the input state) that is in the 'ready' to load state.\r\n */\r\nfulcro.client.impl.data_fetch.set_ready_BANG_ = (function fulcro$client$impl$data_fetch$set_ready_BANG_(var_args){\r\nvar G__41049 = arguments.length;\r\nswitch (G__41049) {\r\ncase 1:\r\nreturn fulcro.client.impl.data_fetch.set_ready_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn fulcro.client.impl.data_fetch.set_ready_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\nfulcro.client.impl.data_fetch.set_ready_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (state){\r\nreturn fulcro.client.impl.data_fetch.set_ready_BANG_.cljs$core$IFn$_invoke$arity$2(state,null);\r\n});\r\n\r\nfulcro.client.impl.data_fetch.set_ready_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (state,params){\r\nreturn set_type(state,new cljs.core.Keyword(null,\"ready\",\"ready\",1086465795),params);\r\n});\r\n\r\nfulcro.client.impl.data_fetch.set_ready_BANG_.cljs$lang$maxFixedArity = 2;\r\n\r\n\r\n/**\r\n * Returns a marker (based on the input state) that is in the loading state (and ensures that it has a UUID)\r\n */\r\nfulcro.client.impl.data_fetch.set_loading_BANG_ = (function fulcro$client$impl$data_fetch$set_loading_BANG_(var_args){\r\nvar G__41061 = arguments.length;\r\nswitch (G__41061) {\r\ncase 1:\r\nreturn fulcro.client.impl.data_fetch.set_loading_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn fulcro.client.impl.data_fetch.set_loading_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\nfulcro.client.impl.data_fetch.set_loading_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (state){\r\nreturn fulcro.client.impl.data_fetch.set_loading_BANG_.cljs$core$IFn$_invoke$arity$2(state,null);\r\n});\r\n\r\nfulcro.client.impl.data_fetch.set_loading_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (state,params){\r\nvar rv = set_type(state,new cljs.core.Keyword(null,\"loading\",\"loading\",-737050189),params);\r\nreturn cljs.core.with_meta(rv,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),rv], null));\r\n});\r\n\r\nfulcro.client.impl.data_fetch.set_loading_BANG_.cljs$lang$maxFixedArity = 2;\r\n\r\n\r\n/**\r\n * Returns a marker (based on the input state) that is in the error state\r\n */\r\nfulcro.client.impl.data_fetch.set_failed_BANG_ = (function fulcro$client$impl$data_fetch$set_failed_BANG_(var_args){\r\nvar G__41069 = arguments.length;\r\nswitch (G__41069) {\r\ncase 1:\r\nreturn fulcro.client.impl.data_fetch.set_failed_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn fulcro.client.impl.data_fetch.set_failed_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\nfulcro.client.impl.data_fetch.set_failed_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (state){\r\nreturn fulcro.client.impl.data_fetch.set_failed_BANG_.cljs$core$IFn$_invoke$arity$2(state,null);\r\n});\r\n\r\nfulcro.client.impl.data_fetch.set_failed_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (state,params){\r\nreturn set_type(state,new cljs.core.Keyword(null,\"failed\",\"failed\",-1397425762),params);\r\n});\r\n\r\nfulcro.client.impl.data_fetch.set_failed_BANG_.cljs$lang$maxFixedArity = 2;\r\n\r\n/**\r\n * Composes together the queries of a sequence of data states into a single query.\r\n */\r\nfulcro.client.impl.data_fetch.full_query = (function fulcro$client$impl$data_fetch$full_query(items){\r\nreturn cljs.core.vec(cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (item){\r\nreturn fulcro.client.impl.data_fetch.data_query(item);\r\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([items], 0)));\r\n});\r\nfulcro.client.impl.data_fetch.set_global_loading_BANG_ = (function fulcro$client$impl$data_fetch$set_global_loading_BANG_(reconciler){\r\n\r\nvar state_atom = fulcro.client.primitives.app_state(reconciler);\r\nvar loading_QMARK_ = cljs.core.boolean$(cljs.core.seq(cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(state_atom),new cljs.core.Keyword(\"fulcro\",\"loads-in-progress\",\"fulcro/loads-in-progress\",-1196090224))));\r\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state_atom,cljs.core.assoc,new cljs.core.Keyword(\"ui\",\"loading-data\",\"ui/loading-data\",-1566515143),loading_QMARK_);\r\n});\r\nfulcro.client.impl.data_fetch.replacement_target_QMARK_ = (function fulcro$client$impl$data_fetch$replacement_target_QMARK_(t){\r\nreturn fulcro.client.impl.data_targeting.replacement_target_QMARK_(t);\r\n});\r\nfulcro.client.impl.data_fetch.prepend_target_QMARK_ = (function fulcro$client$impl$data_fetch$prepend_target_QMARK_(t){\r\nreturn fulcro.client.impl.data_targeting.prepend_target_QMARK_(t);\r\n});\r\nfulcro.client.impl.data_fetch.append_target_QMARK_ = (function fulcro$client$impl$data_fetch$append_target_QMARK_(t){\r\nreturn fulcro.client.impl.data_targeting.append_target_QMARK_(t);\r\n});\r\nfulcro.client.impl.data_fetch.multiple_targets_QMARK_ = (function fulcro$client$impl$data_fetch$multiple_targets_QMARK_(t){\r\nreturn fulcro.client.impl.data_targeting.multiple_targets_QMARK_(t);\r\n});\r\nfulcro.client.impl.data_fetch.special_target_QMARK_ = (function fulcro$client$impl$data_fetch$special_target_QMARK_(t){\r\nreturn fulcro.client.impl.data_targeting.special_target_QMARK_(t);\r\n});\r\nfulcro.client.impl.data_fetch.process_target = fulcro.client.impl.data_targeting.process_target;\r\n/**\r\n * For items that are manually targeted, move them in app state from their result location to their target location.\r\n */\r\nfulcro.client.impl.data_fetch.relocate_targeted_results_BANG_ = (function fulcro$client$impl$data_fetch$relocate_targeted_results_BANG_(state_atom,items){\r\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(state_atom,(function (state_map){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (state,item){\r\nvar default_target = fulcro.client.impl.data_fetch.data_query_key(item);\r\nvar explicit_target = (function (){var or__3949__auto__ = fulcro.client.impl.data_fetch.data_target(item);\r\nif(cljs.core.truth_(or__3949__auto__)){\r\nreturn or__3949__auto__;\r\n} else {\r\nreturn cljs.core.PersistentVector.EMPTY;\r\n}\r\n})();\r\nvar relocate_QMARK_ = (function (){var and__3938__auto__ = (fulcro.client.impl.data_fetch.data_field(item) == null);\r\nif(and__3938__auto__){\r\nreturn cljs.core.not_empty(explicit_target);\r\n} else {\r\nreturn and__3938__auto__;\r\n}\r\n})();\r\nif(cljs.core.truth_(relocate_QMARK_)){\r\nreturn (fulcro.client.impl.data_fetch.process_target.cljs$core$IFn$_invoke$arity$3 ? fulcro.client.impl.data_fetch.process_target.cljs$core$IFn$_invoke$arity$3(state,default_target,explicit_target) : fulcro.client.impl.data_fetch.process_target.call(null,state,default_target,explicit_target));\r\n} else {\r\nreturn state;\r\n}\r\n}),state_map,items);\r\n}));\r\n});\r\n/**\r\n * Returns app-state without the load marker for the given item.\r\n */\r\nfulcro.client.impl.data_fetch.remove_marker = (function fulcro$client$impl$data_fetch$remove_marker(app_state,item){\r\nvar marker_id = fulcro.client.impl.data_fetch.data_marker(item);\r\nvar legacy_marker_QMARK_ = marker_id === true;\r\nif(legacy_marker_QMARK_){\r\nvar path = fulcro.client.impl.data_fetch.data_path(item);\r\nvar data = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app_state,path);\r\nif(((cljs.core.map_QMARK_(data)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"ui\",\"fetch-state\",\"ui/fetch-state\",1030289927),null], null), null),cljs.core.set(cljs.core.keys(data)))))){\r\nreturn cljs.core.assoc_in(app_state,path,null);\r\n} else {\r\nif(((cljs.core.map_QMARK_(data)) && (cljs.core.contains_QMARK_(data,new cljs.core.Keyword(\"ui\",\"fetch-state\",\"ui/fetch-state\",1030289927))))){\r\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(app_state,path,cljs.core.dissoc,new cljs.core.Keyword(\"ui\",\"fetch-state\",\"ui/fetch-state\",1030289927));\r\n} else {\r\nreturn cljs.core.assoc_in(app_state,path,null);\r\n\r\n}\r\n}\r\n} else {\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(app_state,fulcro.client.impl.data_fetch.marker_table,cljs.core.dissoc,marker_id);\r\n}\r\n});\r\n/**\r\n * Build a callback env for post mutations and fallbacks\r\n */\r\nfulcro.client.impl.data_fetch.callback_env = (function fulcro$client$impl$data_fetch$callback_env(reconciler,load_request,original_env){\r\nvar state = fulcro.client.primitives.app_state(reconciler);\r\nvar map__41165 = load_request;\r\nvar map__41165__$1 = ((((!((map__41165 == null)))?(((((map__41165.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__41165.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__41165):map__41165);\r\nvar parallel = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__41165__$1,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"parallel\",\"fulcro.client.impl.data-fetch/parallel\",1010707051));\r\nvar target = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__41165__$1,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"target\",\"fulcro.client.impl.data-fetch/target\",1805324748));\r\nvar ident = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__41165__$1,new cljs.core.Keyword(\"fulcro.client.primitives\",\"ident\",\"fulcro.client.primitives/ident\",-1688940366));\r\nvar remote = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__41165__$1,new cljs.core.Keyword(\"fulcro.client.primitives\",\"remote\",\"fulcro.client.primitives/remote\",82057012));\r\nvar query = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__41165__$1,new cljs.core.Keyword(\"fulcro.client.primitives\",\"query\",\"fulcro.client.primitives/query\",261276758));\r\nvar refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__41165__$1,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"refresh\",\"fulcro.client.impl.data-fetch/refresh\",-12271976));\r\nvar post_mutation_params = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__41165__$1,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"post-mutation-params\",\"fulcro.client.impl.data-fetch/post-mutation-params\",430524764));\r\nvar fallback = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__41165__$1,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"fallback\",\"fulcro.client.impl.data-fetch/fallback\",-644539810));\r\nvar marker = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__41165__$1,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"marker\",\"fulcro.client.impl.data-fetch/marker\",392378046));\r\nvar post_mutation = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__41165__$1,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"post-mutation\",\"fulcro.client.impl.data-fetch/post-mutation\",-75376962));\r\nvar field = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__41165__$1,new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"field\",\"fulcro.client.impl.data-fetch/field\",-439885921));\r\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([original_env,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),state,new cljs.core.Keyword(null,\"load-request\",\"load-request\",693664659),(function (){var G__41173 = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"target\",\"target\",253001721),target,new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),remote,new cljs.core.Keyword(null,\"marker\",\"marker\",865118313),marker,new cljs.core.Keyword(null,\"server-query\",\"server-query\",-191976706),query,new cljs.core.Keyword(null,\"parallel\",\"parallel\",-1863607128),cljs.core.boolean$(parallel)], null);\r\nvar G__41173__$1 = (cljs.core.truth_(post_mutation)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__41173,new cljs.core.Keyword(null,\"post-mutation\",\"post-mutation\",-1076606705),post_mutation):G__41173);\r\nvar G__41173__$2 = (cljs.core.truth_(post_mutation_params)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__41173__$1,new cljs.core.Keyword(null,\"post-mutation-params\",\"post-mutation-params\",-849425897),post_mutation_params):G__41173__$1);\r\nvar G__41173__$3 = (cljs.core.truth_(refresh)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__41173__$2,new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525),refresh):G__41173__$2);\r\nif(cljs.core.truth_(fallback)){\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__41173__$3,new cljs.core.Keyword(null,\"fallback\",\"fallback\",761637929),fallback);\r\n} else {\r\nreturn G__41173__$3;\r\n}\r\n})()], null)], 0));\r\n});\r\n/**\r\n * Ability to mock in tests\r\n */\r\nfulcro.client.impl.data_fetch.tick_BANG_ = (function fulcro$client$impl$data_fetch$tick_BANG_(r){\r\nreturn fulcro.client.impl.protocols.tick_BANG_(r);\r\n});\r\n/**\r\n * Generates a callback that processes all of the post-processing steps once a remote ***load*** has completed. This includes:\r\n * \r\n *   - Marking the items that were queried for but not returned as 'missing' (see documentation on mark and sweep of db)\r\n *   - Refreshing elements of the UI that were included in the data fetch :refresh option\r\n *   - Removing loading markers related to the executed loads that were not overwritten by incoming data\r\n *   - Merging the incoming data into the normalized database\r\n *   - Running post-mutations for any fetches that completed\r\n *   - Updating the global loading marker\r\n *   - Triggering re-render for all data item refresh lists\r\n *   - Removing the activity from history tracking\r\n *   \r\n */\r\nfulcro.client.impl.data_fetch.loaded_callback = (function fulcro$client$impl$data_fetch$loaded_callback(reconciler){\r\nreturn (function (response,items){\r\nvar query = fulcro.client.impl.data_fetch.full_query(items);\r\nvar base_merge = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (query){\r\nreturn (function (initial_state,item){\r\nvar temp__5455__auto__ = new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"initialize\",\"fulcro.client.impl.data-fetch/initialize\",-1870031324).cljs$core$IFn$_invoke$arity$1(item);\r\nif(cljs.core.truth_(temp__5455__auto__)){\r\nvar item_tree = temp__5455__auto__;\r\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([initial_state,item_tree], 0));\r\n} else {\r\nreturn initial_state;\r\n}\r\n});})(query))\r\n,cljs.core.PersistentArrayMap.EMPTY,items);\r\nvar response__$1 = fulcro.util.deep_merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([base_merge,response], 0));\r\nvar loading_items = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$2(fulcro.client.impl.data_fetch.set_loading_BANG_,items));\r\nvar refresh_set = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.createAsIfByAssoc([new cljs.core.Keyword(\"ui\",\"fetch-state\",\"ui/fetch-state\",1030289927),fulcro.client.impl.data_fetch.marker_table,new cljs.core.Keyword(\"ui\",\"loading-data\",\"ui/loading-data\",-1566515143)]),cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(fulcro.client.impl.data_fetch.data_refresh,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([items], 0)));\r\nvar marked_response = fulcro.client.primitives.mark_missing(response__$1,query);\r\nvar explicit_refresh = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.vec(refresh_set),cljs.core.remove.cljs$core$IFn$_invoke$arity$1(cljs.core.symbol_QMARK_),cljs.core.keys(marked_response));\r\nvar app_state = fulcro.client.primitives.app_state(reconciler);\r\nvar ran_mutations = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(false);\r\nvar remove_markers_BANG_ = ((function (query,base_merge,response__$1,loading_items,refresh_set,marked_response,explicit_refresh,app_state,ran_mutations){\r\nreturn (function (){\r\nvar seq__41191 = cljs.core.seq(loading_items);\r\nvar chunk__41192 = null;\r\nvar count__41193 = (0);\r\nvar i__41194 = (0);\r\nwhile(true){\r\nif((i__41194 < count__41193)){\r\nvar item = chunk__41192.cljs$core$IIndexed$_nth$arity$2(null,i__41194);\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(app_state,((function (seq__41191,chunk__41192,count__41193,i__41194,item,query,base_merge,response__$1,loading_items,refresh_set,marked_response,explicit_refresh,app_state,ran_mutations){\r\nreturn (function (s){\r\nvar G__41196 = s;\r\nvar G__41196__$1 = cljs.core.update.cljs$core$IFn$_invoke$arity$4(G__41196,new cljs.core.Keyword(\"fulcro\",\"loads-in-progress\",\"fulcro/loads-in-progress\",-1196090224),cljs.core.disj,fulcro.client.impl.data_fetch.data_uuid(item))\r\n;\r\nif(cljs.core.truth_(fulcro.client.impl.data_fetch.data_marker_QMARK_(item))){\r\nreturn fulcro.client.impl.data_fetch.remove_marker(G__41196__$1,item);\r\n} else {\r\nreturn G__41196__$1;\r\n}\r\n});})(seq__41191,chunk__41192,count__41193,i__41194,item,query,base_merge,response__$1,loading_items,refresh_set,marked_response,explicit_refresh,app_state,ran_mutations))\r\n);\r\n\r\n\r\nvar G__41270 = seq__41191;\r\nvar G__41271 = chunk__41192;\r\nvar G__41272 = count__41193;\r\nvar G__41273 = (i__41194 + (1));\r\nseq__41191 = G__41270;\r\nchunk__41192 = G__41271;\r\ncount__41193 = G__41272;\r\ni__41194 = G__41273;\r\ncontinue;\r\n} else {\r\nvar temp__5457__auto__ = cljs.core.seq(seq__41191);\r\nif(temp__5457__auto__){\r\nvar seq__41191__$1 = temp__5457__auto__;\r\nif(cljs.core.chunked_seq_QMARK_(seq__41191__$1)){\r\nvar c__4351__auto__ = cljs.core.chunk_first(seq__41191__$1);\r\nvar G__41279 = cljs.core.chunk_rest(seq__41191__$1);\r\nvar G__41280 = c__4351__auto__;\r\nvar G__41281 = cljs.core.count(c__4351__auto__);\r\nvar G__41282 = (0);\r\nseq__41191 = G__41279;\r\nchunk__41192 = G__41280;\r\ncount__41193 = G__41281;\r\ni__41194 = G__41282;\r\ncontinue;\r\n} else {\r\nvar item = cljs.core.first(seq__41191__$1);\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(app_state,((function (seq__41191,chunk__41192,count__41193,i__41194,item,seq__41191__$1,temp__5457__auto__,query,base_merge,response__$1,loading_items,refresh_set,marked_response,explicit_refresh,app_state,ran_mutations){\r\nreturn (function (s){\r\nvar G__41201 = s;\r\nvar G__41201__$1 = cljs.core.update.cljs$core$IFn$_invoke$arity$4(G__41201,new cljs.core.Keyword(\"fulcro\",\"loads-in-progress\",\"fulcro/loads-in-progress\",-1196090224),cljs.core.disj,fulcro.client.impl.data_fetch.data_uuid(item))\r\n;\r\nif(cljs.core.truth_(fulcro.client.impl.data_fetch.data_marker_QMARK_(item))){\r\nreturn fulcro.client.impl.data_fetch.remove_marker(G__41201__$1,item);\r\n} else {\r\nreturn G__41201__$1;\r\n}\r\n});})(seq__41191,chunk__41192,count__41193,i__41194,item,seq__41191__$1,temp__5457__auto__,query,base_merge,response__$1,loading_items,refresh_set,marked_response,explicit_refresh,app_state,ran_mutations))\r\n);\r\n\r\n\r\nvar G__41288 = cljs.core.next(seq__41191__$1);\r\nvar G__41289 = null;\r\nvar G__41290 = (0);\r\nvar G__41291 = (0);\r\nseq__41191 = G__41288;\r\nchunk__41192 = G__41289;\r\ncount__41193 = G__41290;\r\ni__41194 = G__41291;\r\ncontinue;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n}\r\nbreak;\r\n}\r\n});})(query,base_merge,response__$1,loading_items,refresh_set,marked_response,explicit_refresh,app_state,ran_mutations))\r\n;\r\nvar to_refresh = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.set(explicit_refresh));\r\nvar run_post_mutations_BANG_ = ((function (query,base_merge,response__$1,loading_items,refresh_set,marked_response,explicit_refresh,app_state,ran_mutations,remove_markers_BANG_,to_refresh){\r\nreturn (function (){\r\nvar seq__41204 = cljs.core.seq(loading_items);\r\nvar chunk__41205 = null;\r\nvar count__41206 = (0);\r\nvar i__41207 = (0);\r\nwhile(true){\r\nif((i__41207 < count__41206)){\r\nvar item = chunk__41205.cljs$core$IIndexed$_nth$arity$2(null,i__41207);\r\nvar temp__5457__auto___41298 = new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"post-mutation\",\"fulcro.client.impl.data-fetch/post-mutation\",-75376962).cljs$core$IFn$_invoke$arity$1(item);\r\nif(cljs.core.truth_(temp__5457__auto___41298)){\r\nvar mutation_symbol_41299 = temp__5457__auto___41298;\r\ncljs.core.reset_BANG_(ran_mutations,true);\r\n\r\nvar params_41302 = (function (){var or__3949__auto__ = new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"post-mutation-params\",\"fulcro.client.impl.data-fetch/post-mutation-params\",430524764).cljs$core$IFn$_invoke$arity$1(item);\r\nif(cljs.core.truth_(or__3949__auto__)){\r\nreturn or__3949__auto__;\r\n} else {\r\nreturn cljs.core.PersistentArrayMap.EMPTY;\r\n}\r\n})();\r\nvar original_env_41303 = cljs.core.meta(new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"original-env\",\"fulcro.client.impl.data-fetch/original-env\",1405563884).cljs$core$IFn$_invoke$arity$1(item));\r\nvar map__41210_41304 = (function (){var G__41214 = fulcro.client.impl.data_fetch.callback_env(reconciler,item,original_env_41303);\r\nvar G__41215 = mutation_symbol_41299;\r\nvar G__41216 = params_41302;\r\nreturn (fulcro.client.mutations.mutate.cljs$core$IFn$_invoke$arity$3 ? fulcro.client.mutations.mutate.cljs$core$IFn$_invoke$arity$3(G__41214,G__41215,G__41216) : fulcro.client.mutations.mutate.call(null,G__41214,G__41215,G__41216));\r\n})();\r\nvar map__41210_41305__$1 = ((((!((map__41210_41304 == null)))?(((((map__41210_41304.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__41210_41304.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__41210_41304):map__41210_41304);\r\nvar action_41306 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__41210_41305__$1,new cljs.core.Keyword(null,\"action\",\"action\",-811238024));\r\nvar refresh_41307 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__41210_41305__$1,new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525));\r\nif(cljs.core.seq(refresh_41307)){\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(to_refresh,cljs.core.into,refresh_41307);\r\n} else {\r\n}\r\n\r\nif(cljs.core.truth_(action_41306)){\r\n(action_41306.cljs$core$IFn$_invoke$arity$0 ? action_41306.cljs$core$IFn$_invoke$arity$0() : action_41306.call(null));\r\n} else {\r\n}\r\n} else {\r\n}\r\n\r\n\r\nvar G__41315 = seq__41204;\r\nvar G__41316 = chunk__41205;\r\nvar G__41317 = count__41206;\r\nvar G__41318 = (i__41207 + (1));\r\nseq__41204 = G__41315;\r\nchunk__41205 = G__41316;\r\ncount__41206 = G__41317;\r\ni__41207 = G__41318;\r\ncontinue;\r\n} else {\r\nvar temp__5457__auto__ = cljs.core.seq(seq__41204);\r\nif(temp__5457__auto__){\r\nvar seq__41204__$1 = temp__5457__auto__;\r\nif(cljs.core.chunked_seq_QMARK_(seq__41204__$1)){\r\nvar c__4351__auto__ = cljs.core.chunk_first(seq__41204__$1);\r\nvar G__41322 = cljs.core.chunk_rest(seq__41204__$1);\r\nvar G__41323 = c__4351__auto__;\r\nvar G__41324 = cljs.core.count(c__4351__auto__);\r\nvar G__41325 = (0);\r\nseq__41204 = G__41322;\r\nchunk__41205 = G__41323;\r\ncount__41206 = G__41324;\r\ni__41207 = G__41325;\r\ncontinue;\r\n} else {\r\nvar item = cljs.core.first(seq__41204__$1);\r\nvar temp__5457__auto___41328__$1 = new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"post-mutation\",\"fulcro.client.impl.data-fetch/post-mutation\",-75376962).cljs$core$IFn$_invoke$arity$1(item);\r\nif(cljs.core.truth_(temp__5457__auto___41328__$1)){\r\nvar mutation_symbol_41329 = temp__5457__auto___41328__$1;\r\ncljs.core.reset_BANG_(ran_mutations,true);\r\n\r\nvar params_41331 = (function (){var or__3949__auto__ = new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"post-mutation-params\",\"fulcro.client.impl.data-fetch/post-mutation-params\",430524764).cljs$core$IFn$_invoke$arity$1(item);\r\nif(cljs.core.truth_(or__3949__auto__)){\r\nreturn or__3949__auto__;\r\n} else {\r\nreturn cljs.core.PersistentArrayMap.EMPTY;\r\n}\r\n})();\r\nvar original_env_41332 = cljs.core.meta(new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"original-env\",\"fulcro.client.impl.data-fetch/original-env\",1405563884).cljs$core$IFn$_invoke$arity$1(item));\r\nvar map__41228_41333 = (function (){var G__41231 = fulcro.client.impl.data_fetch.callback_env(reconciler,item,original_env_41332);\r\nvar G__41232 = mutation_symbol_41329;\r\nvar G__41233 = params_41331;\r\nreturn (fulcro.client.mutations.mutate.cljs$core$IFn$_invoke$arity$3 ? fulcro.client.mutations.mutate.cljs$core$IFn$_invoke$arity$3(G__41231,G__41232,G__41233) : fulcro.client.mutations.mutate.call(null,G__41231,G__41232,G__41233));\r\n})();\r\nvar map__41228_41334__$1 = ((((!((map__41228_41333 == null)))?(((((map__41228_41333.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__41228_41333.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__41228_41333):map__41228_41333);\r\nvar action_41335 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__41228_41334__$1,new cljs.core.Keyword(null,\"action\",\"action\",-811238024));\r\nvar refresh_41336 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__41228_41334__$1,new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525));\r\nif(cljs.core.seq(refresh_41336)){\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(to_refresh,cljs.core.into,refresh_41336);\r\n} else {\r\n}\r\n\r\nif(cljs.core.truth_(action_41335)){\r\n(action_41335.cljs$core$IFn$_invoke$arity$0 ? action_41335.cljs$core$IFn$_invoke$arity$0() : action_41335.call(null));\r\n} else {\r\n}\r\n} else {\r\n}\r\n\r\n\r\nvar G__41352 = cljs.core.next(seq__41204__$1);\r\nvar G__41353 = null;\r\nvar G__41354 = (0);\r\nvar G__41355 = (0);\r\nseq__41204 = G__41352;\r\nchunk__41205 = G__41353;\r\ncount__41206 = G__41354;\r\ni__41207 = G__41355;\r\ncontinue;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n}\r\nbreak;\r\n}\r\n});})(query,base_merge,response__$1,loading_items,refresh_set,marked_response,explicit_refresh,app_state,ran_mutations,remove_markers_BANG_,to_refresh))\r\n;\r\nremove_markers_BANG_();\r\n\r\nfulcro.client.primitives.merge_BANG_.cljs$core$IFn$_invoke$arity$3(reconciler,marked_response,query);\r\n\r\nfulcro.client.impl.data_fetch.relocate_targeted_results_BANG_(app_state,loading_items);\r\n\r\nrun_post_mutations_BANG_();\r\n\r\nfulcro.client.impl.data_fetch.set_global_loading_BANG_(reconciler);\r\n\r\nfulcro.client.impl.data_fetch.tick_BANG_(reconciler);\r\n\r\nif(cljs.core.contains_QMARK_(refresh_set,new cljs.core.Keyword(\"fulcro\",\"force-root\",\"fulcro/force-root\",1965847682))){\r\nreturn fulcro.client.primitives.force_root_render_BANG_(reconciler);\r\n} else {\r\nreturn fulcro.client.util.force_render.cljs$core$IFn$_invoke$arity$2(reconciler,cljs.core.vec(cljs.core.deref(to_refresh)));\r\n}\r\n});\r\n});\r\n/**\r\n * Generates a callback that is used whenever a hard server error occurs (status code 400+ or network error).\r\n * \r\n *   The generated callback:\r\n * \r\n *   - Replaces affected loading markers with error markers (if :marker is true on the load item)\r\n *   - Runs fallbacks associated with the loads\r\n *   - Sets the global error marker (:fulcro/server-error)\r\n *   - Refreshes UI (from root if there were fallbacks)\r\n *   \r\n */\r\nfulcro.client.impl.data_fetch.error_callback = (function fulcro$client$impl$data_fetch$error_callback(reconciler){\r\nreturn (function (error,items){\r\nvar loading_items = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$2(fulcro.client.impl.data_fetch.set_loading_BANG_,items));\r\nvar app_state = fulcro.client.primitives.app_state(reconciler);\r\nvar ran_fallbacks = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(false);\r\nvar mark_errors = ((function (loading_items,app_state,ran_fallbacks){\r\nreturn (function (){\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(app_state,cljs.core.assoc,new cljs.core.Keyword(\"fulcro\",\"server-error\",\"fulcro/server-error\",-1254037316),error);\r\n\r\nvar seq__41371 = cljs.core.seq(loading_items);\r\nvar chunk__41372 = null;\r\nvar count__41373 = (0);\r\nvar i__41374 = (0);\r\nwhile(true){\r\nif((i__41374 < count__41373)){\r\nvar item = chunk__41372.cljs$core$IIndexed$_nth$arity$2(null,i__41374);\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(app_state,((function (seq__41371,chunk__41372,count__41373,i__41374,item,loading_items,app_state,ran_fallbacks){\r\nreturn (function (s){\r\nvar G__41377 = s;\r\nvar G__41377__$1 = (cljs.core.truth_((function (){var and__3938__auto__ = fulcro.client.impl.data_fetch.data_marker_QMARK_(item);\r\nif(cljs.core.truth_(and__3938__auto__)){\r\nreturn (fulcro.client.impl.data_fetch.data_marker(item) instanceof cljs.core.Keyword);\r\n} else {\r\nreturn and__3938__auto__;\r\n}\r\n})())?cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(G__41377,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [fulcro.client.impl.data_fetch.marker_table,fulcro.client.impl.data_fetch.data_marker(item)], null),fulcro.client.impl.data_fetch.set_failed_BANG_,error):G__41377);\r\nvar G__41377__$2 = (cljs.core.truth_((function (){var and__3938__auto__ = fulcro.client.impl.data_fetch.data_marker_QMARK_(item);\r\nif(cljs.core.truth_(and__3938__auto__)){\r\nreturn (true === fulcro.client.impl.data_fetch.data_marker(item));\r\n} else {\r\nreturn and__3938__auto__;\r\n}\r\n})())?cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(G__41377__$1,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(fulcro.client.impl.data_fetch.data_path(item),new cljs.core.Keyword(\"ui\",\"fetch-state\",\"ui/fetch-state\",1030289927)),fulcro.client.impl.data_fetch.set_failed_BANG_,error):G__41377__$1);\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(G__41377__$2,new cljs.core.Keyword(\"fulcro\",\"loads-in-progress\",\"fulcro/loads-in-progress\",-1196090224),cljs.core.disj,fulcro.client.impl.data_fetch.data_uuid(item));\r\n\r\n});})(seq__41371,chunk__41372,count__41373,i__41374,item,loading_items,app_state,ran_fallbacks))\r\n);\r\n\r\n\r\nvar G__41437 = seq__41371;\r\nvar G__41438 = chunk__41372;\r\nvar G__41439 = count__41373;\r\nvar G__41440 = (i__41374 + (1));\r\nseq__41371 = G__41437;\r\nchunk__41372 = G__41438;\r\ncount__41373 = G__41439;\r\ni__41374 = G__41440;\r\ncontinue;\r\n} else {\r\nvar temp__5457__auto__ = cljs.core.seq(seq__41371);\r\nif(temp__5457__auto__){\r\nvar seq__41371__$1 = temp__5457__auto__;\r\nif(cljs.core.chunked_seq_QMARK_(seq__41371__$1)){\r\nvar c__4351__auto__ = cljs.core.chunk_first(seq__41371__$1);\r\nvar G__41443 = cljs.core.chunk_rest(seq__41371__$1);\r\nvar G__41444 = c__4351__auto__;\r\nvar G__41445 = cljs.core.count(c__4351__auto__);\r\nvar G__41446 = (0);\r\nseq__41371 = G__41443;\r\nchunk__41372 = G__41444;\r\ncount__41373 = G__41445;\r\ni__41374 = G__41446;\r\ncontinue;\r\n} else {\r\nvar item = cljs.core.first(seq__41371__$1);\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(app_state,((function (seq__41371,chunk__41372,count__41373,i__41374,item,seq__41371__$1,temp__5457__auto__,loading_items,app_state,ran_fallbacks){\r\nreturn (function (s){\r\nvar G__41388 = s;\r\nvar G__41388__$1 = (cljs.core.truth_((function (){var and__3938__auto__ = fulcro.client.impl.data_fetch.data_marker_QMARK_(item);\r\nif(cljs.core.truth_(and__3938__auto__)){\r\nreturn (fulcro.client.impl.data_fetch.data_marker(item) instanceof cljs.core.Keyword);\r\n} else {\r\nreturn and__3938__auto__;\r\n}\r\n})())?cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(G__41388,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [fulcro.client.impl.data_fetch.marker_table,fulcro.client.impl.data_fetch.data_marker(item)], null),fulcro.client.impl.data_fetch.set_failed_BANG_,error):G__41388);\r\nvar G__41388__$2 = (cljs.core.truth_((function (){var and__3938__auto__ = fulcro.client.impl.data_fetch.data_marker_QMARK_(item);\r\nif(cljs.core.truth_(and__3938__auto__)){\r\nreturn (true === fulcro.client.impl.data_fetch.data_marker(item));\r\n} else {\r\nreturn and__3938__auto__;\r\n}\r\n})())?cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(G__41388__$1,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(fulcro.client.impl.data_fetch.data_path(item),new cljs.core.Keyword(\"ui\",\"fetch-state\",\"ui/fetch-state\",1030289927)),fulcro.client.impl.data_fetch.set_failed_BANG_,error):G__41388__$1);\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(G__41388__$2,new cljs.core.Keyword(\"fulcro\",\"loads-in-progress\",\"fulcro/loads-in-progress\",-1196090224),cljs.core.disj,fulcro.client.impl.data_fetch.data_uuid(item));\r\n\r\n});})(seq__41371,chunk__41372,count__41373,i__41374,item,seq__41371__$1,temp__5457__auto__,loading_items,app_state,ran_fallbacks))\r\n);\r\n\r\n\r\nvar G__41454 = cljs.core.next(seq__41371__$1);\r\nvar G__41455 = null;\r\nvar G__41456 = (0);\r\nvar G__41457 = (0);\r\nseq__41371 = G__41454;\r\nchunk__41372 = G__41455;\r\ncount__41373 = G__41456;\r\ni__41374 = G__41457;\r\ncontinue;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n}\r\nbreak;\r\n}\r\n});})(loading_items,app_state,ran_fallbacks))\r\n;\r\nvar run_fallbacks = ((function (loading_items,app_state,ran_fallbacks,mark_errors){\r\nreturn (function (){\r\nvar seq__41395 = cljs.core.seq(loading_items);\r\nvar chunk__41396 = null;\r\nvar count__41397 = (0);\r\nvar i__41398 = (0);\r\nwhile(true){\r\nif((i__41398 < count__41397)){\r\nvar item = chunk__41396.cljs$core$IIndexed$_nth$arity$2(null,i__41398);\r\nvar temp__5457__auto___41462 = new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"fallback\",\"fulcro.client.impl.data-fetch/fallback\",-644539810).cljs$core$IFn$_invoke$arity$1(item);\r\nif(cljs.core.truth_(temp__5457__auto___41462)){\r\nvar fallback_symbol_41465 = temp__5457__auto___41462;\r\nvar original_env_41466 = cljs.core.meta(new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"original-env\",\"fulcro.client.impl.data-fetch/original-env\",1405563884).cljs$core$IFn$_invoke$arity$1(item));\r\nvar env_41467 = fulcro.client.impl.data_fetch.callback_env(reconciler,item,original_env_41466);\r\ncljs.core.reset_BANG_(ran_fallbacks,true);\r\n\r\nvar G__41402_41468 = (function (){var G__41403 = env_41467;\r\nvar G__41404 = fallback_symbol_41465;\r\nvar G__41405 = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error], null);\r\nreturn (fulcro.client.mutations.mutate.cljs$core$IFn$_invoke$arity$3 ? fulcro.client.mutations.mutate.cljs$core$IFn$_invoke$arity$3(G__41403,G__41404,G__41405) : fulcro.client.mutations.mutate.call(null,G__41403,G__41404,G__41405));\r\n})();\r\nvar G__41402_41469__$1 = (((G__41402_41468 == null))?null:new cljs.core.Keyword(null,\"action\",\"action\",-811238024).cljs$core$IFn$_invoke$arity$1(G__41402_41468));\r\nif((G__41402_41469__$1 == null)){\r\n} else {\r\ncljs.core.apply.cljs$core$IFn$_invoke$arity$2(G__41402_41469__$1,cljs.core.PersistentVector.EMPTY);\r\n}\r\n} else {\r\n}\r\n\r\n\r\nvar G__41477 = seq__41395;\r\nvar G__41478 = chunk__41396;\r\nvar G__41479 = count__41397;\r\nvar G__41480 = (i__41398 + (1));\r\nseq__41395 = G__41477;\r\nchunk__41396 = G__41478;\r\ncount__41397 = G__41479;\r\ni__41398 = G__41480;\r\ncontinue;\r\n} else {\r\nvar temp__5457__auto__ = cljs.core.seq(seq__41395);\r\nif(temp__5457__auto__){\r\nvar seq__41395__$1 = temp__5457__auto__;\r\nif(cljs.core.chunked_seq_QMARK_(seq__41395__$1)){\r\nvar c__4351__auto__ = cljs.core.chunk_first(seq__41395__$1);\r\nvar G__41482 = cljs.core.chunk_rest(seq__41395__$1);\r\nvar G__41483 = c__4351__auto__;\r\nvar G__41484 = cljs.core.count(c__4351__auto__);\r\nvar G__41485 = (0);\r\nseq__41395 = G__41482;\r\nchunk__41396 = G__41483;\r\ncount__41397 = G__41484;\r\ni__41398 = G__41485;\r\ncontinue;\r\n} else {\r\nvar item = cljs.core.first(seq__41395__$1);\r\nvar temp__5457__auto___41487__$1 = new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"fallback\",\"fulcro.client.impl.data-fetch/fallback\",-644539810).cljs$core$IFn$_invoke$arity$1(item);\r\nif(cljs.core.truth_(temp__5457__auto___41487__$1)){\r\nvar fallback_symbol_41488 = temp__5457__auto___41487__$1;\r\nvar original_env_41491 = cljs.core.meta(new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"original-env\",\"fulcro.client.impl.data-fetch/original-env\",1405563884).cljs$core$IFn$_invoke$arity$1(item));\r\nvar env_41492 = fulcro.client.impl.data_fetch.callback_env(reconciler,item,original_env_41491);\r\ncljs.core.reset_BANG_(ran_fallbacks,true);\r\n\r\nvar G__41412_41494 = (function (){var G__41414 = env_41492;\r\nvar G__41415 = fallback_symbol_41488;\r\nvar G__41416 = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error], null);\r\nreturn (fulcro.client.mutations.mutate.cljs$core$IFn$_invoke$arity$3 ? fulcro.client.mutations.mutate.cljs$core$IFn$_invoke$arity$3(G__41414,G__41415,G__41416) : fulcro.client.mutations.mutate.call(null,G__41414,G__41415,G__41416));\r\n})();\r\nvar G__41412_41495__$1 = (((G__41412_41494 == null))?null:new cljs.core.Keyword(null,\"action\",\"action\",-811238024).cljs$core$IFn$_invoke$arity$1(G__41412_41494));\r\nif((G__41412_41495__$1 == null)){\r\n} else {\r\ncljs.core.apply.cljs$core$IFn$_invoke$arity$2(G__41412_41495__$1,cljs.core.PersistentVector.EMPTY);\r\n}\r\n} else {\r\n}\r\n\r\n\r\nvar G__41501 = cljs.core.next(seq__41395__$1);\r\nvar G__41502 = null;\r\nvar G__41503 = (0);\r\nvar G__41504 = (0);\r\nseq__41395 = G__41501;\r\nchunk__41396 = G__41502;\r\ncount__41397 = G__41503;\r\ni__41398 = G__41504;\r\ncontinue;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n}\r\nbreak;\r\n}\r\n});})(loading_items,app_state,ran_fallbacks,mark_errors))\r\n;\r\nmark_errors();\r\n\r\nrun_fallbacks();\r\n\r\nfulcro.client.impl.data_fetch.set_global_loading_BANG_(reconciler);\r\n\r\nfulcro.client.impl.data_fetch.tick_BANG_(reconciler);\r\n\r\nreturn fulcro.client.primitives.force_root_render_BANG_(reconciler);\r\n});\r\n});\r\n/**\r\n * Returns true if the outgoing query is just a placeholder indicator for a deferred transaction in the load queue.\r\n */\r\nfulcro.client.impl.data_fetch.is_deferred_transaction_QMARK_ = (function fulcro$client$impl$data_fetch$is_deferred_transaction_QMARK_(query){\r\nreturn cljs.core.boolean$((function (){var and__3938__auto__ = query;\r\nif(cljs.core.truth_(and__3938__auto__)){\r\nreturn ((cljs.core.vector_QMARK_(query)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"fulcro.client.impl.data-fetch\",\"deferred-transaction\",\"fulcro.client.impl.data-fetch/deferred-transaction\",1662063962),cljs.core.first(query))));\r\n} else {\r\nreturn and__3938__auto__;\r\n}\r\n})());\r\n});\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","fulcro/client/impl/data_fetch.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",34],"~:ns-aliases",["^ ","~$clojure.core.async","~$cljs.core.async","~$clojure.stacktrace","~$cljs.stacktrace","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$fulcro.client.impl.data-fetch","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$set","~$clojure.set","^@","^A","~$log","~$fulcro.logging","~$targeting","~$fulcro.client.impl.data-targeting","~$fulcro.client.util","^Q","~$p","~$fulcro.client.impl.protocols","~$prim","~$fulcro.client.primitives","^N","^N","~$cljs.core","^U","~$goog","^V","~$fulcro.client.mutations","^W","^T","^T","~$fulcro.util","^X","~$hist","~$fulcro.history","^L","^L","~$m","^W","~$util","^X","~$s","^A","^A","^A","~$clojure.walk","^10","^P","^P","^Z","^Z","^R","^R"],"~:seen",["^D",["~:require"]],"~:uses",["^ ","~$force-render","^Q","~$prewalk","^10"],"~:require-macros",["^ ","^@","^A","^M","^N","^S","^T","^N","^N","^U","^U","^W","^W","^T","^T","~$m","^W","~$s","^A","^A","^A"],"~:form",["~#list",["~$ns","^F",["^18",["^12",["^T","~:as","^S"],["^P","^1:","^O"],["^X","^1:","^["],["^Q","~:refer",["^14"]],["^10","^1;",["^15"]],["^L","^1:","^K"],["^N","^1:","^M"],["^Z","^1:","^Y"],["^W","^1:","~$m"],["^R","^1:","~$p"],["^@","^1:","~$s"]]]]],"~:flags",["^ ","^12",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^V","^U","^T","^P","^X","^Q","^10","^L","^N","^Z","^W","^R","^A"]],"^H","^F","~:resource-id",["~:shadow.build.classpath/resource","fulcro/client/impl/data_fetch.cljc"],"~:compiled-at",1537360782041,"~:resource-name","fulcro/client/impl/data_fetch.cljc","~:warnings",[],"~:source","(ns fulcro.client.impl.data-fetch\n  (:require [fulcro.client.primitives :as prim]\n            [fulcro.client.impl.data-targeting :as targeting]\n            [fulcro.util :as util]\n            [fulcro.client.util :refer [force-render]]\n            [clojure.walk :refer [prewalk]]\n            [clojure.set :as set]\n            [fulcro.logging :as log]\n            [fulcro.history :as hist]\n            [fulcro.client.mutations :as m]\n            [fulcro.client.impl.protocols :as p]\n    #?(:clj\n            [clojure.future :refer :all])\n            [clojure.spec.alpha :as s]))\n\n(defn optional [pred] (s/or :nothing nil? :value pred))\n(s/def ::type keyword?)\n(s/def ::uuid string?)\n(s/def ::target (optional vector?))\n(s/def ::field (optional keyword?))\n(s/def ::post-mutation (optional symbol?))\n(s/def ::post-mutation-params (optional map?))\n(s/def ::refresh (optional vector?))\n(s/def ::marker (s/or :reference any? :legacy true? :nothing (s/or :nil nil? :false false?)))\n(s/def ::parallel (optional boolean?))\n(s/def ::fallback (optional symbol?))\n(s/def ::original-env map?)\n(s/def ::load-marker (s/keys :req [::type ::uuid ::prim/query ::original-env ::hist/tx-time]\n                       :opt [::target ::prim/remote ::prim/ident ::field ::post-mutation-params ::post-mutation\n                             ::refresh ::marker ::parallel ::fallback :fulcro.client.network/abort-id]))\n\n(s/def ::on-load fn?)\n(s/def ::on-error fn?)\n(s/def ::load-descriptors (s/coll-of ::load-marker))\n(s/def ::payload (s/keys :req [::prim/query ::on-load ::on-error ::hist/history-atom ::hist/tx-time] :opt [::load-descriptors]))\n(s/def ::network-error any?)\n(s/def ::network-result (s/keys :opt [::load-descriptors ::network-error]))\n\n(declare data-marker data-remote data-target data-path data-uuid data-field data-query-key data-query set-loading! full-query loaded-callback error-callback data-marker?)\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Implementation for public api\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n; Built-in mutation for adding a remote query to the network requests.\n(defn data-state?\n  \"Test if the given bit of state is a data fetch state-tracking marker\"\n  [state] (and (map? state) (contains? state ::type)))\n\n(letfn [(is-kind? [state type]\n          (if (data-state? state)\n            (= type (::type state))\n            false))]\n  (defn ready?\n    \"Test if the given item is a data state marker that is in the ready state\"\n    [state] (is-kind? state :ready))\n  (defn loading?\n    \"Test if the given item is a data state marker in the loading state\"\n    [state] (is-kind? state :loading))\n  (defn failed?\n    \"Test if the given item is a data state marker in the failed state\"\n    [state] (is-kind? state :failed)))\n\n(defn is-direct-table-load? [load-marker]\n  (and\n    (not (data-field load-marker))\n    (util/ident? (data-query-key load-marker))))\n\n(def marker-table\n  :ui.fulcro.client.data-fetch.load-markers/by-id)\n\n(defn- place-load-marker [state-map marker]\n  (let [marker-id      (data-marker marker)\n        legacy-marker? (true? marker-id)]\n    (if legacy-marker?\n      (update-in state-map (data-path marker)\n        (fn [current-val]\n          (if (is-direct-table-load? marker)\n            (when (map? current-val) (assoc current-val :ui/fetch-state marker))\n            {:ui/fetch-state marker})))\n      (assoc-in state-map [marker-table marker-id] marker))))\n\n(defn- place-load-markers\n  \"Place load markers in the app state at their data paths so that UI rendering can see them.\"\n  [state-map items-to-load]\n  (reduce (fn [s item]\n            (let [i (set-loading! item)]\n              (cond-> (update s :fulcro/loads-in-progress (fnil conj #{}) (data-uuid i))\n                (data-marker? i) (place-load-marker i))))\n    state-map items-to-load))\n\n(s/fdef place-load-markers\n  :args (s/cat :state map? :items ::load-descriptors)\n  :ret map?)\n\n(defn earliest-load-time\n  \"Given a sequence of load markers, returns the history tx-time of the earliest one. Returns hist/max-tx-time if there\n  are no markers or none have a time.\"\n  [load-markers]\n  (reduce min hist/max-tx-time (map ::hist/tx-time load-markers)))\n\n(defn mark-parallel-loading!\n  \"Marks all of the items in the ready-to-load state as loading, places the loading markers in the appropriate locations\n  in the app state, and return maps with the keys:\n\n  `query` : The full query to send to the server.\n  `on-load` : The function to call to merge a response. Detects missing data and sets failure markers for those.\n  `on-error` : The function to call to set network/server error(s) in place of loading markers.\n  `load-descriptors` : Args to pass back to on-load and on-error. These are separated\n    so that `rewrite-tempids-in-request-queue` can rewrite tempids for merge and\n    error callbacks\n\n  response-channel will have the response posted to it when the request is done.\n  .\"\n  [remote-name reconciler]\n  (let [state                (prim/app-state reconciler)\n        queued-items         (get @state :fulcro/ready-to-load)\n        is-eligible?         (fn [item] (and (::parallel item) (= remote-name (data-remote item))))\n        other-items-loading? (boolean (seq (get @state :fulcro/loads-in-progress)))\n        items-to-load        (filter is-eligible? queued-items)\n        remaining-items      (filter (comp not is-eligible?) queued-items)\n        loading?             (or (boolean (seq items-to-load)) other-items-loading?)\n        history-atom         (prim/get-history reconciler)\n        ok                   (loaded-callback reconciler)\n        error                (error-callback reconciler)\n        tx-time              (earliest-load-time items-to-load)]\n    (when-not (empty? items-to-load)\n      (swap! state (fn [s] (-> s\n                             (place-load-markers items-to-load)\n                             (assoc :ui/loading-data loading? :fulcro/ready-to-load remaining-items))))\n      (for [item items-to-load]\n        {::prim/query        (full-query [item])\n         ::prim/remote       remote-name\n         ::hist/tx-time      tx-time\n         ::hist/history-atom history-atom\n         ::on-load           ok\n         ::on-error          error\n         ::load-descriptors  [item]}))))\n\n(s/fdef mark-parallel-loading!\n  :args (s/cat :remote keyword? :reconciler prim/reconciler?)\n  :ret ::load-descriptors)\n\n(defn dedupe-by\n  \"Returns a lazy sequence of the elements of coll with dupes removed.\n   An element is a duplicate IFF (keys-fn element) has key collision with any prior element\n   to come before it. E.g. (dedupe-by identity [[:a] [:b] [:a] [:a :c]]) => [[:a] [:b]]\n   Returns a stateful transducer when no collection is provided.\"\n  ([keys-fn]                                                ;; transducer fn\n   (fn [rf]\n     (let [keys-seen (volatile! #{})]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result input]\n          (let [input-keys (set (keys-fn input))]\n            ;; if no keys seen, include input in the reduction\n            (if (empty? (set/intersection @keys-seen input-keys))\n              (do (vswap! keys-seen set/union input-keys)\n                  (rf result input))\n              result)))))))\n  ([keys-fn coll] (sequence (dedupe-by keys-fn) coll)))\n\n(defn split-items-ready-to-load\n  \"This function is used to split accidental colliding queries into separate network\n  requests. The most general description of this issue is\n  from two unrelated `load` calls when black-box composing functions. The two\n  separate queries: One issues `[{:entitlements [:foo]}]`, and the other\n  asks for `[{:entitlements [:bar]}]`. Fulcro merges these into a single query\n  [{:entitlements [:foo]} {:entitlements [:bar]}]. However, the response to a query\n  is a map, and such a query would result in the backend parser being called twice (once per key in the subquery)\n  but one would stomp on the other.\n\n  The other potential collision is if a load includes an abort ID. In this case such a load should not be batched\n  with others because aborting it would take others down with it.\n\n  Thus, this function ensures such accidental collisions are not combined into a single network request.\n\n  This functions returns a list of the load items that can be batched (from the beginning, in order) and the\n  remainder of the items which must be deferred to another request.\"\n  [items-ready-to-load]\n  (let [item-keys          (fn [item]\n                             (->> (data-query item)\n                               prim/query->ast\n                               :children\n                               (map :dispatch-key)\n                               set))\n        abort-id-conflict? (fn [items-going? active-abort-id abort-id]\n                             (and items-going? (or abort-id active-abort-id) (not= active-abort-id abort-id)))\n        can-go-now?        (fn [{:keys [items current-keys current-abort-id]} item]\n                             (let [abort-id (:fulcro.client.network/abort-id item)]\n                               (and\n                                 (not (abort-id-conflict? (seq items) current-abort-id abort-id))\n                                 (empty? (set/intersection current-keys (item-keys item))))))\n        {items-to-load-now :items} (reduce\n                                     (fn [acc item]\n                                       (if (can-go-now? acc item)\n                                         (cond-> acc\n                                           (:fulcro.client.network/abort-id item) (assoc :current-abort-id (:fulcro.client.network/abort-id item))\n                                           :always (update :current-keys set/union (item-keys item))\n                                           :always (update :items conj item))\n                                         (reduced acc)))\n                                     {:current-keys #{} :current-abort-id nil :items []}\n                                     items-ready-to-load)\n        items-to-defer     (->> items-ready-to-load (drop (count items-to-load-now)) vec)]\n    [items-to-load-now items-to-defer]))\n\n(defn mark-loading\n  \"Marks all of the items in the ready-to-load state as loading, places the loading markers in the appropriate locations\n  in the app state, and returns a map with the keys:\n\n  `query` : The full query to send to the server.\n  `on-load` : The function to call to merge a response. Detects missing data and sets failure markers for those.\n  `on-error` : The function to call to set network/server error(s) in place of loading markers.\n  `load-descriptors` : Args to pass back to on-load and on-error. These are separated\n    so that `rewrite-tempids-in-request-queue` can rewrite tempids for merge and\n    error callbacks\n\n  response-channel will have the response posted to it when the request is done.\n  .\"\n  [remote reconciler]\n  (let [state                   (prim/app-state reconciler)\n        is-eligible?            (fn [item] (= remote (data-remote item)))\n        all-items               (get @state :fulcro/ready-to-load)\n        items-ready-to-load     (filter is-eligible? all-items)\n        items-for-other-remotes (filter (comp not is-eligible?) all-items)\n        other-items-loading?    (boolean (seq (get @state :fulcro/loads-in-progress)))\n        [items-to-load-now items-to-defer] (split-items-ready-to-load items-ready-to-load)\n        remaining-items         (concat items-for-other-remotes items-to-defer)\n        loading?                (or (boolean (seq items-to-load-now)) other-items-loading?)\n        ; CAUTION: We use the earliest time of all items, so that we don't accidentally clear history for something we have not even sent.\n        tx-time                 (earliest-load-time all-items)]\n    (when-not (empty? items-to-load-now)\n      (swap! state (fn [s]\n                     (-> s\n                       (place-load-markers items-to-load-now)\n                       (assoc :ui/loading-data loading? :fulcro/ready-to-load remaining-items))))\n      {::prim/query                    (full-query items-to-load-now)\n       ::hist/history-atom             (prim/get-history reconciler)\n       ::prim/remote                   remote\n       ::hist/tx-time                  tx-time\n       ::on-load                       (loaded-callback reconciler)\n       ::on-error                      (error-callback reconciler)\n       :fulcro.client.network/abort-id (first (keep :fulcro.client.network/abort-id items-to-load-now))\n       ::load-descriptors              items-to-load-now})))\n\n(s/fdef mark-loading\n  :args (s/cat :remote keyword? :reconciler prim/reconciler?)\n  :ret ::payload)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Testing API, used to write tests against specific data states\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; not-present represented by nil\n;; ok represented by data\n(def valid-types #{:ready :loading :failed})\n\n(defn make-data-state\n  \"This is just a testing function -- using ready-state as public interface and call the\n  `set-{type}!` functions to change it as needed.\"\n  ([type]\n   (make-data-state type {}))\n\n  ([type params]\n   (if (get valid-types type)\n     {::type type ::params params}\n     (throw (ex-info (str \"INVALID DATA STATE TYPE: \" type) {})))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Helpers -- not intended for public use\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn elide-ast-nodes\n  \"Remove items from a query (AST) that have a key listed in the elision-set\"\n  [{:keys [key union-key children] :as ast} elision-set]\n  (let [union-elision? (contains? elision-set union-key)]\n    (when-not (or union-elision? (contains? elision-set key))\n      (when (and union-elision? (<= (count children) 2))\n        (log/warn \"Unions are not designed to be used with fewer than two children. Check your calls to Fulcro\n        load functions where the :without set contains \" (pr-str union-key)))\n      (update ast :children (fn [c] (vec (keep #(elide-ast-nodes % elision-set) c)))))))\n\n(defn inject-query-params\n  \"Inject parameters into elements of the top-level query.\n\n  `params` is a map from keyword (on the query in the AST) to parameter maps. So, given the AST for this query:\n\n  ```\n  [:a :b :c]\n  ```\n\n  and a `params` of `{:a {:x 1} :c {:y 2}}` you'll get an AST representing:\n\n  ```\n  [(:a {:x 1}) :b (:c {:y 2})]\n  ```\n  \"\n  [ast params]\n  (update-in ast [:children] #(map (fn [c] (if-let [new-params (get params (:dispatch-key c))]\n                                             (update c :params merge new-params)\n                                             c)) %)))\n\n(defn ready-state\n  \"Generate a ready-to-load state with all of the necessary details to do\n  remoting and merging.\"\n  [{:keys [ident field params remote without query post-mutation post-mutation-params fallback parallel refresh marker\n           target env initialize abort-id]\n    :or   {remote :remote without #{} refresh [] marker true}}]\n  (assert (or field query) \"You must supply a query or a field/ident pair\")\n  (assert (or (not field) (and field (util/ident? ident))) \"Field requires ident\")\n  (let [old-ast     (prim/query->ast query)\n        ast         (cond-> old-ast\n                      (not-empty without) (elide-ast-nodes without)\n                      (and field params (not (contains? params field))) (inject-query-params {field params})\n                      params (inject-query-params params))\n        query-field (first query)\n        key         (if (util/join? query-field) (util/join-key query-field) query-field)\n        query'      (prim/ast->query ast)]\n    (assert (or (not field) (= field key)) \"Component fetch query does not match supplied field.\")\n    {::type                          :ready\n     ::uuid                          #?(:cljs (str (cljs.core/random-uuid))\n                                        :clj  (str (System/currentTimeMillis)))\n     ::target                        target\n     ::prim/remote                   remote\n     ::prim/ident                    ident                  ; only for component-targeted loads\n     ::field                         field                  ; for component-targeted load\n     ::prim/query                    query'                 ; query, relative to root of db OR component\n     ::post-mutation                 post-mutation\n     ::post-mutation-params          post-mutation-params\n     ::initialize                    initialize\n     ::refresh                       refresh\n     ::marker                        marker\n     ::parallel                      parallel\n     ::fallback                      fallback\n     ; stored on metadata so it doesn't interfere with serializability (this marker ends up in state)\n     ::original-env                  (with-meta {} env)\n     :fulcro.client.network/abort-id abort-id\n     ::hist/tx-time                  (if (some-> env :reconciler)\n                                       (prim/get-current-time (:reconciler env))\n                                       (do hist/max-tx-time))}))\n\n(defn mark-ready\n  \"Place a ready-to-load marker into the application state. This should be done from\n  a mutate function that is abstractly loading something. This is intended for internal use.\n\n  See the `load` and `load-field` functions in `fulcro.client.data-fetch` for the public API.\"\n  [{:keys [env] :as config}]\n  (let [state        (get env :state)\n        marker?      (not (identical? false (:marker config)))\n        load-request (ready-state (merge {:marker true :refresh [] :without #{} :env env} config))]\n    (swap! state (fn [s]\n                   (cond-> (update s :fulcro/ready-to-load (fnil conj []) load-request)\n                     marker? (place-load-marker load-request))))))\n\n(defn data-target\n  \"Return the ident (if any) of the component related to the query in the data state marker. An ident is required\n  to be present if the marker is targeting a field.\"\n  [state] (::target state))\n(defn data-ident\n  \"Return the ident (if any) of the component related to the query in the data state marker. An ident is required\n  to be present if the marker is targeting a field.\"\n  [state] (::prim/ident state))\n(defn data-query\n  \"Get the query that will be sent to the server as a result of the given data state marker\"\n  [state]\n  (if (data-ident state)\n    [{(data-ident state) (::prim/query state)}]\n    (::prim/query state)))\n(defn data-field\n  \"Get the target field (if any) from the data state marker\"\n  [state] (::field state))\n(defn data-uuid\n  \"Get the UUID of the data fetch\"\n  [state] (::uuid state))\n(defn data-marker\n  \"Returns the ID of the data marker, or nil/false if there isn't one. True means to use the old marker behavior of\n  replacing the data in app state with a marker (DEPRECATED)\"\n  [state] (::marker state))\n(defn data-marker?\n  \"Test if the user desires a copy of the state marker to appear in the app state at the data path of the target data.\"\n  [state] (boolean (::marker state)))\n(defn data-refresh\n  \"Get the list of query keywords that should be refreshed (re-rendered) when this load completes.\"\n  [state] (::refresh state))\n(defn data-remote\n  \"Get the remote that this marker is meant to talk to\"\n  [state] (::prim/remote state))\n(defn data-query-key\n  \"Get the 'primary' query key of the data fetch. This is defined as the first keyword of the overall query (which might\n  be a simple prop or join key for example)\"\n  [state]\n  (let [ast  (prim/query->ast (-> state ::prim/query))\n        node (-> ast :children first)]\n    (:key node)))\n\n(defn data-path\n  \"Get the app-state database path of the target of the load that the given data state marker is trying to load.\"\n  [state]\n  (let [target (data-target state)]\n    (cond\n      (and (nil? (data-field state)) (vector? target) (not-empty target)) target\n      (and (vector? (data-ident state)) (keyword? (data-field state))) (conj (data-ident state) (data-field state))\n      (util/ident? (data-query-key state)) (data-query-key state)\n      :otherwise [(data-query-key state)])))\n\n(defn data-params\n  \"Get the parameters that the user wants to add to the first join/keyword of the data fetch query.\"\n  [state] (::params state))\n\n;; Setters\n(letfn [(set-type [state type params]\n          (merge state {::type   type\n                        ::params params}))]\n  (defn set-ready!\n    \"Returns a state (based on the input state) that is in the 'ready' to load state.\"\n    ([state] (set-ready! state nil))\n    ([state params] (set-type state :ready params)))\n  (defn set-loading!\n    \"Returns a marker (based on the input state) that is in the loading state (and ensures that it has a UUID)\"\n    ([state] (set-loading! state nil))\n    ([state params] (let [rv (set-type state :loading params)]\n                      (with-meta rv {:state rv}))))\n  (defn set-failed!\n    \"Returns a marker (based on the input state) that is in the error state\"\n    ([state] (set-failed! state nil))\n    ([state params]\n     (set-type state :failed params))))\n\n(defn full-query\n  \"Composes together the queries of a sequence of data states into a single query.\"\n  [items] (vec (mapcat (fn [item] (data-query item)) items)))\n\n(defn- set-global-loading! [reconciler]\n  \"Sets the global :ui/loading-data to false if there are no loading fetch states in the entire app-state, otherwise sets to true.\"\n  (let [state-atom (prim/app-state reconciler)\n        loading?   (boolean (seq (get @state-atom :fulcro/loads-in-progress)))]\n    (swap! state-atom assoc :ui/loading-data loading?)))\n\n(defn replacement-target? [t] (targeting/replacement-target? t))\n(defn prepend-target? [t] (targeting/prepend-target? t))\n(defn append-target? [t] (targeting/append-target? t))\n(defn multiple-targets? [t] (targeting/multiple-targets? t))\n(defn special-target? [t] (targeting/special-target? t))\n\n(def process-target targeting/process-target)\n\n(defn relocate-targeted-results!\n  \"For items that are manually targeted, move them in app state from their result location to their target location.\"\n  [state-atom items]\n  (swap! state-atom\n    (fn [state-map]\n      (reduce (fn [state item]\n                (let [default-target  (data-query-key item)\n                      explicit-target (or (data-target item) [])\n                      relocate?       (and\n                                        (nil? (data-field item))\n                                        (not-empty explicit-target))]\n                  (if relocate?\n                    (process-target state default-target explicit-target)\n                    state))) state-map items))))\n\n(defn- remove-marker\n  \"Returns app-state without the load marker for the given item.\"\n  [app-state item]\n  (let [marker-id      (data-marker item)\n        legacy-marker? (true? marker-id)]\n    (if legacy-marker?\n      (let [path (data-path item)\n            data (get-in app-state path)]\n        (cond\n          (and (map? data) (= #{:ui/fetch-state} (set (keys data)))) (assoc-in app-state path nil) ; to-many (will become a vector)\n          (and (map? data) (contains? data :ui/fetch-state)) (update-in app-state path dissoc :ui/fetch-state)\n          :else (assoc-in app-state path nil)))\n      (update app-state marker-table dissoc marker-id))))\n\n(defn callback-env\n  \"Build a callback env for post mutations and fallbacks\"\n  [reconciler load-request original-env]\n  (let [state (prim/app-state reconciler)\n        {:keys [::target ::prim/remote ::prim/ident ::field ::prim/query ::post-mutation ::post-mutation-params ::refresh ::marker ::parallel ::fallback]} load-request]\n    (merge original-env\n      {:state state\n       :load-request\n              (cond-> {:target target :remote remote :marker marker :server-query query :parallel (boolean parallel)}\n                post-mutation (assoc :post-mutation post-mutation)\n                post-mutation-params (assoc :post-mutation-params post-mutation-params)\n                refresh (assoc :refresh refresh)\n                fallback (assoc :fallback fallback))})))\n\n(defn- tick! \"Ability to mock in tests\"\n  [r]\n  (p/tick! r))\n\n(defn- loaded-callback\n  \"Generates a callback that processes all of the post-processing steps once a remote ***load*** has completed. This includes:\n\n  - Marking the items that were queried for but not returned as 'missing' (see documentation on mark and sweep of db)\n  - Refreshing elements of the UI that were included in the data fetch :refresh option\n  - Removing loading markers related to the executed loads that were not overwritten by incoming data\n  - Merging the incoming data into the normalized database\n  - Running post-mutations for any fetches that completed\n  - Updating the global loading marker\n  - Triggering re-render for all data item refresh lists\n  - Removing the activity from history tracking\n  \"\n  [reconciler]\n  (fn [response items]\n    (let [query               (full-query items)\n          base-merge          (reduce (fn [initial-state item]\n                                        (if-let [item-tree (::initialize item)]\n                                          (merge initial-state item-tree)\n                                          initial-state)) {} items)\n          response            (util/deep-merge base-merge response)\n          loading-items       (into #{} (map set-loading! items))\n          refresh-set         (into #{:ui/loading-data :ui/fetch-state marker-table} (mapcat data-refresh items))\n          marked-response     (prim/mark-missing response query)\n          explicit-refresh    (into (vec refresh-set) (remove symbol?) (keys marked-response))\n          app-state           (prim/app-state reconciler)\n          ran-mutations       (atom false)\n          remove-markers!     (fn [] (doseq [item loading-items]\n                                       (swap! app-state (fn [s]\n                                                          (cond-> s\n                                                            :always (update :fulcro/loads-in-progress disj (data-uuid item))\n                                                            (data-marker? item) (remove-marker item))))))\n          to-refresh          (atom (set explicit-refresh))\n          run-post-mutations! (fn [] (doseq [item loading-items]\n                                       (when-let [mutation-symbol (::post-mutation item)]\n                                         (reset! ran-mutations true)\n                                         (let [params       (or (::post-mutation-params item) {})\n                                               original-env (-> item ::original-env meta)\n                                               {:keys [action refresh]} (m/mutate (callback-env reconciler item original-env) mutation-symbol params)]\n                                           (when (seq refresh)\n                                             (swap! to-refresh into refresh))\n                                           (when action\n                                             (action))))))]\n      (remove-markers!)\n      (prim/merge! reconciler marked-response query)\n      (relocate-targeted-results! app-state loading-items)\n      (run-post-mutations!)\n      (set-global-loading! reconciler)\n      (tick! reconciler)\n      (if (contains? refresh-set :fulcro/force-root)\n        (prim/force-root-render! reconciler)\n        (force-render reconciler (vec @to-refresh))))))\n\n(defn- error-callback\n  \"Generates a callback that is used whenever a hard server error occurs (status code 400+ or network error).\n\n  The generated callback:\n\n  - Replaces affected loading markers with error markers (if :marker is true on the load item)\n  - Runs fallbacks associated with the loads\n  - Sets the global error marker (:fulcro/server-error)\n  - Refreshes UI (from root if there were fallbacks)\n  \"\n  [reconciler]\n  (fn [error items]\n    (let [loading-items (into #{} (map set-loading! items))\n          app-state     (prim/app-state reconciler)\n          ; TODO: currently forcing root refresh, so these are not needed. Perhaps that should be optimized?\n          ;refresh-set   (into #{:ui/loading-data :ui/fetch-state marker-table} (mapcat data-refresh items))\n          ;to-refresh    (vec refresh-set)\n          ran-fallbacks (atom false)\n          mark-errors   (fn []\n                          (swap! app-state assoc :fulcro/server-error error)\n                          (doseq [item loading-items]\n                            (swap! app-state (fn [s]\n                                               (cond-> s\n                                                 (and (data-marker? item) (keyword? (data-marker item))) (update-in [marker-table (data-marker item)] set-failed! error)\n                                                 (and (data-marker? item) (identical? true (data-marker item))) (update-in (conj (data-path item) :ui/fetch-state) set-failed! error)\n                                                 :always (update :fulcro/loads-in-progress disj (data-uuid item)))))))\n          run-fallbacks (fn [] (doseq [item loading-items]\n                                 (when-let [fallback-symbol (::fallback item)]\n                                   (let [original-env (-> item ::original-env meta)\n                                         env          (callback-env reconciler item original-env)]\n                                     (reset! ran-fallbacks true)\n                                     (some->\n                                       (m/mutate env fallback-symbol {:error error})\n                                       :action\n                                       (apply []))))))]\n      (mark-errors)\n      (run-fallbacks)\n      (set-global-loading! reconciler)\n      (tick! reconciler)\n      (prim/force-root-render! reconciler))))\n\n(defn is-deferred-transaction?\n  \"Returns true if the outgoing query is just a placeholder indicator for a deferred transaction in the load queue.\"\n  [query]\n  (boolean (and query (vector? query) (= ::deferred-transaction (first query)))))\n","~:reader-features",["^D",["~:cljs"]],"~:source-map",["^ ","~i15",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",13],["^ ","^1I",41,"^1J",13],["^ ","^1I",0,"^1J",14]],"~i6",[["^ ","^1I",0,"^1J",13,"^E","fulcro.client.impl.data-fetch/optional"]],"~i16",[["^ ","^1I",90,"^1J",13,"^E","pred"]],"~i22",[["^ ","^1I",0,"^1J",14],["^ ","^1I",7,"^1J",14,"^E","cljs.spec.alpha/or-spec-impl"],["^ ","^1I",36,"^1J",14],["^ ","^1I",119,"^1J",14],["^ ","^1I",179,"^1J",14],["^ ","^1I",241,"^1J",14],["^ ","^1I",324,"^1J",14],["^ ","^1I",397,"^1J",14],["^ ","^1I",462,"^1J",14],["^ ","^1I",579,"^1J",14]],"~i37",[["^ ","^1I",545,"^1J",14,"^E","cljs.core/nil?"]],"~i49",[["^ ","^1I",566,"^1J",14,"^E","pred"]]],"^1K",["^ ","~i0",[["^ ","^1I",0,"^1J",16],["^ ","^1I",0,"^1J",16,"^E","cljs.spec.alpha/def-impl"],["^ ","^1I",25,"^1J",16],["^ ","^1I",134,"^1J",16]],"~i14",[["^ ","^1I",215,"^1J",16,"^E","cljs.core/keyword?"]]],"~i17",["^ ","~i0",[["^ ","^1I",0,"^1J",17],["^ ","^1I",0,"^1J",17,"^E","cljs.spec.alpha/def-impl"],["^ ","^1I",25,"^1J",17],["^ ","^1I",135,"^1J",17]],"^1O",[["^ ","^1I",216,"^1J",17,"^E","cljs.core/string?"]]],"~i18",["^ ","~i0",[["^ ","^1I",0,"^1J",18],["^ ","^1I",0,"^1J",18,"^E","cljs.spec.alpha/def-impl"],["^ ","^1I",25,"^1J",18],["^ ","^1I",139,"^1J",18],["^ ","^1I",154,"^1J",18],["^ ","^1I",277,"^1J",18]],"^1K",[["^ ","^1I",359,"^1J",18]],"^1P",[["^ ","^1I",359,"^1J",18,"^E","fulcro.client.impl.data-fetch/optional"]],"~i26",[["^ ","^1I",398,"^1J",18,"^E","cljs.core/vector?"]]],"~i19",["^ ","~i0",[["^ ","^1I",0,"^1J",19],["^ ","^1I",0,"^1J",19,"^E","cljs.spec.alpha/def-impl"],["^ ","^1I",25,"^1J",19],["^ ","^1I",137,"^1J",19],["^ ","^1I",152,"^1J",19],["^ ","^1I",275,"^1J",19]],"^1H",[["^ ","^1I",357,"^1J",19]],"^1K",[["^ ","^1I",357,"^1J",19,"^E","fulcro.client.impl.data-fetch/optional"]],"~i25",[["^ ","^1I",396,"^1J",19,"^E","cljs.core/keyword?"]]],"~i20",["^ ","~i0",[["^ ","^1I",0,"^1J",20],["^ ","^1I",0,"^1J",20,"^E","cljs.spec.alpha/def-impl"],["^ ","^1I",25,"^1J",20],["^ ","^1I",152,"^1J",20],["^ ","^1I",167,"^1J",20],["^ ","^1I",290,"^1J",20]],"~i23",[["^ ","^1I",371,"^1J",20]],"~i24",[["^ ","^1I",371,"^1J",20,"^E","fulcro.client.impl.data-fetch/optional"]],"~i33",[["^ ","^1I",410,"^1J",20,"^E","cljs.core/symbol?"]]],"~i21",["^ ","~i0",[["^ ","^1I",0,"^1J",21],["^ ","^1I",0,"^1J",21,"^E","cljs.spec.alpha/def-impl"],["^ ","^1I",25,"^1J",21],["^ ","^1I",166,"^1J",21],["^ ","^1I",181,"^1J",21],["^ ","^1I",304,"^1J",21]],"~i30",[["^ ","^1I",380,"^1J",21]],"~i31",[["^ ","^1I",380,"^1J",21,"^E","fulcro.client.impl.data-fetch/optional"]],"~i40",[["^ ","^1I",419,"^1J",21,"^E","cljs.core/map?"]]],"^1L",["^ ","~i0",[["^ ","^1I",0,"^1J",22],["^ ","^1I",0,"^1J",22,"^E","cljs.spec.alpha/def-impl"],["^ ","^1I",25,"^1J",22],["^ ","^1I",140,"^1J",22],["^ ","^1I",155,"^1J",22],["^ ","^1I",278,"^1J",22]],"^1P",[["^ ","^1I",360,"^1J",22]],"^1Q",[["^ ","^1I",360,"^1J",22,"^E","fulcro.client.impl.data-fetch/optional"]],"~i27",[["^ ","^1I",399,"^1J",22,"^E","cljs.core/vector?"]]],"^1V",["^ ","~i0",[["^ ","^1I",0,"^1J",23],["^ ","^1I",0,"^1J",23,"^E","cljs.spec.alpha/def-impl"],["^ ","^1I",25,"^1J",23],["^ ","^1I",138,"^1J",23],["^ ","^1I",153,"^1J",23],["^ ","^1I",235,"^1J",23],["^ ","^1I",299,"^1J",23],["^ ","^1I",374,"^1J",23],["^ ","^1I",431,"^1J",23],["^ ","^1I",506,"^1J",23],["^ ","^1I",566,"^1J",23],["^ ","^1I",581,"^1J",23],["^ ","^1I",663,"^1J",23],["^ ","^1I",712,"^1J",23],["^ ","^1I",785,"^1J",23],["^ ","^1I",840,"^1J",23]],"^1K",[["^ ","^1I",921,"^1J",23],["^ ","^1I",921,"^1J",23,"^E","cljs.spec.alpha/or-spec-impl"],["^ ","^1I",950,"^1J",23],["^ ","^1I",1033,"^1J",23],["^ ","^1I",1097,"^1J",23],["^ ","^1I",1154,"^1J",23],["^ ","^1I",1222,"^1J",23],["^ ","^1I",1305,"^1J",23],["^ ","^1I",1380,"^1J",23],["^ ","^1I",1455,"^1J",23],["^ ","^1I",1470,"^1J",23],["^ ","^1I",1552,"^1J",23],["^ ","^1I",1601,"^1J",23],["^ ","^1I",1674,"^1J",23],["^ ","^1I",1729,"^1J",23],["^ ","^1I",1817,"^1J",23],["^ ","^1I",2559,"^1J",23]],"^1X",[["^ ","^1I",1900,"^1J",23,"^E","cljs.core/any?"]],"~i46",[["^ ","^1I",1921,"^1J",23,"^E","cljs.core/true?"]],"~i61",[["^ ","^1I",1943,"^1J",23],["^ ","^1I",1943,"^1J",23,"^E","cljs.spec.alpha/or-spec-impl"],["^ ","^1I",1972,"^1J",23],["^ ","^1I",2055,"^1J",23],["^ ","^1I",2104,"^1J",23],["^ ","^1I",2167,"^1J",23],["^ ","^1I",2250,"^1J",23],["^ ","^1I",2323,"^1J",23],["^ ","^1I",2410,"^1J",23],["^ ","^1I",2545,"^1J",23]],"~i72",[["^ ","^1I",2493,"^1J",23,"^E","cljs.core/nil?"]],"~i84",[["^ ","^1I",2514,"^1J",23,"^E","cljs.core/false?"]]],"^1W",["^ ","~i0",[["^ ","^1I",0,"^1J",24],["^ ","^1I",0,"^1J",24,"^E","cljs.spec.alpha/def-impl"],["^ ","^1I",25,"^1J",24],["^ ","^1I",143,"^1J",24],["^ ","^1I",158,"^1J",24],["^ ","^1I",281,"^1J",24]],"^1Q",[["^ ","^1I",364,"^1J",24]],"^1S",[["^ ","^1I",364,"^1J",24,"^E","fulcro.client.impl.data-fetch/optional"]],"~i28",[["^ ","^1I",403,"^1J",24,"^E","cljs.core/boolean?"]]],"^1T",["^ ","~i0",[["^ ","^1I",0,"^1J",25],["^ ","^1I",0,"^1J",25,"^E","cljs.spec.alpha/def-impl"],["^ ","^1I",25,"^1J",25],["^ ","^1I",143,"^1J",25],["^ ","^1I",158,"^1J",25],["^ ","^1I",281,"^1J",25]],"^1Q",[["^ ","^1I",362,"^1J",25]],"^1S",[["^ ","^1I",362,"^1J",25,"^E","fulcro.client.impl.data-fetch/optional"]],"^26",[["^ ","^1I",401,"^1J",25,"^E","cljs.core/symbol?"]]],"^1R",["^ ","~i0",[["^ ","^1I",0,"^1J",26],["^ ","^1I",0,"^1J",26,"^E","cljs.spec.alpha/def-impl"],["^ ","^1I",25,"^1J",26],["^ ","^1I",151,"^1J",26]],"^1L",[["^ ","^1I",226,"^1J",26,"^E","cljs.core/map?"]]],"^21",["^ ","~i0",[["^ ","^1I",0,"^1J",27],["^ ","^1I",0,"^1J",27,"^E","cljs.spec.alpha/def-impl"],["^ ","^1I",25,"^1J",27],["^ ","^1I",149,"^1J",27],["^ ","^1I",164,"^1J",27],["^ ","^1I",250,"^1J",27],["^ ","^1I",301,"^1J",27],["^ ","^1I",384,"^1J",27],["^ ","^1I",493,"^1J",27],["^ ","^1I",603,"^1J",27],["^ ","^1I",704,"^1J",27],["^ ","^1I",830,"^1J",27],["^ ","^1I",923,"^1J",27],["^ ","^1I",974,"^1J",27],["^ ","^1I",1058,"^1J",27],["^ ","^1I",1172,"^1J",27],["^ ","^1I",1274,"^1J",27],["^ ","^1I",1377,"^1J",27],["^ ","^1I",1489,"^1J",27],["^ ","^1I",1630,"^1J",27],["^ ","^1I",1757,"^1J",27],["^ ","^1I",1872,"^1J",27],["^ ","^1I",1985,"^1J",27],["^ ","^1I",2103,"^1J",27],["^ ","^1I",2221,"^1J",27]],"^1Y",[["^ ","^1I",2331,"^1J",27],["^ ","^1I",2331,"^1J",27,"^E","cljs.spec.alpha/map-spec-impl"],["^ ","^1I",2361,"^1J",27],["^ ","^1I",2401,"^1J",27],["^ ","^1I",2458,"^1J",27],["^ ","^1I",2514,"^1J",27],["^ ","^1I",2564,"^1J",27],["^ ","^1I",2629,"^1J",27],["^ ","^1I",2691,"^1J",27],["^ ","^1I",2752,"^1J",27],["^ ","^1I",2814,"^1J",27],["^ ","^1I",2865,"^1J",27],["^ ","^1I",2925,"^1J",27],["^ ","^1I",2988,"^1J",27],["^ ","^1I",3052,"^1J",27],["^ ","^1I",3105,"^1J",27],["^ ","^1I",3110,"^1J",27],["^ ","^1I",3115,"^1J",27],["^ ","^1I",3120,"^1J",27],["^ ","^1I",3203,"^1J",27],["^ ","^1I",3214,"^1J",27,"^E","G__40686"],["^ ","^1I",0,"^1J",28],["^ ","^1I",0,"^1J",28],["^ ","^1I",7,"^1J",28,"^E","cljs.core/map?"],["^ ","^1I",28,"^1J",28,"^E","G__40686"],["^ ","^1I",3,"^1J",29],["^ ","^1I",14,"^1J",29,"^E","G__40686"],["^ ","^1I",0,"^1J",30],["^ ","^1I",0,"^1J",30],["^ ","^1I",7,"^1J",30,"^E","cljs.core/contains?"],["^ ","^1I",33,"^1J",30,"^E","G__40686"],["^ ","^1I",42,"^1J",30],["^ ","^1I",3,"^1J",31],["^ ","^1I",14,"^1J",31,"^E","G__40686"],["^ ","^1I",0,"^1J",32],["^ ","^1I",0,"^1J",32],["^ ","^1I",7,"^1J",32,"^E","cljs.core/contains?"],["^ ","^1I",33,"^1J",32,"^E","G__40686"],["^ ","^1I",42,"^1J",32],["^ ","^1I",3,"^1J",33],["^ ","^1I",14,"^1J",33,"^E","G__40686"],["^ ","^1I",0,"^1J",34],["^ ","^1I",0,"^1J",34],["^ ","^1I",7,"^1J",34,"^E","cljs.core/contains?"],["^ ","^1I",33,"^1J",34,"^E","G__40686"],["^ ","^1I",42,"^1J",34],["^ ","^1I",3,"^1J",35],["^ ","^1I",14,"^1J",35,"^E","G__40686"],["^ ","^1I",0,"^1J",36],["^ ","^1I",0,"^1J",36],["^ ","^1I",7,"^1J",36,"^E","cljs.core/contains?"],["^ ","^1I",33,"^1J",36,"^E","G__40686"],["^ ","^1I",42,"^1J",36],["^ ","^1I",3,"^1J",37],["^ ","^1I",14,"^1J",37,"^E","G__40686"],["^ ","^1I",0,"^1J",38],["^ ","^1I",0,"^1J",38],["^ ","^1I",7,"^1J",38,"^E","cljs.core/contains?"],["^ ","^1I",33,"^1J",38,"^E","G__40686"],["^ ","^1I",42,"^1J",38],["^ ","^1I",11,"^1J",39],["^ ","^1I",22,"^1J",39,"^E","G__40686"],["^ ","^1I",0,"^1J",40],["^ ","^1I",0,"^1J",40],["^ ","^1I",9,"^1J",40],["^ ","^1I",9,"^1J",40,"^E","cljs.core/map?"],["^ ","^1I",30,"^1J",40,"^E","G__40686"],["^ ","^1I",45,"^1J",40],["^ ","^1I",45,"^1J",40,"^E","cljs.core/contains?"],["^ ","^1I",71,"^1J",40,"^E","G__40686"],["^ ","^1I",80,"^1J",40],["^ ","^1I",195,"^1J",40],["^ ","^1I",195,"^1J",40,"^E","cljs.core/contains?"],["^ ","^1I",221,"^1J",40,"^E","G__40686"],["^ ","^1I",230,"^1J",40],["^ ","^1I",346,"^1J",40],["^ ","^1I",346,"^1J",40,"^E","cljs.core/contains?"],["^ ","^1I",372,"^1J",40,"^E","G__40686"],["^ ","^1I",381,"^1J",40],["^ ","^1I",488,"^1J",40],["^ ","^1I",488,"^1J",40,"^E","cljs.core/contains?"],["^ ","^1I",514,"^1J",40,"^E","G__40686"],["^ ","^1I",523,"^1J",40],["^ ","^1I",655,"^1J",40],["^ ","^1I",655,"^1J",40,"^E","cljs.core/contains?"],["^ ","^1I",681,"^1J",40,"^E","G__40686"],["^ ","^1I",690,"^1J",40],["^ ","^1I",3,"^1J",41],["^ ","^1I",87,"^1J",41],["^ ","^1I",201,"^1J",41],["^ ","^1I",303,"^1J",41],["^ ","^1I",406,"^1J",41],["^ ","^1I",518,"^1J",41],["^ ","^1I",659,"^1J",41],["^ ","^1I",786,"^1J",41],["^ ","^1I",901,"^1J",41],["^ ","^1I",1014,"^1J",41],["^ ","^1I",1132,"^1J",41],["^ ","^1I",1250,"^1J",41],["^ ","^1I",1359,"^1J",41],["^ ","^1I",1442,"^1J",41],["^ ","^1I",1551,"^1J",41],["^ ","^1I",1661,"^1J",41],["^ ","^1I",1762,"^1J",41],["^ ","^1I",1888,"^1J",41],["^ ","^1I",1981,"^1J",41],["^ ","^1I",2064,"^1J",41],["^ ","^1I",2173,"^1J",41],["^ ","^1I",2283,"^1J",41],["^ ","^1I",2384,"^1J",41],["^ ","^1I",2510,"^1J",41],["^ ","^1I",2603,"^1J",41],["^ ","^1I",2686,"^1J",41],["^ ","^1I",2795,"^1J",41],["^ ","^1I",2905,"^1J",41],["^ ","^1I",3006,"^1J",41],["^ ","^1I",3132,"^1J",41],["^ ","^1I",3225,"^1J",41],["^ ","^1I",3309,"^1J",41],["^ ","^1I",3423,"^1J",41],["^ ","^1I",3525,"^1J",41],["^ ","^1I",3628,"^1J",41],["^ ","^1I",3740,"^1J",41],["^ ","^1I",3881,"^1J",41],["^ ","^1I",4008,"^1J",41],["^ ","^1I",4123,"^1J",41],["^ ","^1I",4236,"^1J",41],["^ ","^1I",4354,"^1J",41],["^ ","^1I",4472,"^1J",41],["^ ","^1I",4581,"^1J",41],["^ ","^1I",4664,"^1J",41],["^ ","^1I",4679,"^1J",41],["^ ","^1I",4750,"^1J",41],["^ ","^1I",4833,"^1J",41],["^ ","^1I",4892,"^1J",41],["^ ","^1I",4907,"^1J",41],["^ ","^1I",4982,"^1J",41],["^ ","^1I",5035,"^1J",41],["^ ","^1I",5050,"^1J",41],["^ ","^1I",5121,"^1J",41],["^ ","^1I",5204,"^1J",41],["^ ","^1I",5263,"^1J",41],["^ ","^1I",5278,"^1J",41],["^ ","^1I",5362,"^1J",41],["^ ","^1I",5413,"^1J",41],["^ ","^1I",5524,"^1J",41],["^ ","^1I",5539,"^1J",41],["^ ","^1I",5610,"^1J",41],["^ ","^1I",5693,"^1J",41],["^ ","^1I",5752,"^1J",41],["^ ","^1I",5767,"^1J",41],["^ ","^1I",5851,"^1J",41],["^ ","^1I",5902,"^1J",41],["^ ","^1I",6014,"^1J",41],["^ ","^1I",6029,"^1J",41],["^ ","^1I",6100,"^1J",41],["^ ","^1I",6183,"^1J",41],["^ ","^1I",6242,"^1J",41],["^ ","^1I",6257,"^1J",41],["^ ","^1I",6341,"^1J",41],["^ ","^1I",6392,"^1J",41],["^ ","^1I",6495,"^1J",41],["^ ","^1I",6510,"^1J",41],["^ ","^1I",6581,"^1J",41],["^ ","^1I",6664,"^1J",41],["^ ","^1I",6723,"^1J",41],["^ ","^1I",6738,"^1J",41],["^ ","^1I",6822,"^1J",41],["^ ","^1I",6873,"^1J",41],["^ ","^1I",7001,"^1J",41],["^ ","^1I",7016,"^1J",41],["^ ","^1I",7087,"^1J",41],["^ ","^1I",7170,"^1J",41],["^ ","^1I",7229,"^1J",41],["^ ","^1I",7244,"^1J",41],["^ ","^1I",7328,"^1J",41],["^ ","^1I",7379,"^1J",41],["^ ","^1I",7474,"^1J",41],["^ ","^1I",7558,"^1J",41],["^ ","^1I",7672,"^1J",41],["^ ","^1I",7774,"^1J",41],["^ ","^1I",7877,"^1J",41],["^ ","^1I",7989,"^1J",41],["^ ","^1I",8130,"^1J",41],["^ ","^1I",8257,"^1J",41],["^ ","^1I",8372,"^1J",41],["^ ","^1I",8485,"^1J",41],["^ ","^1I",8603,"^1J",41],["^ ","^1I",8721,"^1J",41]]],"^1[",["^ ","~i0",[["^ ","^1I",0,"^1J",42],["^ ","^1I",0,"^1J",42,"^E","cljs.spec.alpha/def-impl"],["^ ","^1I",25,"^1J",42],["^ ","^1I",142,"^1J",42]],"^1P",[["^ ","^1I",212,"^1J",42,"^E","cljs.core/fn?"]]],"~i32",["^ ","~i0",[["^ ","^1I",0,"^1J",43],["^ ","^1I",0,"^1J",43,"^E","cljs.spec.alpha/def-impl"],["^ ","^1I",25,"^1J",43],["^ ","^1I",142,"^1J",43]],"^1Q",[["^ ","^1I",212,"^1J",43,"^E","cljs.core/fn?"]]],"^1X",["^ ","~i0",[["^ ","^1I",0,"^1J",44],["^ ","^1I",0,"^1J",44,"^E","cljs.spec.alpha/def-impl"],["^ ","^1I",25,"^1J",44],["^ ","^1I",159,"^1J",44],["^ ","^1I",174,"^1J",44],["^ ","^1I",266,"^1J",44]],"^1R",[["^ ","^1I",391,"^1J",44],["^ ","^1I",391,"^1J",44,"^E","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4"],["^ ","^1I",448,"^1J",44],["^ ","^1I",572,"^1J",44],["^ ","^1I",696,"^1J",44],["^ ","^1I",739,"^1J",44],["^ ","^1I",832,"^1J",44],["^ ","^1I",837,"^1J",44],["^ ","^1I",921,"^1J",44],["^ ","^1I",932,"^1J",44,"^E","G__40719"],["^ ","^1I",0,"^1J",45],["^ ","^1I",0,"^1J",45],["^ ","^1I",7,"^1J",45,"^E","cljs.core/coll?"],["^ ","^1I",29,"^1J",45,"^E","G__40719"],["^ ","^1I",3,"^1J",46],["^ ","^1I",97,"^1J",46],["^ ","^1I",102,"^1J",46],["^ ","^1I",192,"^1J",46],["^ ","^1I",207,"^1J",46],["^ ","^1I",299,"^1J",46],["^ ","^1I",432,"^1J",46]]],"~i34",["^ ","~i0",[["^ ","^1I",0,"^1J",47],["^ ","^1I",0,"^1J",47,"^E","cljs.spec.alpha/def-impl"],["^ ","^1I",25,"^1J",47],["^ ","^1I",141,"^1J",47],["^ ","^1I",156,"^1J",47],["^ ","^1I",242,"^1J",47],["^ ","^1I",293,"^1J",47],["^ ","^1I",376,"^1J",47],["^ ","^1I",477,"^1J",47],["^ ","^1I",594,"^1J",47],["^ ","^1I",711,"^1J",47],["^ ","^1I",808,"^1J",47],["^ ","^1I",901,"^1J",47],["^ ","^1I",952,"^1J",47],["^ ","^1I",1035,"^1J",47]],"^1P",[["^ ","^1I",1178,"^1J",47],["^ ","^1I",1178,"^1J",47,"^E","cljs.spec.alpha/map-spec-impl"],["^ ","^1I",1208,"^1J",47],["^ ","^1I",1248,"^1J",47],["^ ","^1I",1305,"^1J",47],["^ ","^1I",1361,"^1J",47],["^ ","^1I",1411,"^1J",47],["^ ","^1I",1476,"^1J",47],["^ ","^1I",1538,"^1J",47],["^ ","^1I",1599,"^1J",47],["^ ","^1I",1661,"^1J",47],["^ ","^1I",1712,"^1J",47],["^ ","^1I",1772,"^1J",47],["^ ","^1I",1835,"^1J",47],["^ ","^1I",1899,"^1J",47],["^ ","^1I",1952,"^1J",47],["^ ","^1I",1957,"^1J",47],["^ ","^1I",1962,"^1J",47],["^ ","^1I",1967,"^1J",47],["^ ","^1I",2050,"^1J",47],["^ ","^1I",2061,"^1J",47,"^E","G__40723"],["^ ","^1I",0,"^1J",48],["^ ","^1I",0,"^1J",48],["^ ","^1I",7,"^1J",48,"^E","cljs.core/map?"],["^ ","^1I",28,"^1J",48,"^E","G__40723"],["^ ","^1I",3,"^1J",49],["^ ","^1I",14,"^1J",49,"^E","G__40723"],["^ ","^1I",0,"^1J",50],["^ ","^1I",0,"^1J",50],["^ ","^1I",7,"^1J",50,"^E","cljs.core/contains?"],["^ ","^1I",33,"^1J",50,"^E","G__40723"],["^ ","^1I",42,"^1J",50],["^ ","^1I",3,"^1J",51],["^ ","^1I",14,"^1J",51,"^E","G__40723"],["^ ","^1I",0,"^1J",52],["^ ","^1I",0,"^1J",52],["^ ","^1I",7,"^1J",52,"^E","cljs.core/contains?"],["^ ","^1I",33,"^1J",52,"^E","G__40723"],["^ ","^1I",42,"^1J",52],["^ ","^1I",3,"^1J",53],["^ ","^1I",14,"^1J",53,"^E","G__40723"],["^ ","^1I",0,"^1J",54],["^ ","^1I",0,"^1J",54],["^ ","^1I",7,"^1J",54,"^E","cljs.core/contains?"],["^ ","^1I",33,"^1J",54,"^E","G__40723"],["^ ","^1I",42,"^1J",54],["^ ","^1I",3,"^1J",55],["^ ","^1I",14,"^1J",55,"^E","G__40723"],["^ ","^1I",0,"^1J",56],["^ ","^1I",0,"^1J",56],["^ ","^1I",7,"^1J",56,"^E","cljs.core/contains?"],["^ ","^1I",33,"^1J",56,"^E","G__40723"],["^ ","^1I",42,"^1J",56],["^ ","^1I",3,"^1J",57],["^ ","^1I",14,"^1J",57,"^E","G__40723"],["^ ","^1I",0,"^1J",58],["^ ","^1I",0,"^1J",58],["^ ","^1I",7,"^1J",58,"^E","cljs.core/contains?"],["^ ","^1I",33,"^1J",58,"^E","G__40723"],["^ ","^1I",42,"^1J",58],["^ ","^1I",11,"^1J",59],["^ ","^1I",22,"^1J",59,"^E","G__40723"],["^ ","^1I",0,"^1J",60],["^ ","^1I",0,"^1J",60],["^ ","^1I",9,"^1J",60],["^ ","^1I",9,"^1J",60,"^E","cljs.core/map?"],["^ ","^1I",30,"^1J",60,"^E","G__40723"],["^ ","^1I",45,"^1J",60],["^ ","^1I",45,"^1J",60,"^E","cljs.core/contains?"],["^ ","^1I",71,"^1J",60,"^E","G__40723"],["^ ","^1I",80,"^1J",60],["^ ","^1I",187,"^1J",60],["^ ","^1I",187,"^1J",60,"^E","cljs.core/contains?"],["^ ","^1I",213,"^1J",60,"^E","G__40723"],["^ ","^1I",222,"^1J",60],["^ ","^1I",345,"^1J",60],["^ ","^1I",345,"^1J",60,"^E","cljs.core/contains?"],["^ ","^1I",371,"^1J",60,"^E","G__40723"],["^ ","^1I",380,"^1J",60],["^ ","^1I",503,"^1J",60],["^ ","^1I",503,"^1J",60,"^E","cljs.core/contains?"],["^ ","^1I",529,"^1J",60,"^E","G__40723"],["^ ","^1I",538,"^1J",60],["^ ","^1I",641,"^1J",60],["^ ","^1I",641,"^1J",60,"^E","cljs.core/contains?"],["^ ","^1I",667,"^1J",60,"^E","G__40723"],["^ ","^1I",676,"^1J",60],["^ ","^1I",3,"^1J",61],["^ ","^1I",86,"^1J",61],["^ ","^1I",228,"^1J",61],["^ ","^1I",311,"^1J",61],["^ ","^1I",412,"^1J",61],["^ ","^1I",529,"^1J",61],["^ ","^1I",646,"^1J",61],["^ ","^1I",743,"^1J",61],["^ ","^1I",836,"^1J",61],["^ ","^1I",919,"^1J",61],["^ ","^1I",1020,"^1J",61],["^ ","^1I",1137,"^1J",61],["^ ","^1I",1254,"^1J",61],["^ ","^1I",1351,"^1J",61],["^ ","^1I",1444,"^1J",61],["^ ","^1I",1527,"^1J",61],["^ ","^1I",1628,"^1J",61],["^ ","^1I",1745,"^1J",61],["^ ","^1I",1862,"^1J",61],["^ ","^1I",1959,"^1J",61],["^ ","^1I",2052,"^1J",61],["^ ","^1I",2135,"^1J",61],["^ ","^1I",2277,"^1J",61],["^ ","^1I",2360,"^1J",61],["^ ","^1I",2375,"^1J",61],["^ ","^1I",2446,"^1J",61],["^ ","^1I",2529,"^1J",61],["^ ","^1I",2588,"^1J",61],["^ ","^1I",2603,"^1J",61],["^ ","^1I",2678,"^1J",61],["^ ","^1I",2731,"^1J",61],["^ ","^1I",2746,"^1J",61],["^ ","^1I",2817,"^1J",61],["^ ","^1I",2900,"^1J",61],["^ ","^1I",2959,"^1J",61],["^ ","^1I",2974,"^1J",61],["^ ","^1I",3058,"^1J",61],["^ ","^1I",3109,"^1J",61],["^ ","^1I",3212,"^1J",61],["^ ","^1I",3227,"^1J",61],["^ ","^1I",3298,"^1J",61],["^ ","^1I",3381,"^1J",61],["^ ","^1I",3440,"^1J",61],["^ ","^1I",3455,"^1J",61],["^ ","^1I",3539,"^1J",61],["^ ","^1I",3590,"^1J",61],["^ ","^1I",3709,"^1J",61],["^ ","^1I",3724,"^1J",61],["^ ","^1I",3795,"^1J",61],["^ ","^1I",3878,"^1J",61],["^ ","^1I",3937,"^1J",61],["^ ","^1I",3952,"^1J",61],["^ ","^1I",4036,"^1J",61],["^ ","^1I",4087,"^1J",61],["^ ","^1I",4206,"^1J",61],["^ ","^1I",4221,"^1J",61],["^ ","^1I",4292,"^1J",61],["^ ","^1I",4375,"^1J",61],["^ ","^1I",4434,"^1J",61],["^ ","^1I",4449,"^1J",61],["^ ","^1I",4533,"^1J",61],["^ ","^1I",4584,"^1J",61],["^ ","^1I",4683,"^1J",61],["^ ","^1I",4698,"^1J",61],["^ ","^1I",4769,"^1J",61],["^ ","^1I",4852,"^1J",61],["^ ","^1I",4911,"^1J",61],["^ ","^1I",4926,"^1J",61],["^ ","^1I",5010,"^1J",61],["^ ","^1I",5061,"^1J",61],["^ ","^1I",5156,"^1J",61],["^ ","^1I",5239,"^1J",61]]],"~i35",["^ ","~i0",[["^ ","^1I",0,"^1J",62],["^ ","^1I",0,"^1J",62,"^E","cljs.spec.alpha/def-impl"],["^ ","^1I",25,"^1J",62],["^ ","^1I",152,"^1J",62]],"^1V",[["^ ","^1I",227,"^1J",62,"^E","cljs.core/any?"]]],"~i36",["^ ","~i0",[["^ ","^1I",0,"^1J",63],["^ ","^1I",0,"^1J",63,"^E","cljs.spec.alpha/def-impl"],["^ ","^1I",25,"^1J",63],["^ ","^1I",154,"^1J",63],["^ ","^1I",169,"^1J",63],["^ ","^1I",255,"^1J",63],["^ ","^1I",306,"^1J",63],["^ ","^1I",389,"^1J",63],["^ ","^1I",523,"^1J",63]],"^1W",[["^ ","^1I",659,"^1J",63],["^ ","^1I",659,"^1J",63,"^E","cljs.spec.alpha/map-spec-impl"],["^ ","^1I",689,"^1J",63],["^ ","^1I",729,"^1J",63],["^ ","^1I",786,"^1J",63],["^ ","^1I",842,"^1J",63],["^ ","^1I",892,"^1J",63],["^ ","^1I",957,"^1J",63],["^ ","^1I",1019,"^1J",63],["^ ","^1I",1080,"^1J",63],["^ ","^1I",1142,"^1J",63],["^ ","^1I",1193,"^1J",63],["^ ","^1I",1253,"^1J",63],["^ ","^1I",1316,"^1J",63],["^ ","^1I",1380,"^1J",63],["^ ","^1I",1433,"^1J",63],["^ ","^1I",1438,"^1J",63],["^ ","^1I",1443,"^1J",63],["^ ","^1I",1448,"^1J",63],["^ ","^1I",1531,"^1J",63],["^ ","^1I",1542,"^1J",63,"^E","G__40745"],["^ ","^1I",0,"^1J",64],["^ ","^1I",0,"^1J",64],["^ ","^1I",7,"^1J",64,"^E","cljs.core/map?"],["^ ","^1I",28,"^1J",64,"^E","G__40745"],["^ ","^1I",11,"^1J",65],["^ ","^1I",22,"^1J",65,"^E","G__40745"],["^ ","^1I",0,"^1J",66],["^ ","^1I",0,"^1J",66],["^ ","^1I",7,"^1J",66,"^E","cljs.core/map?"],["^ ","^1I",28,"^1J",66,"^E","G__40745"],["^ ","^1I",3,"^1J",67],["^ ","^1I",86,"^1J",67],["^ ","^1I",220,"^1J",67],["^ ","^1I",355,"^1J",67],["^ ","^1I",388,"^1J",67],["^ ","^1I",393,"^1J",67],["^ ","^1I",426,"^1J",67],["^ ","^1I",509,"^1J",67],["^ ","^1I",643,"^1J",67],["^ ","^1I",778,"^1J",67],["^ ","^1I",861,"^1J",67],["^ ","^1I",876,"^1J",67],["^ ","^1I",947,"^1J",67],["^ ","^1I",1030,"^1J",67],["^ ","^1I",1089,"^1J",67],["^ ","^1I",1104,"^1J",67],["^ ","^1I",1179,"^1J",67],["^ ","^1I",1240,"^1J",67],["^ ","^1I",1323,"^1J",67],["^ ","^1I",1457,"^1J",67]]],"~i38",["^ ","~i0",[["^ ","^1I",0,"^1J",68],["^ ","^1I",0,"^1J",68],["^ ","^1I",0,"^1J",69],["^ ","^1I",0,"^1J",70],["^ ","^1I",0,"^1J",71],["^ ","^1I",0,"^1J",72],["^ ","^1I",0,"^1J",73],["^ ","^1I",0,"^1J",74],["^ ","^1I",0,"^1J",75],["^ ","^1I",0,"^1J",76],["^ ","^1I",0,"^1J",77],["^ ","^1I",0,"^1J",78],["^ ","^1I",0,"^1J",79],["^ ","^1I",0,"^1J",80]]],"~i44",["^ ","~i0",[["^ ","^1I",0,"^1J",80],["^ ","^1I",50,"^1J",83],["^ ","^1I",0,"^1J",84]],"~i6",[["^ ","^1I",0,"^1J",83,"^E","fulcro.client.impl.data-fetch/data-state?"]]],"^22",["^ ","~i3",[["^ ","^1I",108,"^1J",83,"^E","state"]],"~i10",[["^ ","^1I",0,"^1J",84]],"^1H",[["^ ","^1I",9,"^1J",84]],"^1K",[["^ ","^1I",9,"^1J",84,"^E","cljs.core/map?"]],"^1Y",[["^ ","^1I",30,"^1J",84,"^E","state"]],"^26",[["^ ","^1I",42,"^1J",84],["^ ","^1I",74,"^1J",84]],"~i29",[["^ ","^1I",42,"^1J",84,"^E","cljs.core/contains?"]],"~i39",[["^ ","^1I",68,"^1J",84,"^E","state"]]],"~i48",["^ ","~i0",[["^ ","^1I",0,"^1J",86],["^ ","^1I",21,"^1J",86],["^ ","^1I",0,"^1J",87],["^ ","^1I",0,"^1J",93]],"^1S",[["^ ","^1I",76,"^1J",86,"^E","state"]],"^1T",[["^ ","^1I",82,"^1J",86,"^E","type"]]],"^1N",["^ ","^2=",[["^ ","^1I",0,"^1J",87],["^ ","^1I",0,"^1J",90]],"^1O",[["^ ","^1I",20,"^1J",87]],"^1H",[["^ ","^1I",20,"^1J",87,"^E","fulcro.client.impl.data-fetch/data-state?"]],"^21",[["^ ","^1I",68,"^1J",87,"^E","state"]]],"~i50",["^ ","~i12",[["^ ","^1I",0,"^1J",88]],"~i13",[["^ ","^1I",7,"^1J",88,"^E","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^1H",[["^ ","^1I",52,"^1J",88,"^E","type"]],"^1U",[["^ ","^1I",57,"^1J",88],["^ ","^1I",57,"^1J",88]],"^26",[["^ ","^1I",196,"^1J",88,"^E","state"]]],"~i52",["^ ","~i2",[["^ ","^1I",0,"^1J",93],["^ ","^1I",45,"^1J",96],["^ ","^1I",0,"^1J",97]],"~i8",[["^ ","^1I",0,"^1J",96,"^E","fulcro.client.impl.data-fetch/ready?"]]],"~i54",["^ ","~i5",[["^ ","^1I",98,"^1J",96,"^E","state"]],"^2B",[["^ ","^1I",0,"^1J",97],["^ ","^1I",28,"^1J",97]],"^2C",[["^ ","^1I",7,"^1J",97,"^E","is-kind?"]],"^1L",[["^ ","^1I",22,"^1J",97,"^E","state"]]],"~i55",["^ ","~i2",[["^ ","^1I",0,"^1J",100],["^ ","^1I",47,"^1J",103],["^ ","^1I",0,"^1J",104]],"~i8",[["^ ","^1I",0,"^1J",103,"^E","fulcro.client.impl.data-fetch/loading?"]]],"~i57",["^ ","~i5",[["^ ","^1I",102,"^1J",103,"^E","state"]],"^2B",[["^ ","^1I",0,"^1J",104],["^ ","^1I",28,"^1J",104]],"^2C",[["^ ","^1I",7,"^1J",104,"^E","is-kind?"]],"^1L",[["^ ","^1I",22,"^1J",104,"^E","state"]]],"~i58",["^ ","~i2",[["^ ","^1I",0,"^1J",107],["^ ","^1I",46,"^1J",110],["^ ","^1I",0,"^1J",111]],"~i8",[["^ ","^1I",0,"^1J",110,"^E","fulcro.client.impl.data-fetch/failed?"]]],"~i60",["^ ","~i5",[["^ ","^1I",100,"^1J",110,"^E","state"]],"^2B",[["^ ","^1I",0,"^1J",111],["^ ","^1I",28,"^1J",111]],"^2C",[["^ ","^1I",7,"^1J",111,"^E","is-kind?"]],"^1L",[["^ ","^1I",22,"^1J",111,"^E","state"]]],"~i62",["^ ","~i0",[["^ ","^1I",0,"^1J",113],["^ ","^1I",60,"^1J",113],["^ ","^1I",0,"^1J",114]],"~i6",[["^ ","^1I",0,"^1J",113,"^E","fulcro.client.impl.data-fetch/is-direct-table-load?"]],"^2>",[["^ ","^1I",128,"^1J",113,"^E","load-marker"]]],"~i63",["^ ","~i2",[["^ ","^1I",0,"^1J",114]]],"~i64",["^ ","~i4",[["^ ","^1I",9,"^1J",114]],"~i5",[["^ ","^1I",9,"^1J",114,"^E","cljs.core/not"]],"~i9",[["^ ","^1I",23,"^1J",114]],"^2=",[["^ ","^1I",24,"^1J",114,"^E","fulcro.client.impl.data-fetch/data-field"],["^ ","^1I",97,"^1J",114,"^E","fulcro.client.impl.data-fetch/data-field"],["^ ","^1I",183,"^1J",114,"^E","fulcro.client.impl.data-fetch/data-field"]],"^1Y",[["^ ","^1I",168,"^1J",114,"^E","load-marker"],["^ ","^1I",234,"^1J",114,"^E","load-marker"]]],"~i65",["^ ","~i4",[["^ ","^1I",254,"^1J",114]],"~i5",[["^ ","^1I",254,"^1J",114,"^E","fulcro.util/ident?"]],"^1P",[["^ ","^1I",279,"^1J",114]],"^1Q",[["^ ","^1I",280,"^1J",114,"^E","fulcro.client.impl.data-fetch/data-query-key"],["^ ","^1I",357,"^1J",114,"^E","fulcro.client.impl.data-fetch/data-query-key"],["^ ","^1I",447,"^1J",114,"^E","fulcro.client.impl.data-fetch/data-query-key"]],"^1X",[["^ ","^1I",432,"^1J",114,"^E","load-marker"],["^ ","^1I",502,"^1J",114,"^E","load-marker"]]],"~i67",["^ ","~i0",[["^ ","^1I",0,"^1J",116],["^ ","^1I",45,"^1J",116]],"~i5",[["^ ","^1I",0,"^1J",116,"^E","fulcro.client.impl.data-fetch/marker-table"]]],"~i70",["^ ","~i0",[["^ ","^1I",0,"^1J",117],["^ ","^1I",50,"^1J",117],["^ ","^1I",0,"^1J",118]],"~i7",[["^ ","^1I",0,"^1J",117,"^E","fulcro.client.impl.data-fetch/place-load-marker"]],"^1R",[["^ ","^1I",108,"^1J",117,"^E","state-map"]],"^2:",[["^ ","^1I",118,"^1J",117,"^E","marker"]]],"~i71",["^ ","~i2",[["^ ","^1I",0,"^1J",118],["^ ","^1I",0,"^1J",120]],"~i8",[["^ ","^1I",4,"^1J",118,"^E","marker-id"]],"^1V",[["^ ","^1I",16,"^1J",118]],"^1W",[["^ ","^1I",17,"^1J",118,"^E","fulcro.client.impl.data-fetch/data-marker"],["^ ","^1I",91,"^1J",118,"^E","fulcro.client.impl.data-fetch/data-marker"],["^ ","^1I",173,"^1J",118,"^E","fulcro.client.impl.data-fetch/data-marker"]],"^2:",[["^ ","^1I",163,"^1J",118,"^E","marker"],["^ ","^1I",225,"^1J",118,"^E","marker"]]],"^24",["^ ","~i8",[["^ ","^1I",4,"^1J",119,"^E","legacy-marker?"]],"^1V",[["^ ","^1I",27,"^1J",119]],"^1Z",[["^ ","^1I",27,"^1J",119,"^E","marker-id"]]],"~i73",["^ ","~i4",[["^ ","^1I",0,"^1J",120]],"~i8",[["^ ","^1I",3,"^1J",120,"^E","legacy-marker?"]]],"~i74",["^ ","~i6",[["^ ","^1I",0,"^1J",121]],"~i7",[["^ ","^1I",7,"^1J",121,"^E","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3"]],"^1P",[["^ ","^1I",57,"^1J",121,"^E","state-map"]],"^21",[["^ ","^1I",67,"^1J",121]],"^26",[["^ ","^1I",68,"^1J",121,"^E","fulcro.client.impl.data-fetch/data-path"],["^ ","^1I",140,"^1J",121,"^E","fulcro.client.impl.data-fetch/data-path"],["^ ","^1I",220,"^1J",121,"^E","fulcro.client.impl.data-fetch/data-path"]],"^2;",[["^ ","^1I",210,"^1J",121,"^E","marker"],["^ ","^1I",270,"^1J",121,"^E","marker"]]],"~i75",["^ ","~i8",[["^ ","^1I",279,"^1J",121],["^ ","^1I",0,"^1J",123]],"^2C",[["^ ","^1I",18,"^1J",122,"^E","current-val"]]],"~i76",["^ ","^2=",[["^ ","^1I",0,"^1J",123],["^ ","^1I",0,"^1J",130],["^ ","^1I",50,"^1J",130]],"^1O",[["^ ","^1I",20,"^1J",123]],"^1H",[["^ ","^1I",20,"^1J",123,"^E","fulcro.client.impl.data-fetch/is-direct-table-load?"]],"^1M",[["^ ","^1I",78,"^1J",123,"^E","marker"]]],"~i77",["^ ","^2B",[["^ ","^1I",0,"^1J",124],["^ ","^1I",0,"^1J",125],["^ ","^1I",0,"^1J",127]],"^1Q",[["^ ","^1I",3,"^1J",124]],"^1S",[["^ ","^1I",3,"^1J",124,"^E","cljs.core/map?"]],"^1W",[["^ ","^1I",24,"^1J",124,"^E","current-val"]],"^1M",[["^ ","^1I",0,"^1J",125],["^ ","^1I",65,"^1J",125]],"^2;",[["^ ","^1I",7,"^1J",125,"^E","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3"]],"^2<",[["^ ","^1I",53,"^1J",125,"^E","current-val"]],"^24",[["^ ","^1I",135,"^1J",125,"^E","marker"]]],"~i78",["^ ","^2>",[["^ ","^1I",120,"^1J",130,"^E","marker"]]],"~i79",["^ ","~i6",[["^ ","^1I",0,"^1J",135],["^ ","^1I",36,"^1J",135]],"~i7",[["^ ","^1I",7,"^1J",135,"^E","cljs.core/assoc-in"]],"^1K",[["^ ","^1I",26,"^1J",135,"^E","state-map"]],"^21",[["^ ","^1I",119,"^1J",135,"^E","fulcro.client.impl.data-fetch/marker-table"]],"^20",[["^ ","^1I",162,"^1J",135,"^E","marker-id"]],"~i51",[["^ ","^1I",180,"^1J",135,"^E","marker"]]],"~i81",["^ ","~i0",[["^ ","^1I",0,"^1J",138],["^ ","^1I",51,"^1J",141],["^ ","^1I",0,"^1J",142]],"~i7",[["^ ","^1I",0,"^1J",141,"^E","fulcro.client.impl.data-fetch/place-load-markers"]]],"~i83",["^ ","~i3",[["^ ","^1I",110,"^1J",141,"^E","state-map"]],"^2C",[["^ ","^1I",120,"^1J",141,"^E","items-to-load"]]],"^25",["^ ","~i2",[["^ ","^1I",0,"^1J",142]],"~i3",[["^ ","^1I",7,"^1J",142,"^E","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^2=",[["^ ","^1I",54,"^1J",142],["^ ","^1I",0,"^1J",143]],"^1H",[["^ ","^1I",65,"^1J",142,"^E","s"]],"^1P",[["^ ","^1I",67,"^1J",142,"^E","item"]]],"~i85",["^ ","^2B",[["^ ","^1I",0,"^1J",143],["^ ","^1I",0,"^1J",144]],"^1Q",[["^ ","^1I",4,"^1J",143,"^E","i"]],"^1U",[["^ ","^1I",8,"^1J",143]],"^1Y",[["^ ","^1I",9,"^1J",143,"^E","fulcro.client.impl.data-fetch/set-loading!"],["^ ","^1I",89,"^1J",143,"^E","fulcro.client.impl.data-fetch/set-loading!"],["^ ","^1I",175,"^1J",143,"^E","fulcro.client.impl.data-fetch/set-loading!"]],"^28",[["^ ","^1I",167,"^1J",143,"^E","item"],["^ ","^1I",233,"^1J",143,"^E","item"]]],"~i86",["^ ","^1O",[["^ ","^1I",0,"^1J",144],["^ ","^1I",4,"^1J",144,"^E","G__40770"],["^ ","^1I",0,"^1J",145],["^ ","^1I",0,"^1J",145],["^ ","^1I",0,"^1J",148,"^E","G__40770"]],"^1L",[["^ ","^1I",15,"^1J",144],["^ ","^1I",64,"^1J",144]],"^1V",[["^ ","^1I",15,"^1J",144,"^E","cljs.core.update.cljs$core$IFn$_invoke$arity$4"]],"^1Z",[["^ ","^1I",62,"^1J",144,"^E","s"]],"^2H",[["^ ","^1I",155,"^1J",144],["^ ","^1I",215,"^1J",144]],"~i59",[["^ ","^1I",155,"^1J",144,"^E","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2"]],"^2L",[["^ ","^1I",200,"^1J",144,"^E","cljs.core/conj"]],"^2R",[["^ ","^1I",250,"^1J",144]],"^2S",[["^ ","^1I",251,"^1J",144,"^E","fulcro.client.impl.data-fetch/data-uuid"],["^ ","^1I",323,"^1J",144,"^E","fulcro.client.impl.data-fetch/data-uuid"],["^ ","^1I",398,"^1J",144,"^E","fulcro.client.impl.data-fetch/data-uuid"]],"^2[",[["^ ","^1I",393,"^1J",144,"^E","i"],["^ ","^1I",448,"^1J",144,"^E","i"]]],"~i87",["^ ","^1K",[["^ ","^1I",20,"^1J",145]],"^1P",[["^ ","^1I",21,"^1J",145,"^E","fulcro.client.impl.data-fetch/data-marker?"],["^ ","^1I",102,"^1J",145,"^E","fulcro.client.impl.data-fetch/data-marker?"],["^ ","^1I",186,"^1J",145,"^E","fulcro.client.impl.data-fetch/data-marker?"]],"^1Z",[["^ ","^1I",181,"^1J",145,"^E","i"],["^ ","^1I",245,"^1J",145,"^E","i"]],"^1X",[["^ ","^1I",0,"^1J",146],["^ ","^1I",55,"^1J",146,"^E","G__40770"]],"^28",[["^ ","^1I",7,"^1J",146,"^E","fulcro.client.impl.data-fetch/place-load-marker"]],"^2D",[["^ ","^1I",64,"^1J",146,"^E","i"]]],"~i88",["^ ","~i4",[["^ ","^1I",3,"^1J",150,"^E","state-map"]],"^1O",[["^ ","^1I",13,"^1J",150,"^E","items-to-load"]]],"~i90",["^ ","~i0",[["^ ","^1I",0,"^1J",152],["^ ","^1I",0,"^1J",152,"^E","cljs.spec.alpha/def-impl"],["^ ","^1I",25,"^1J",152],["^ ","^1I",166,"^1J",152],["^ ","^1I",181,"^1J",152],["^ ","^1I",270,"^1J",152],["^ ","^1I",323,"^1J",152],["^ ","^1I",338,"^1J",152],["^ ","^1I",423,"^1J",152],["^ ","^1I",479,"^1J",152],["^ ","^1I",554,"^1J",152],["^ ","^1I",609,"^1J",152],["^ ","^1I",744,"^1J",152],["^ ","^1I",795,"^1J",152],["^ ","^1I",871,"^1J",152],["^ ","^1I",871,"^1J",152,"^E","cljs.spec.alpha/fspec-impl"],["^ ","^1I",898,"^1J",152],["^ ","^1I",898,"^1J",152,"^E","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4"],["^ ","^1I",954,"^1J",152],["^ ","^1I",969,"^1J",152],["^ ","^1I",1054,"^1J",152],["^ ","^1I",1110,"^1J",152],["^ ","^1I",1185,"^1J",152],["^ ","^1I",1240,"^1J",152],["^ ","^1I",2149,"^1J",152],["^ ","^1I",2154,"^1J",152],["^ ","^1I",2160,"^1J",152],["^ ","^1I",2175,"^1J",152],["^ ","^1I",2260,"^1J",152],["^ ","^1I",2316,"^1J",152],["^ ","^1I",2391,"^1J",152],["^ ","^1I",2446,"^1J",152],["^ ","^1I",2581,"^1J",152],["^ ","^1I",2581,"^1J",152,"^E","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4"],["^ ","^1I",2637,"^1J",152],["^ ","^1I",2733,"^1J",152],["^ ","^1I",2738,"^1J",152],["^ ","^1I",2744,"^1J",152],["^ ","^1I",2819,"^1J",152],["^ ","^1I",2824,"^1J",152],["^ ","^1I",2829,"^1J",152]]],"~i91",["^ ","~i8",[["^ ","^1I",1375,"^1J",152],["^ ","^1I",1375,"^1J",152,"^E","cljs.spec.alpha/cat-impl"],["^ ","^1I",1400,"^1J",152],["^ ","^1I",1483,"^1J",152],["^ ","^1I",1539,"^1J",152],["^ ","^1I",1602,"^1J",152],["^ ","^1I",1706,"^1J",152],["^ ","^1I",1848,"^1J",152],["^ ","^1I",1931,"^1J",152],["^ ","^1I",2006,"^1J",152]],"^1L",[["^ ","^1I",1685,"^1J",152,"^E","cljs.core/map?"]]],"~i92",["^ ","~i7",[["^ ","^1I",2712,"^1J",152,"^E","cljs.core/map?"]]],"~i94",["^ ","~i0",[["^ ","^1I",0,"^1J",153],["^ ","^1I",51,"^1J",157],["^ ","^1I",0,"^1J",158]],"~i6",[["^ ","^1I",0,"^1J",157,"^E","fulcro.client.impl.data-fetch/earliest-load-time"]]],"~i97",["^ ","~i3",[["^ ","^1I",110,"^1J",157,"^E","load-markers"]]],"~i98",["^ ","~i2",[["^ ","^1I",0,"^1J",158]],"~i3",[["^ ","^1I",7,"^1J",158,"^E","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^2=",[["^ ","^1I",54,"^1J",158,"^E","cljs.core/min"]],"^1O",[["^ ","^1I",68,"^1J",158,"^E","fulcro.history/max-tx-time"]],"^1[",[["^ ","^1I",95,"^1J",158],["^ ","^1I",139,"^1J",158]],"^27",[["^ ","^1I",95,"^1J",158,"^E","cljs.core.map.cljs$core$IFn$_invoke$arity$2"]],"^2X",[["^ ","^1I",224,"^1J",158,"^E","load-markers"]]],"~i100",["^ ","~i0",[["^ ","^1I",0,"^1J",160],["^ ","^1I",60,"^1J",174],["^ ","^1I",0,"^1J",175]],"~i6",[["^ ","^1I",0,"^1J",174,"^E","fulcro.client.impl.data-fetch/mark-parallel-loading!"]]],"~i113",["^ ","~i3",[["^ ","^1I",128,"^1J",174,"^E","remote-name"]],"^1H",[["^ ","^1I",140,"^1J",174,"^E","reconciler"]]],"~i114",["^ ","~i2",[["^ ","^1I",0,"^1J",175],["^ ","^1I",0,"^1J",195]],"~i8",[["^ ","^1I",4,"^1J",175,"^E","state"]],"^2>",[["^ ","^1I",12,"^1J",175]],"^1Z",[["^ ","^1I",12,"^1J",175,"^E","fulcro.client.primitives/app-state"]],"~i45",[["^ ","^1I",47,"^1J",175,"^E","reconciler"]]],"~i115",["^ ","~i8",[["^ ","^1I",4,"^1J",176,"^E","queued-items"]],"^2>",[["^ ","^1I",19,"^1J",176],["^ ","^1I",63,"^1J",176],["^ ","^1I",63,"^1J",176,"^E","cljs.core/deref"],["^ ","^1I",86,"^1J",176]],"^1Z",[["^ ","^1I",19,"^1J",176,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"]],"^29",[["^ ","^1I",79,"^1J",176,"^E","state"]]],"~i116",["^ ","~i8",[["^ ","^1I",4,"^1J",177,"^E","is-eligible?"]],"^2>",[["^ ","^1I",25,"^1J",177],["^ ","^1I",0,"^1J",179]],"^28",[["^ ","^1I",18,"^1J",178,"^E","item"]],"^20",[["^ ","^1I",0,"^1J",179],["^ ","^1I",4,"^1J",179,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",180],["^ ","^1I",0,"^1J",180],["^ ","^1I",20,"^1J",180,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",183,"^E","and__3938__auto__"]],"^3=",[["^ ","^1I",24,"^1J",179],["^ ","^1I",24,"^1J",179]],"^2G",[["^ ","^1I",172,"^1J",179,"^E","item"]],"^2K",[["^ ","^1I",0,"^1J",181]],"^2L",[["^ ","^1I",7,"^1J",181,"^E","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"~i66",[["^ ","^1I",52,"^1J",181,"^E","remote-name"]],"^2V",[["^ ","^1I",64,"^1J",181]],"^2W",[["^ ","^1I",65,"^1J",181,"^E","fulcro.client.impl.data-fetch/data-remote"],["^ ","^1I",139,"^1J",181,"^E","fulcro.client.impl.data-fetch/data-remote"],["^ ","^1I",219,"^1J",181,"^E","fulcro.client.impl.data-fetch/data-remote"]],"^35",[["^ ","^1I",211,"^1J",181,"^E","item"],["^ ","^1I",271,"^1J",181,"^E","item"]]],"~i117",["^ ","~i8",[["^ ","^1I",4,"^1J",187,"^E","other-items-loading?"]],"^2>",[["^ ","^1I",33,"^1J",187]],"^1Z",[["^ ","^1I",33,"^1J",187,"^E","cljs.core/boolean"]],"^2;",[["^ ","^1I",52,"^1J",187]],"^2?",[["^ ","^1I",52,"^1J",187,"^E","cljs.core/seq"]],"~i43",[["^ ","^1I",66,"^1J",187],["^ ","^1I",110,"^1J",187],["^ ","^1I",110,"^1J",187,"^E","cljs.core/deref"],["^ ","^1I",133,"^1J",187]],"^2<",[["^ ","^1I",66,"^1J",187,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"]],"^1N",[["^ ","^1I",126,"^1J",187,"^E","state"]]],"~i118",["^ ","~i8",[["^ ","^1I",4,"^1J",188,"^E","items-to-load"]],"^2>",[["^ ","^1I",20,"^1J",188]],"^1Z",[["^ ","^1I",20,"^1J",188,"^E","cljs.core.filter.cljs$core$IFn$_invoke$arity$2"]],"^1M",[["^ ","^1I",67,"^1J",188,"^E","is-eligible?"]],"^2A",[["^ ","^1I",86,"^1J",188,"^E","queued-items"]]],"~i119",["^ ","~i8",[["^ ","^1I",4,"^1J",189,"^E","remaining-items"]],"^2>",[["^ ","^1I",22,"^1J",189]],"^1Z",[["^ ","^1I",22,"^1J",189,"^E","cljs.core.filter.cljs$core$IFn$_invoke$arity$2"]],"^1M",[["^ ","^1I",69,"^1J",189]],"^2;",[["^ ","^1I",69,"^1J",189,"^E","cljs.core.comp.cljs$core$IFn$_invoke$arity$2"]],"^3B",[["^ ","^1I",114,"^1J",189,"^E","cljs.core/not"]],"~i47",[["^ ","^1I",128,"^1J",189,"^E","is-eligible?"]],"^23",[["^ ","^1I",148,"^1J",189,"^E","queued-items"]]],"~i120",["^ ","~i8",[["^ ","^1I",4,"^1J",190,"^E","loading?"]],"^2>",[["^ ","^1I",21,"^1J",190]],"^1X",[["^ ","^1I",23,"^1J",190]],"^28",[["^ ","^1I",23,"^1J",190,"^E","cljs.core/boolean"]],"~i42",[["^ ","^1I",42,"^1J",190]],"^3B",[["^ ","^1I",42,"^1J",190,"^E","cljs.core/seq"]],"^3E",[["^ ","^1I",56,"^1J",190,"^E","items-to-load"]],"^2K",[["^ ","^1I",77,"^1J",190,"^E","other-items-loading?"]]],"~i121",["^ ","~i8",[["^ ","^1I",4,"^1J",191,"^E","history-atom"]],"^2>",[["^ ","^1I",19,"^1J",191]],"^1Z",[["^ ","^1I",19,"^1J",191,"^E","fulcro.client.primitives/get-history"]],"^3E",[["^ ","^1I",56,"^1J",191,"^E","reconciler"]]],"~i122",["^ ","~i8",[["^ ","^1I",4,"^1J",192,"^E","ok"]],"^2>",[["^ ","^1I",9,"^1J",192]],"^1Z",[["^ ","^1I",10,"^1J",192,"^E","fulcro.client.impl.data-fetch/loaded-callback"],["^ ","^1I",88,"^1J",192,"^E","fulcro.client.impl.data-fetch/loaded-callback"],["^ ","^1I",178,"^1J",192,"^E","fulcro.client.impl.data-fetch/loaded-callback"]],"^22",[["^ ","^1I",164,"^1J",192,"^E","reconciler"],["^ ","^1I",234,"^1J",192,"^E","reconciler"]]],"~i123",["^ ","~i8",[["^ ","^1I",4,"^1J",193,"^E","error"]],"^2>",[["^ ","^1I",12,"^1J",193]],"^1Z",[["^ ","^1I",13,"^1J",193,"^E","fulcro.client.impl.data-fetch/error-callback"],["^ ","^1I",90,"^1J",193,"^E","fulcro.client.impl.data-fetch/error-callback"],["^ ","^1I",179,"^1J",193,"^E","fulcro.client.impl.data-fetch/error-callback"]],"^3=",[["^ ","^1I",165,"^1J",193,"^E","reconciler"],["^ ","^1I",234,"^1J",193,"^E","reconciler"]]],"~i124",["^ ","~i8",[["^ ","^1I",4,"^1J",194,"^E","tx-time"]],"^2>",[["^ ","^1I",14,"^1J",194]],"^1Z",[["^ ","^1I",14,"^1J",194,"^E","fulcro.client.impl.data-fetch/earliest-load-time"]],"^1N",[["^ ","^1I",63,"^1J",194,"^E","items-to-load"]]],"~i125",["^ ","~i4",[["^ ","^1I",0,"^1J",195],["^ ","^1I",0,"^1J",196],["^ ","^1I",0,"^1J",198]],"^1O",[["^ ","^1I",3,"^1J",195]],"^1H",[["^ ","^1I",3,"^1J",195,"^E","cljs.core/empty?"]],"^1L",[["^ ","^1I",26,"^1J",195,"^E","items-to-load"]]],"~i126",["^ ","~i6",[["^ ","^1I",0,"^1J",198]],"~i7",[["^ ","^1I",0,"^1J",198,"^E","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2"]],"^2C",[["^ ","^1I",51,"^1J",198,"^E","state"]],"^1S",[["^ ","^1I",57,"^1J",198],["^ ","^1I",0,"^1J",200]],"^1W",[["^ ","^1I",18,"^1J",199,"^E","s"]],"^1[",[["^ ","^1I",109,"^1J",200,"^E","s"]]],"~i127",["^ ","^2>",[["^ ","^1I",60,"^1J",200]],"^1Z",[["^ ","^1I",60,"^1J",200,"^E","fulcro.client.impl.data-fetch/place-load-markers"]],"^1N",[["^ ","^1I",111,"^1J",200,"^E","items-to-load"]]],"~i128",["^ ","^2>",[["^ ","^1I",0,"^1J",200],["^ ","^1I",126,"^1J",200],["^ ","^1I",264,"^1J",200]],"^1Z",[["^ ","^1I",7,"^1J",200,"^E","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic"]],"~i53",[["^ ","^1I",199,"^1J",200,"^E","loading?"]],"^25",[["^ ","^1I",345,"^1J",200,"^E","remaining-items"]]],"~i129",["^ ","~i6",[["^ ","^1I",0,"^1J",204],["^ ","^1I",4,"^1J",204,"^E","iter__4324__auto__"],["^ ","^1I",25,"^1J",204],["^ ","^1I",89,"^1J",205,"^E","s__40789"],["^ ","^1I",0,"^1J",206],["^ ","^1I",0,"^1J",206],["^ ","^1I",12,"^1J",206,"^E","cljs.core/LazySeq"],["^ ","^1I",30,"^1J",206],["^ ","^1I",35,"^1J",206],["^ ","^1I",0,"^1J",208],["^ ","^1I",0,"^1J",208],["^ ","^1I",4,"^1J",208,"^E","s__40789"],["^ ","^1I",19,"^1J",208,"^E","s__40789"],["^ ","^1I",0,"^1J",210],["^ ","^1I",0,"^1J",210],["^ ","^1I",4,"^1J",210,"^E","temp__5457__auto__"],["^ ","^1I",25,"^1J",210],["^ ","^1I",25,"^1J",210,"^E","cljs.core/seq"],["^ ","^1I",39,"^1J",210,"^E","s__40789"],["^ ","^1I",0,"^1J",211],["^ ","^1I",0,"^1J",211],["^ ","^1I",3,"^1J",211,"^E","temp__5457__auto__"],["^ ","^1I",0,"^1J",212],["^ ","^1I",0,"^1J",212],["^ ","^1I",4,"^1J",212,"^E","s__40789"],["^ ","^1I",19,"^1J",212,"^E","temp__5457__auto__"],["^ ","^1I",0,"^1J",213],["^ ","^1I",0,"^1J",213],["^ ","^1I",3,"^1J",213],["^ ","^1I",3,"^1J",213,"^E","cljs.core/chunked-seq?"],["^ ","^1I",32,"^1J",213,"^E","s__40789"],["^ ","^1I",0,"^1J",214],["^ ","^1I",4,"^1J",214,"^E","c__4322__auto__"],["^ ","^1I",4,"^1J",215,"^E","size__4323__auto__"],["^ ","^1I",25,"^1J",215],["^ ","^1I",25,"^1J",215,"^E","cljs.core/count"],["^ ","^1I",41,"^1J",215,"^E","c__4322__auto__"],["^ ","^1I",4,"^1J",216,"^E","b__40791"],["^ ","^1I",15,"^1J",216],["^ ","^1I",15,"^1J",216,"^E","cljs.core/chunk-buffer"],["^ ","^1I",38,"^1J",216,"^E","size__4323__auto__"],["^ ","^1I",0,"^1J",217],["^ ","^1I",0,"^1J",217],["^ ","^1I",3,"^1J",217],["^ ","^1I",3,"^1J",217],["^ ","^1I",20,"^1J",217,"^E","i__40790"],["^ ","^1I",31,"^1J",217],["^ ","^1I",0,"^1J",219],["^ ","^1I",0,"^1J",219],["^ ","^1I",3,"^1J",219],["^ ","^1I",4,"^1J",219,"^E","i__40790"],["^ ","^1I",15,"^1J",219,"^E","size__4323__auto__"],["^ ","^1I",0,"^1J",220],["^ ","^1I",11,"^1J",220],["^ ","^1I",11,"^1J",220,"^E","cljs.core._nth.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",56,"^1J",220,"^E","c__4322__auto__"],["^ ","^1I",72,"^1J",220,"^E","i__40790"],["^ ","^1I",0,"^1J",221],["^ ","^1I",0,"^1J",221],["^ ","^1I",0,"^1J",221],["^ ","^1I",0,"^1J",221,"^E","cljs.core/chunk-append"],["^ ","^1I",23,"^1J",221,"^E","b__40791"],["^ ","^1I",32,"^1J",221],["^ ","^1I",75,"^1J",221],["^ ","^1I",5,"^1J",223],["^ ","^1I",119,"^1J",223],["^ ","^1I",212,"^1J",223],["^ ","^1I",322,"^1J",223],["^ ","^1I",442,"^1J",223],["^ ","^1I",565,"^1J",223],["^ ","^1I",699,"^1J",223],["^ ","^1I",0,"^1J",225],["^ ","^1I",15,"^1J",225],["^ ","^1I",16,"^1J",225,"^E","i__40790"],["^ ","^1I",27,"^1J",225],["^ ","^1I",0,"^1J",229],["^ ","^1I",0,"^1J",234],["^ ","^1I",7,"^1J",234,"^E","cljs.core/chunk-cons"],["^ ","^1I",28,"^1J",234],["^ ","^1I",28,"^1J",234,"^E","cljs.core/chunk"],["^ ","^1I",44,"^1J",234,"^E","b__40791"],["^ ","^1I",54,"^1J",234],["^ ","^1I",54,"^1J",234,"^E","iter__40788"],["^ ","^1I",126,"^1J",234],["^ ","^1I",126,"^1J",234,"^E","cljs.core/chunk-rest"],["^ ","^1I",147,"^1J",234,"^E","s__40789"],["^ ","^1I",0,"^1J",236],["^ ","^1I",7,"^1J",236,"^E","cljs.core/chunk-cons"],["^ ","^1I",28,"^1J",236],["^ ","^1I",28,"^1J",236,"^E","cljs.core/chunk"],["^ ","^1I",44,"^1J",236,"^E","b__40791"],["^ ","^1I",54,"^1J",236],["^ ","^1I",0,"^1J",239],["^ ","^1I",11,"^1J",239],["^ ","^1I",11,"^1J",239,"^E","cljs.core/first"],["^ ","^1I",27,"^1J",239,"^E","s__40789"],["^ ","^1I",0,"^1J",240],["^ ","^1I",0,"^1J",240],["^ ","^1I",7,"^1J",240,"^E","cljs.core/cons"],["^ ","^1I",22,"^1J",240],["^ ","^1I",65,"^1J",240],["^ ","^1I",5,"^1J",242],["^ ","^1I",119,"^1J",242],["^ ","^1I",212,"^1J",242],["^ ","^1I",322,"^1J",242],["^ ","^1I",442,"^1J",242],["^ ","^1I",565,"^1J",242],["^ ","^1I",699,"^1J",242],["^ ","^1I",803,"^1J",242],["^ ","^1I",803,"^1J",242,"^E","iter__40788"],["^ ","^1I",875,"^1J",242],["^ ","^1I",875,"^1J",242,"^E","cljs.core/rest"],["^ ","^1I",890,"^1J",242,"^E","s__40789"],["^ ","^1I",0,"^1J",245],["^ ","^1I",1,"^1J",250],["^ ","^1I",6,"^1J",250],["^ ","^1I",0,"^1J",253],["^ ","^1I",0,"^1J",253],["^ ","^1I",7,"^1J",253,"^E","iter__4324__auto__"]],"^2B",[["^ ","^1I",4,"^1J",220,"^E","item"],["^ ","^1I",4,"^1J",239,"^E","item"]],"^1P",[["^ ","^1I",26,"^1J",253,"^E","items-to-load"]]],"~i130",["^ ","^2>",[["^ ","^1I",176,"^1J",221],["^ ","^1I",193,"^1J",221,"^E","G__40793"],["^ ","^1I",204,"^1J",221],["^ ","^1I",0,"^1J",222],["^ ","^1I",0,"^1J",222],["^ ","^1I",152,"^1J",222,"^E","G__40793"],["^ ","^1I",215,"^1J",222,"^E","G__40793"],["^ ","^1I",166,"^1J",240],["^ ","^1I",183,"^1J",240,"^E","G__40798"],["^ ","^1I",194,"^1J",240],["^ ","^1I",0,"^1J",241],["^ ","^1I",0,"^1J",241],["^ ","^1I",152,"^1J",241,"^E","G__40798"],["^ ","^1I",215,"^1J",241,"^E","G__40798"]],"^1Z",[["^ ","^1I",8,"^1J",222,"^E","fulcro.client.impl.data-fetch/full-query"],["^ ","^1I",81,"^1J",222,"^E","fulcro.client.impl.data-fetch/full-query"],["^ ","^1I",164,"^1J",222,"^E","fulcro.client.impl.data-fetch/full-query"],["^ ","^1I",8,"^1J",241,"^E","fulcro.client.impl.data-fetch/full-query"],["^ ","^1I",81,"^1J",241,"^E","fulcro.client.impl.data-fetch/full-query"],["^ ","^1I",164,"^1J",241,"^E","fulcro.client.impl.data-fetch/full-query"]],"^3G",[["^ ","^1I",287,"^1J",221,"^E","item"],["^ ","^1I",277,"^1J",240,"^E","item"]]],"~i131",["^ ","^2>",[["^ ","^1I",107,"^1J",223,"^E","remote-name"],["^ ","^1I",107,"^1J",242,"^E","remote-name"]]],"~i132",["^ ","^2>",[["^ ","^1I",204,"^1J",223,"^E","tx-time"],["^ ","^1I",204,"^1J",242,"^E","tx-time"]]],"~i133",["^ ","^2>",[["^ ","^1I",309,"^1J",223,"^E","history-atom"],["^ ","^1I",309,"^1J",242,"^E","history-atom"]]],"~i134",["^ ","^2>",[["^ ","^1I",439,"^1J",223,"^E","ok"],["^ ","^1I",439,"^1J",242,"^E","ok"]]],"~i135",["^ ","^2>",[["^ ","^1I",559,"^1J",223,"^E","error"],["^ ","^1I",559,"^1J",242,"^E","error"]]],"~i136",["^ ","^1Z",[["^ ","^1I",782,"^1J",223,"^E","item"],["^ ","^1I",782,"^1J",242,"^E","item"]]],"~i138",["^ ","~i0",[["^ ","^1I",0,"^1J",256],["^ ","^1I",0,"^1J",256,"^E","cljs.spec.alpha/def-impl"],["^ ","^1I",25,"^1J",256],["^ ","^1I",175,"^1J",256],["^ ","^1I",190,"^1J",256],["^ ","^1I",279,"^1J",256],["^ ","^1I",332,"^1J",256],["^ ","^1I",347,"^1J",256],["^ ","^1I",432,"^1J",256],["^ ","^1I",490,"^1J",256],["^ ","^1I",571,"^1J",256],["^ ","^1I",637,"^1J",256],["^ ","^1I",757,"^1J",256],["^ ","^1I",808,"^1J",256],["^ ","^1I",943,"^1J",256],["^ ","^1I",943,"^1J",256,"^E","cljs.spec.alpha/fspec-impl"],["^ ","^1I",970,"^1J",256],["^ ","^1I",970,"^1J",256,"^E","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4"],["^ ","^1I",1026,"^1J",256],["^ ","^1I",1041,"^1J",256],["^ ","^1I",1126,"^1J",256],["^ ","^1I",1184,"^1J",256],["^ ","^1I",1265,"^1J",256],["^ ","^1I",1331,"^1J",256],["^ ","^1I",2142,"^1J",256],["^ ","^1I",2147,"^1J",256],["^ ","^1I",2153,"^1J",256],["^ ","^1I",2168,"^1J",256],["^ ","^1I",2253,"^1J",256],["^ ","^1I",2311,"^1J",256],["^ ","^1I",2392,"^1J",256],["^ ","^1I",2458,"^1J",256],["^ ","^1I",2578,"^1J",256],["^ ","^1I",2578,"^1J",256,"^E","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4"],["^ ","^1I",2634,"^1J",256],["^ ","^1I",2768,"^1J",256],["^ ","^1I",2902,"^1J",256],["^ ","^1I",2907,"^1J",256],["^ ","^1I",2913,"^1J",256],["^ ","^1I",3047,"^1J",256],["^ ","^1I",3052,"^1J",256],["^ ","^1I",3057,"^1J",256]]],"~i139",["^ ","~i8",[["^ ","^1I",1451,"^1J",256],["^ ","^1I",1451,"^1J",256,"^E","cljs.spec.alpha/cat-impl"],["^ ","^1I",1476,"^1J",256],["^ ","^1I",1559,"^1J",256],["^ ","^1I",1617,"^1J",256],["^ ","^1I",1691,"^1J",256],["^ ","^1I",1850,"^1J",256],["^ ","^1I",1933,"^1J",256],["^ ","^1I",2014,"^1J",256]],"^1V",[["^ ","^1I",1774,"^1J",256,"^E","cljs.core/keyword?"]],"^2<",[["^ ","^1I",1799,"^1J",256,"^E","fulcro.client.primitives/reconciler?"]]],"~i142",["^ ","~i0",[["^ ","^1I",0,"^1J",257],["^ ","^1I",0,"^1J",257],["^ ","^1I",42,"^1J",263],["^ ","^1I",92,"^1J",263,"^E","var_args"],["^ ","^1I",0,"^1J",264],["^ ","^1I",0,"^1J",264],["^ ","^1I",4,"^1J",264,"^E","G__40836"],["^ ","^1I",15,"^1J",264],["^ ","^1I",15,"^1J",264],["^ ","^1I",0,"^1J",265],["^ ","^1I",0,"^1J",265],["^ ","^1I",8,"^1J",265,"^E","G__40836"],["^ ","^1I",5,"^1J",266],["^ ","^1I",0,"^1J",267],["^ ","^1I",7,"^1J",267,"^E","fulcro.client.impl.data-fetch/dedupe-by"],["^ ","^1I",77,"^1J",267],["^ ","^1I",78,"^1J",267],["^ ","^1I",88,"^1J",267],["^ ","^1I",5,"^1J",270],["^ ","^1I",0,"^1J",271],["^ ","^1I",7,"^1J",271,"^E","fulcro.client.impl.data-fetch/dedupe-by"],["^ ","^1I",77,"^1J",271],["^ ","^1I",78,"^1J",271],["^ ","^1I",88,"^1J",271],["^ ","^1I",94,"^1J",271],["^ ","^1I",95,"^1J",271],["^ ","^1I",105,"^1J",271],["^ ","^1I",0,"^1J",275],["^ ","^1I",6,"^1J",275],["^ ","^1I",11,"^1J",275,"^E","js/Error"],["^ ","^1I",17,"^1J",275],["^ ","^1I",18,"^1J",275],["^ ","^1I",80,"^1J",275],["^ ","^1I",80,"^1J",275],["^ ","^1I",0,"^1J",280],["^ ","^1I",0,"^1J",280],["^ ","^1I",72,"^1J",280],["^ ","^1I",0,"^1J",281],["^ ","^1I",0,"^1J",322],["^ ","^1I",0,"^1J",322],["^ ","^1I",72,"^1J",322],["^ ","^1I",0,"^1J",323],["^ ","^1I",0,"^1J",326],["^ ","^1I",0,"^1J",326],["^ ","^1I",66,"^1J",326],["^ ","^1I",0,"^1J",328]],"~i6",[["^ ","^1I",0,"^1J",263,"^E","fulcro.client.impl.data-fetch/dedupe-by"],["^ ","^1I",0,"^1J",280,"^E","fulcro.client.impl.data-fetch/dedupe-by"],["^ ","^1I",0,"^1J",322,"^E","fulcro.client.impl.data-fetch/dedupe-by"],["^ ","^1I",0,"^1J",326,"^E","fulcro.client.impl.data-fetch/dedupe-by"]]],"~i147",["^ ","~i4",[["^ ","^1I",83,"^1J",280,"^E","keys-fn"]]],"~i148",["^ ","~i3",[["^ ","^1I",0,"^1J",281],["^ ","^1I",0,"^1J",282]],"~i8",[["^ ","^1I",18,"^1J",281,"^E","rf"]]],"~i149",["^ ","~i5",[["^ ","^1I",0,"^1J",282],["^ ","^1I",0,"^1J",283]],"~i11",[["^ ","^1I",4,"^1J",282,"^E","keys-seen"]],"^1Y",[["^ ","^1I",16,"^1J",282],["^ ","^1I",41,"^1J",282]],"^1L",[["^ ","^1I",16,"^1J",282,"^E","cljs.core/volatile!"]]],"~i150",["^ ","~i7",[["^ ","^1I",0,"^1J",283],["^ ","^1I",0,"^1J",287],["^ ","^1I",0,"^1J",290],["^ ","^1I",0,"^1J",293]]],"~i151",["^ ","^2C",[["^ ","^1I",0,"^1J",287]],"^1O",[["^ ","^1I",8,"^1J",287,"^E","rf"],["^ ","^1I",43,"^1J",287,"^E","rf"],["^ ","^1I",80,"^1J",287,"^E","rf"]]],"~i152",["^ ","^43",[["^ ","^1I",29,"^1J",289,"^E","result"]],"^1S",[["^ ","^1I",0,"^1J",290]],"^1U",[["^ ","^1I",8,"^1J",290,"^E","rf"],["^ ","^1I",43,"^1J",290,"^E","rf"],["^ ","^1I",86,"^1J",290,"^E","rf"]],"^1V",[["^ ","^1I",76,"^1J",290,"^E","result"],["^ ","^1I",99,"^1J",290,"^E","result"]]],"~i153",["^ ","^43",[["^ ","^1I",29,"^1J",292,"^E","result"],["^ ","^1I",20,"^1J",302,"^E","result"],["^ ","^1I",29,"^1J",307,"^E","result"],["^ ","^1I",29,"^1J",309,"^E","result"]],"^1Q",[["^ ","^1I",36,"^1J",292,"^E","input"],["^ ","^1I",27,"^1J",302,"^E","input"],["^ ","^1I",36,"^1J",309,"^E","input"]]],"~i154",["^ ","^2=",[["^ ","^1I",0,"^1J",293],["^ ","^1I",0,"^1J",294]],"^1K",[["^ ","^1I",4,"^1J",293,"^E","input-keys"]],"^21",[["^ ","^1I",17,"^1J",293]],"^26",[["^ ","^1I",17,"^1J",293,"^E","cljs.core/set"]],"^27",[["^ ","^1I",31,"^1J",293]],"^1X",[["^ ","^1I",32,"^1J",293,"^E","keys-fn"],["^ ","^1I",72,"^1J",293,"^E","keys-fn"],["^ ","^1I",119,"^1J",293,"^E","keys-fn"]],"~i41",[["^ ","^1I",110,"^1J",293,"^E","input"],["^ ","^1I",137,"^1J",293,"^E","input"]]],"~i156",["^ ","^2B",[["^ ","^1I",0,"^1J",294]],"^1K",[["^ ","^1I",3,"^1J",294]],"^1P",[["^ ","^1I",3,"^1J",294,"^E","cljs.core/empty?"]],"^1W",[["^ ","^1I",26,"^1J",294],["^ ","^1I",81,"^1J",294],["^ ","^1I",81,"^1J",294,"^E","cljs.core/deref"]],"^1T",[["^ ","^1I",26,"^1J",294,"^E","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2"]],"^3B",[["^ ","^1I",97,"^1J",294,"^E","keys-seen"]],"^3P",[["^ ","^1I",108,"^1J",294,"^E","input-keys"]]],"~i157",["^ ","^1O",[["^ ","^1I",0,"^1J",295]],"^1Q",[["^ ","^1I",0,"^1J",295],["^ ","^1I",0,"^1J",295,"^E","cljs.core/-vreset!"],["^ ","^1I",34,"^1J",295],["^ ","^1I",82,"^1J",295],["^ ","^1I",82,"^1J",295,"^E","cljs.core/-deref"]],"^1R",[["^ ","^1I",24,"^1J",295,"^E","keys-seen"],["^ ","^1I",99,"^1J",295,"^E","keys-seen"]],"^2:",[["^ ","^1I",34,"^1J",295,"^E","clojure.set.union.cljs$core$IFn$_invoke$arity$2"]],"^22",[["^ ","^1I",110,"^1J",295,"^E","input-keys"]]],"~i158",["^ ","^1Q",[["^ ","^1I",0,"^1J",297]],"^1S",[["^ ","^1I",8,"^1J",297,"^E","rf"],["^ ","^1I",43,"^1J",297,"^E","rf"],["^ ","^1I",92,"^1J",297,"^E","rf"]],"^1L",[["^ ","^1I",76,"^1J",297,"^E","result"],["^ ","^1I",105,"^1J",297,"^E","result"]],"^2>",[["^ ","^1I",83,"^1J",297,"^E","input"],["^ ","^1I",112,"^1J",297,"^E","input"]]],"~i159",["^ ","^1O",[["^ ","^1I",0,"^1J",299,"^E","result"]]],"~i160",["^ ","~i4",[["^ ","^1I",83,"^1J",322,"^E","keys-fn"]],"^2B",[["^ ","^1I",91,"^1J",322,"^E","coll"]],"^1Q",[["^ ","^1I",0,"^1J",323]],"^1S",[["^ ","^1I",7,"^1J",323,"^E","cljs.core.sequence.cljs$core$IFn$_invoke$arity$2"]],"^26",[["^ ","^1I",56,"^1J",323]],"^2>",[["^ ","^1I",56,"^1J",323,"^E","fulcro.client.impl.data_fetch.dedupe_by.cljs$core$IFn$_invoke$arity$1"]],"^2?",[["^ ","^1I",126,"^1J",323,"^E","keys-fn"]],"^2@",[["^ ","^1I",135,"^1J",323,"^E","coll"]]],"~i162",["^ ","~i0",[["^ ","^1I",0,"^1J",328],["^ ","^1I",58,"^1J",346],["^ ","^1I",0,"^1J",347]],"~i6",[["^ ","^1I",0,"^1J",346,"^E","fulcro.client.impl.data-fetch/split-items-ready-to-load"]]],"~i179",["^ ","~i3",[["^ ","^1I",124,"^1J",346,"^E","items-ready-to-load"]]],"~i180",["^ ","~i2",[["^ ","^1I",0,"^1J",347],["^ ","^1I",4,"^1J",382,"^E","map__40845"],["^ ","^1I",4,"^1J",396,"^E","map__40845"],["^ ","^1I",21,"^1J",396],["^ ","^1I",23,"^1J",396],["^ ","^1I",25,"^1J",396],["^ ","^1I",27,"^1J",396],["^ ","^1I",28,"^1J",396,"^E","map__40845"],["^ ","^1I",42,"^1J",396],["^ ","^1I",50,"^1J",396],["^ ","^1I",52,"^1J",396],["^ ","^1I",54,"^1J",396],["^ ","^1I",55,"^1J",396],["^ ","^1I",55,"^1J",396,"^E","map__40845"],["^ ","^1I",104,"^1J",396],["^ ","^1I",115,"^1J",396],["^ ","^1I",116,"^1J",396,"^E","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1I",148,"^1J",396],["^ ","^1I",148,"^1J",396,"^E","map__40845"],["^ ","^1I",179,"^1J",396],["^ ","^1I",184,"^1J",396],["^ ","^1I",191,"^1J",396],["^ ","^1I",199,"^1J",396],["^ ","^1I",199,"^1J",396,"^E","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",245,"^1J",396,"^E","cljs.core/hash-map"],["^ ","^1I",264,"^1J",396,"^E","map__40845"],["^ ","^1I",276,"^1J",396,"^E","map__40845"],["^ ","^1I",24,"^1J",397],["^ ","^1I",24,"^1J",397,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",68,"^1J",397,"^E","map__40845"],["^ ","^1I",83,"^1J",397],["^ ","^1I",0,"^1J",399],["^ ","^1I",0,"^1J",399]],"~i8",[["^ ","^1I",4,"^1J",347,"^E","item-keys"]],"^21",[["^ ","^1I",16,"^1J",347],["^ ","^1I",0,"^1J",348]],"^27",[["^ ","^1I",27,"^1J",347,"^E","item"]]],"~i181",["^ ","^2>",[["^ ","^1I",0,"^1J",348]],"^28",[["^ ","^1I",263,"^1J",348]],"^29",[["^ ","^1I",264,"^1J",348,"^E","fulcro.client.impl.data-fetch/data-query"],["^ ","^1I",337,"^1J",348,"^E","fulcro.client.impl.data-fetch/data-query"],["^ ","^1I",416,"^1J",348,"^E","fulcro.client.impl.data-fetch/data-query"]],"^22",[["^ ","^1I",408,"^1J",348,"^E","item"],["^ ","^1I",467,"^1J",348,"^E","item"]]],"~i182",["^ ","^1[",[["^ ","^1I",224,"^1J",348,"^E","fulcro.client.primitives/query->ast"]]],"~i184",["^ ","^1[",[["^ ","^1I",21,"^1J",348],["^ ","^1I",65,"^1J",348],["^ ","^1I",133,"^1J",348],["^ ","^1I",133,"^1J",348],["^ ","^1I",224,"^1J",348]],"^27",[["^ ","^1I",21,"^1J",348,"^E","cljs.core.map.cljs$core$IFn$_invoke$arity$2"]]],"~i185",["^ ","^1[",[["^ ","^1I",7,"^1J",348,"^E","cljs.core/set"]]],"~i186",["^ ","~i8",[["^ ","^1I",4,"^1J",350,"^E","abort-id-conflict?"]],"^21",[["^ ","^1I",31,"^1J",350],["^ ","^1I",0,"^1J",352]],"^27",[["^ ","^1I",18,"^1J",351,"^E","items-going?"]],"^3=",[["^ ","^1I",37,"^1J",351,"^E","active-abort-id"]],"^23",[["^ ","^1I",53,"^1J",351,"^E","abort-id"]]],"~i187",["^ ","^2>",[["^ ","^1I",0,"^1J",352],["^ ","^1I",4,"^1J",352,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",353],["^ ","^1I",0,"^1J",353],["^ ","^1I",20,"^1J",353,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",354],["^ ","^1I",4,"^1J",354,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",361],["^ ","^1I",0,"^1J",361],["^ ","^1I",20,"^1J",361,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",364,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",367,"^E","and__3938__auto__"]],"^28",[["^ ","^1I",24,"^1J",352,"^E","items-going?"]],"^3E",[["^ ","^1I",28,"^1J",354],["^ ","^1I",45,"^1J",354,"^E","or__3949__auto__"],["^ ","^1I",0,"^1J",355],["^ ","^1I",0,"^1J",355],["^ ","^1I",20,"^1J",355,"^E","or__3949__auto__"],["^ ","^1I",0,"^1J",356,"^E","or__3949__auto__"]],"^2X",[["^ ","^1I",64,"^1J",354,"^E","abort-id"]],"^2I",[["^ ","^1I",0,"^1J",358,"^E","active-abort-id"]],"^2U",[["^ ","^1I",0,"^1J",362]],"^2V",[["^ ","^1I",7,"^1J",362,"^E","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2"]],"^2Z",[["^ ","^1I",55,"^1J",362,"^E","active-abort-id"]],"~i99",[["^ ","^1I",71,"^1J",362,"^E","abort-id"]]],"~i188",["^ ","~i8",[["^ ","^1I",4,"^1J",371,"^E","can-go-now?"]],"^21",[["^ ","^1I",24,"^1J",371],["^ ","^1I",18,"^1J",372,"^E","p__40847"],["^ ","^1I",0,"^1J",373],["^ ","^1I",0,"^1J",373],["^ ","^1I",4,"^1J",373,"^E","map__40848"],["^ ","^1I",17,"^1J",373,"^E","p__40847"],["^ ","^1I",4,"^1J",374,"^E","map__40848"],["^ ","^1I",21,"^1J",374],["^ ","^1I",23,"^1J",374],["^ ","^1I",25,"^1J",374],["^ ","^1I",27,"^1J",374],["^ ","^1I",28,"^1J",374,"^E","map__40848"],["^ ","^1I",42,"^1J",374],["^ ","^1I",50,"^1J",374],["^ ","^1I",52,"^1J",374],["^ ","^1I",54,"^1J",374],["^ ","^1I",55,"^1J",374],["^ ","^1I",55,"^1J",374,"^E","map__40848"],["^ ","^1I",104,"^1J",374],["^ ","^1I",115,"^1J",374],["^ ","^1I",116,"^1J",374,"^E","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1I",148,"^1J",374],["^ ","^1I",148,"^1J",374,"^E","map__40848"],["^ ","^1I",179,"^1J",374],["^ ","^1I",184,"^1J",374],["^ ","^1I",191,"^1J",374],["^ ","^1I",199,"^1J",374],["^ ","^1I",199,"^1J",374,"^E","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",245,"^1J",374,"^E","cljs.core/hash-map"],["^ ","^1I",264,"^1J",374,"^E","map__40848"],["^ ","^1I",276,"^1J",374,"^E","map__40848"],["^ ","^1I",12,"^1J",375],["^ ","^1I",12,"^1J",375,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",56,"^1J",375,"^E","map__40848"],["^ ","^1I",71,"^1J",375],["^ ","^1I",19,"^1J",376],["^ ","^1I",19,"^1J",376,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",63,"^1J",376,"^E","map__40848"],["^ ","^1I",78,"^1J",376],["^ ","^1I",23,"^1J",377],["^ ","^1I",23,"^1J",377,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",67,"^1J",377,"^E","map__40848"],["^ ","^1I",82,"^1J",377],["^ ","^1I",0,"^1J",378]],"^20",[["^ ","^1I",4,"^1J",375,"^E","items"]],"^22",[["^ ","^1I",4,"^1J",376,"^E","current-keys"]],"^31",[["^ ","^1I",4,"^1J",377,"^E","current-abort-id"]],"^2V",[["^ ","^1I",27,"^1J",372,"^E","item"]]],"~i189",["^ ","^2>",[["^ ","^1I",0,"^1J",378],["^ ","^1I",0,"^1J",379]],"^29",[["^ ","^1I",4,"^1J",378,"^E","abort-id"]],"^2<",[["^ ","^1I",15,"^1J",378],["^ ","^1I",15,"^1J",378]],"^2U",[["^ ","^1I",146,"^1J",378,"^E","item"]]],"~i190",["^ ","^1[",[["^ ","^1I",0,"^1J",379]]],"~i191",["^ ","^1X",[["^ ","^1I",9,"^1J",379]],"^28",[["^ ","^1I",9,"^1J",379,"^E","cljs.core/not"]],"^2;",[["^ ","^1I",23,"^1J",379]],"^2?",[["^ ","^1I",23,"^1J",379,"^E","abort-id-conflict?"]],"^2H",[["^ ","^1I",48,"^1J",379]],"^31",[["^ ","^1I",48,"^1J",379,"^E","cljs.core/seq"]],"^2K",[["^ ","^1I",62,"^1J",379,"^E","items"]],"^2O",[["^ ","^1I",69,"^1J",379,"^E","current-abort-id"]],"^32",[["^ ","^1I",86,"^1J",379,"^E","abort-id"]]],"~i192",["^ ","^1X",[["^ ","^1I",102,"^1J",379]],"^28",[["^ ","^1I",102,"^1J",379,"^E","cljs.core/empty?"]],"^49",[["^ ","^1I",125,"^1J",379]],"^3G",[["^ ","^1I",125,"^1J",379,"^E","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2"]],"^31",[["^ ","^1I",180,"^1J",379,"^E","current-keys"]],"^24",[["^ ","^1I",193,"^1J",379]],"^2Q",[["^ ","^1I",193,"^1J",379,"^E","item-keys"]],"^2Z",[["^ ","^1I",203,"^1J",379,"^E","item"]]],"~i193",["^ ","~i9",[["^ ","^1I",4,"^1J",397,"^E","items-to-load-now"]],"^29",[["^ ","^1I",17,"^1J",382],["^ ","^1I",1,"^1J",395],["^ ","^1I",44,"^1J",395],["^ ","^1I",113,"^1J",395],["^ ","^1I",147,"^1J",395],["^ ","^1I",225,"^1J",395],["^ ","^1I",230,"^1J",395],["^ ","^1I",285,"^1J",395]],"^2:",[["^ ","^1I",17,"^1J",382,"^E","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]]],"~i194",["^ ","^1M",[["^ ","^1I",64,"^1J",382],["^ ","^1I",0,"^1J",384]],"^3G",[["^ ","^1I",18,"^1J",383,"^E","acc"]],"^22",[["^ ","^1I",22,"^1J",383,"^E","item"]]],"~i195",["^ ","^2?",[["^ ","^1I",0,"^1J",384]],"^3B",[["^ ","^1I",20,"^1J",384]],"^2<",[["^ ","^1I",20,"^1J",384,"^E","can-go-now?"]],"~i56",[["^ ","^1I",38,"^1J",384,"^E","acc"]],"^2I",[["^ ","^1I",42,"^1J",384,"^E","item"]]],"~i196",["^ ","^49",[["^ ","^1I",0,"^1J",385],["^ ","^1I",4,"^1J",385,"^E","G__40855"],["^ ","^1I",4,"^1J",386,"^E","G__40855"],["^ ","^1I",19,"^1J",386],["^ ","^1I",446,"^1J",386,"^E","G__40855"],["^ ","^1I",4,"^1J",387,"^E","G__40855"],["^ ","^1I",19,"^1J",387],["^ ","^1I",0,"^1J",389],["^ ","^1I",0,"^1J",389]],"^1N",[["^ ","^1I",15,"^1J",385,"^E","acc"]]],"~i197",["^ ","^3B",[["^ ","^1I",37,"^1J",386],["^ ","^1I",37,"^1J",386]],"^2T",[["^ ","^1I",168,"^1J",386,"^E","item"]],"~i82",[["^ ","^1I",175,"^1J",386],["^ ","^1I",221,"^1J",386,"^E","G__40855"],["^ ","^1I",230,"^1J",386]],"^2Z",[["^ ","^1I",175,"^1J",386,"^E","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3"]],"~i107",[["^ ","^1I",308,"^1J",386],["^ ","^1I",308,"^1J",386]],"~i140",[["^ ","^1I",439,"^1J",386,"^E","item"]]],"~i198",["^ ","^2X",[["^ ","^1I",19,"^1J",387],["^ ","^1I",66,"^1J",387,"^E","G__40855"],["^ ","^1I",79,"^1J",387]],"^2D",[["^ ","^1I",19,"^1J",387,"^E","cljs.core.update.cljs$core$IFn$_invoke$arity$4"]],"^2Q",[["^ ","^1I",148,"^1J",387,"^E","clojure.set/union"]],"^2Z",[["^ ","^1I",166,"^1J",387]],"^25",[["^ ","^1I",166,"^1J",387,"^E","item-keys"]],"^37",[["^ ","^1I",176,"^1J",387,"^E","item"]]],"~i199",["^ ","^2X",[["^ ","^1I",0,"^1J",389],["^ ","^1I",54,"^1J",389,"^E","G__40855"],["^ ","^1I",67,"^1J",389]],"^2D",[["^ ","^1I",7,"^1J",389,"^E","cljs.core.update.cljs$core$IFn$_invoke$arity$4"]],"^3@",[["^ ","^1I",122,"^1J",389,"^E","cljs.core/conj"]],"^2P",[["^ ","^1I",137,"^1J",389,"^E","item"]]],"~i200",["^ ","^49",[["^ ","^1I",0,"^1J",392]],"^3G",[["^ ","^1I",7,"^1J",392,"^E","cljs.core/reduced"]],"^2A",[["^ ","^1I",25,"^1J",392,"^E","acc"]]],"~i202",["^ ","^1M",[["^ ","^1I",326,"^1J",395,"^E","items-ready-to-load"]]],"~i203",["^ ","~i8",[["^ ","^1I",4,"^1J",398,"^E","items-to-defer"]],"^21",[["^ ","^1I",21,"^1J",398]],"^27",[["^ ","^1I",115,"^1J",398,"^E","items-ready-to-load"]],"^2D",[["^ ","^1I",35,"^1J",398]],"^3P",[["^ ","^1I",35,"^1J",398,"^E","cljs.core.drop.cljs$core$IFn$_invoke$arity$2"]],"^2H",[["^ ","^1I",80,"^1J",398]],"^31",[["^ ","^1I",80,"^1J",398,"^E","cljs.core/count"]],"^2M",[["^ ","^1I",96,"^1J",398,"^E","items-to-load-now"]],"^2[",[["^ ","^1I",21,"^1J",398,"^E","cljs.core/vec"]]],"~i204",["^ ","~i5",[["^ ","^1I",90,"^1J",399,"^E","items-to-load-now"]],"^1V",[["^ ","^1I",108,"^1J",399,"^E","items-to-defer"]]],"~i206",["^ ","~i0",[["^ ","^1I",0,"^1J",401],["^ ","^1I",45,"^1J",415],["^ ","^1I",0,"^1J",416]],"~i6",[["^ ","^1I",0,"^1J",415,"^E","fulcro.client.impl.data-fetch/mark-loading"]]],"~i219",["^ ","~i3",[["^ ","^1I",98,"^1J",415,"^E","remote"]],"^2=",[["^ ","^1I",105,"^1J",415,"^E","reconciler"]]],"~i220",["^ ","~i2",[["^ ","^1I",0,"^1J",416],["^ ","^1I",4,"^1J",426,"^E","vec__40868"],["^ ","^1I",24,"^1J",427],["^ ","^1I",24,"^1J",427,"^E","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^1I",68,"^1J",427,"^E","vec__40868"],["^ ","^1I",79,"^1J",427],["^ ","^1I",83,"^1J",427],["^ ","^1I",21,"^1J",428],["^ ","^1I",21,"^1J",428,"^E","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^1I",65,"^1J",428,"^E","vec__40868"],["^ ","^1I",76,"^1J",428],["^ ","^1I",80,"^1J",428],["^ ","^1I",0,"^1J",432]],"~i8",[["^ ","^1I",4,"^1J",416,"^E","state"]],"^27",[["^ ","^1I",12,"^1J",416]],"^1X",[["^ ","^1I",12,"^1J",416,"^E","fulcro.client.primitives/app-state"]],"^2@",[["^ ","^1I",47,"^1J",416,"^E","reconciler"]]],"~i221",["^ ","~i8",[["^ ","^1I",4,"^1J",417,"^E","is-eligible?"]],"^27",[["^ ","^1I",25,"^1J",417],["^ ","^1I",0,"^1J",419]],"^1M",[["^ ","^1I",18,"^1J",418,"^E","item"]],"^3B",[["^ ","^1I",0,"^1J",419]],"^2<",[["^ ","^1I",7,"^1J",419,"^E","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^22",[["^ ","^1I",52,"^1J",419,"^E","remote"]],"^3P",[["^ ","^1I",59,"^1J",419]],"^2E",[["^ ","^1I",60,"^1J",419,"^E","fulcro.client.impl.data-fetch/data-remote"],["^ ","^1I",134,"^1J",419,"^E","fulcro.client.impl.data-fetch/data-remote"],["^ ","^1I",214,"^1J",419,"^E","fulcro.client.impl.data-fetch/data-remote"]],"^3@",[["^ ","^1I",206,"^1J",419,"^E","item"],["^ ","^1I",266,"^1J",419,"^E","item"]]],"~i222",["^ ","~i8",[["^ ","^1I",4,"^1J",422,"^E","all-items"]],"^27",[["^ ","^1I",16,"^1J",422],["^ ","^1I",60,"^1J",422],["^ ","^1I",60,"^1J",422,"^E","cljs.core/deref"],["^ ","^1I",83,"^1J",422]],"^1X",[["^ ","^1I",16,"^1J",422,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"]],"^2;",[["^ ","^1I",76,"^1J",422,"^E","state"]]],"~i223",["^ ","~i8",[["^ ","^1I",4,"^1J",423,"^E","items-ready-to-load"]],"^27",[["^ ","^1I",26,"^1J",423]],"^1X",[["^ ","^1I",26,"^1J",423,"^E","cljs.core.filter.cljs$core$IFn$_invoke$arity$2"]],"^20",[["^ ","^1I",73,"^1J",423,"^E","is-eligible?"]],"^3P",[["^ ","^1I",92,"^1J",423,"^E","all-items"]]],"~i224",["^ ","~i8",[["^ ","^1I",4,"^1J",424,"^E","items-for-other-remotes"]],"^27",[["^ ","^1I",30,"^1J",424]],"^1X",[["^ ","^1I",30,"^1J",424,"^E","cljs.core.filter.cljs$core$IFn$_invoke$arity$2"]],"^20",[["^ ","^1I",77,"^1J",424]],"^49",[["^ ","^1I",77,"^1J",424,"^E","cljs.core.comp.cljs$core$IFn$_invoke$arity$2"]],"^22",[["^ ","^1I",122,"^1J",424,"^E","cljs.core/not"]],"^2A",[["^ ","^1I",136,"^1J",424,"^E","is-eligible?"]],"^2L",[["^ ","^1I",156,"^1J",424,"^E","all-items"]]],"~i225",["^ ","~i8",[["^ ","^1I",4,"^1J",425,"^E","other-items-loading?"]],"^27",[["^ ","^1I",33,"^1J",425]],"^1X",[["^ ","^1I",33,"^1J",425,"^E","cljs.core/boolean"]],"^49",[["^ ","^1I",52,"^1J",425]],"^3G",[["^ ","^1I",52,"^1J",425,"^E","cljs.core/seq"]],"^22",[["^ ","^1I",66,"^1J",425],["^ ","^1I",110,"^1J",425],["^ ","^1I",110,"^1J",425,"^E","cljs.core/deref"],["^ ","^1I",133,"^1J",425]],"^3E",[["^ ","^1I",66,"^1J",425,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"]],"^2D",[["^ ","^1I",126,"^1J",425,"^E","state"]]],"~i226",["^ ","~i9",[["^ ","^1I",4,"^1J",427,"^E","items-to-load-now"]],"^21",[["^ ","^1I",4,"^1J",428,"^E","items-to-defer"]],"^3B",[["^ ","^1I",17,"^1J",426]],"^2<",[["^ ","^1I",17,"^1J",426,"^E","fulcro.client.impl.data-fetch/split-items-ready-to-load"]],"^2O",[["^ ","^1I",73,"^1J",426,"^E","items-ready-to-load"]]],"~i227",["^ ","~i8",[["^ ","^1I",4,"^1J",429,"^E","remaining-items"]],"^27",[["^ ","^1I",22,"^1J",429]],"^1X",[["^ ","^1I",22,"^1J",429,"^E","cljs.core.concat.cljs$core$IFn$_invoke$arity$2"]],"^20",[["^ ","^1I",69,"^1J",429,"^E","items-for-other-remotes"]],"^2L",[["^ ","^1I",93,"^1J",429,"^E","items-to-defer"]]],"~i228",["^ ","~i8",[["^ ","^1I",4,"^1J",430,"^E","loading?"]],"^27",[["^ ","^1I",21,"^1J",430]],"^2:",[["^ ","^1I",23,"^1J",430]],"^1M",[["^ ","^1I",23,"^1J",430,"^E","cljs.core/boolean"]],"^3=",[["^ ","^1I",42,"^1J",430]],"^22",[["^ ","^1I",42,"^1J",430,"^E","cljs.core/seq"]],"^2A",[["^ ","^1I",56,"^1J",430,"^E","items-to-load-now"]],"^2O",[["^ ","^1I",81,"^1J",430,"^E","other-items-loading?"]]],"~i230",["^ ","~i8",[["^ ","^1I",4,"^1J",431,"^E","tx-time"]],"^27",[["^ ","^1I",14,"^1J",431]],"^1X",[["^ ","^1I",14,"^1J",431,"^E","fulcro.client.impl.data-fetch/earliest-load-time"]],"^2D",[["^ ","^1I",63,"^1J",431,"^E","all-items"]]],"~i231",["^ ","~i4",[["^ ","^1I",0,"^1J",432],["^ ","^1I",0,"^1J",433],["^ ","^1I",0,"^1J",435],["^ ","^1I",0,"^1J",441],["^ ","^1I",50,"^1J",441],["^ ","^1I",388,"^1J",441],["^ ","^1I",534,"^1J",441],["^ ","^1I",643,"^1J",441],["^ ","^1I",736,"^1J",441],["^ ","^1I",1091,"^1J",441],["^ ","^1I",1443,"^1J",441],["^ ","^1I",1726,"^1J",441]],"^1O",[["^ ","^1I",3,"^1J",432]],"^1H",[["^ ","^1I",3,"^1J",432,"^E","cljs.core/empty?"]],"^1L",[["^ ","^1I",26,"^1J",432,"^E","items-to-load-now"]]],"~i232",["^ ","~i6",[["^ ","^1I",0,"^1J",435]],"~i7",[["^ ","^1I",0,"^1J",435,"^E","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2"]],"^2C",[["^ ","^1I",51,"^1J",435,"^E","state"]],"^1S",[["^ ","^1I",57,"^1J",435],["^ ","^1I",0,"^1J",437]],"^1W",[["^ ","^1I",18,"^1J",436,"^E","s"]]],"~i233",["^ ","^1T",[["^ ","^1I",109,"^1J",437,"^E","s"]]],"~i234",["^ ","^1V",[["^ ","^1I",60,"^1J",437]],"^1W",[["^ ","^1I",60,"^1J",437,"^E","fulcro.client.impl.data-fetch/place-load-markers"]],"^3B",[["^ ","^1I",111,"^1J",437,"^E","items-to-load-now"]]],"~i235",["^ ","^1V",[["^ ","^1I",0,"^1J",437],["^ ","^1I",130,"^1J",437],["^ ","^1I",268,"^1J",437]],"^1W",[["^ ","^1I",7,"^1J",437,"^E","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic"]],"^3E",[["^ ","^1I",203,"^1J",437,"^E","loading?"]],"^2V",[["^ ","^1I",349,"^1J",437,"^E","remaining-items"]]],"~i236",["^ ","^2?",[["^ ","^1I",151,"^1J",441]],"^20",[["^ ","^1I",152,"^1J",441,"^E","fulcro.client.impl.data-fetch/full-query"],["^ ","^1I",225,"^1J",441,"^E","fulcro.client.impl.data-fetch/full-query"],["^ ","^1I",317,"^1J",441,"^E","fulcro.client.impl.data-fetch/full-query"]],"^2X",[["^ ","^1I",296,"^1J",441,"^E","items-to-load-now"],["^ ","^1I",368,"^1J",441,"^E","items-to-load-now"]]],"~i237",["^ ","^2?",[["^ ","^1I",485,"^1J",441]],"^20",[["^ ","^1I",485,"^1J",441,"^E","fulcro.client.primitives/get-history"]],"^2G",[["^ ","^1I",522,"^1J",441,"^E","reconciler"]]],"~i238",["^ ","^2?",[["^ ","^1I",636,"^1J",441,"^E","remote"]]],"~i239",["^ ","^2?",[["^ ","^1I",728,"^1J",441,"^E","tx-time"]]],"~i240",["^ ","^2?",[["^ ","^1I",853,"^1J",441]],"^20",[["^ ","^1I",854,"^1J",441,"^E","fulcro.client.impl.data-fetch/loaded-callback"],["^ ","^1I",932,"^1J",441,"^E","fulcro.client.impl.data-fetch/loaded-callback"],["^ ","^1I",1022,"^1J",441,"^E","fulcro.client.impl.data-fetch/loaded-callback"]],"^4Q",[["^ ","^1I",1008,"^1J",441,"^E","reconciler"],["^ ","^1I",1078,"^1J",441,"^E","reconciler"]]],"~i241",["^ ","^2?",[["^ ","^1I",1208,"^1J",441]],"^20",[["^ ","^1I",1209,"^1J",441,"^E","fulcro.client.impl.data-fetch/error-callback"],["^ ","^1I",1286,"^1J",441,"^E","fulcro.client.impl.data-fetch/error-callback"],["^ ","^1I",1375,"^1J",441,"^E","fulcro.client.impl.data-fetch/error-callback"]],"^2F",[["^ ","^1I",1361,"^1J",441,"^E","reconciler"],["^ ","^1I",1430,"^1J",441,"^E","reconciler"]]],"~i242",["^ ","^2?",[["^ ","^1I",1544,"^1J",441]],"^20",[["^ ","^1I",1544,"^1J",441,"^E","cljs.core/first"]],"^22",[["^ ","^1I",1560,"^1J",441],["^ ","^1I",1605,"^1J",441]],"^3E",[["^ ","^1I",1560,"^1J",441,"^E","cljs.core.keep.cljs$core$IFn$_invoke$arity$2"]],"^25",[["^ ","^1I",1706,"^1J",441,"^E","items-to-load-now"]]],"~i243",["^ ","^2?",[["^ ","^1I",1860,"^1J",441,"^E","items-to-load-now"]]],"~i245",["^ ","~i0",[["^ ","^1I",0,"^1J",444],["^ ","^1I",0,"^1J",444,"^E","cljs.spec.alpha/def-impl"],["^ ","^1I",25,"^1J",444],["^ ","^1I",155,"^1J",444],["^ ","^1I",170,"^1J",444],["^ ","^1I",259,"^1J",444],["^ ","^1I",312,"^1J",444],["^ ","^1I",327,"^1J",444],["^ ","^1I",412,"^1J",444],["^ ","^1I",470,"^1J",444],["^ ","^1I",551,"^1J",444],["^ ","^1I",617,"^1J",444],["^ ","^1I",737,"^1J",444],["^ ","^1I",788,"^1J",444],["^ ","^1I",905,"^1J",444],["^ ","^1I",905,"^1J",444,"^E","cljs.spec.alpha/fspec-impl"],["^ ","^1I",932,"^1J",444],["^ ","^1I",932,"^1J",444,"^E","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4"],["^ ","^1I",988,"^1J",444],["^ ","^1I",1003,"^1J",444],["^ ","^1I",1088,"^1J",444],["^ ","^1I",1146,"^1J",444],["^ ","^1I",1227,"^1J",444],["^ ","^1I",1293,"^1J",444],["^ ","^1I",2104,"^1J",444],["^ ","^1I",2109,"^1J",444],["^ ","^1I",2115,"^1J",444],["^ ","^1I",2130,"^1J",444],["^ ","^1I",2215,"^1J",444],["^ ","^1I",2273,"^1J",444],["^ ","^1I",2354,"^1J",444],["^ ","^1I",2420,"^1J",444],["^ ","^1I",2540,"^1J",444],["^ ","^1I",2540,"^1J",444,"^E","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4"],["^ ","^1I",2596,"^1J",444],["^ ","^1I",2712,"^1J",444],["^ ","^1I",2828,"^1J",444],["^ ","^1I",2833,"^1J",444],["^ ","^1I",2839,"^1J",444],["^ ","^1I",2955,"^1J",444],["^ ","^1I",2960,"^1J",444],["^ ","^1I",2965,"^1J",444]]],"~i246",["^ ","~i8",[["^ ","^1I",1413,"^1J",444],["^ ","^1I",1413,"^1J",444,"^E","cljs.spec.alpha/cat-impl"],["^ ","^1I",1438,"^1J",444],["^ ","^1I",1521,"^1J",444],["^ ","^1I",1579,"^1J",444],["^ ","^1I",1653,"^1J",444],["^ ","^1I",1812,"^1J",444],["^ ","^1I",1895,"^1J",444],["^ ","^1I",1976,"^1J",444]],"^1V",[["^ ","^1I",1736,"^1J",444,"^E","cljs.core/keyword?"]],"^2<",[["^ ","^1I",1761,"^1J",444,"^E","fulcro.client.primitives/reconciler?"]]],"~i255",["^ ","~i0",[["^ ","^1I",0,"^1J",445],["^ ","^1I",44,"^1J",445],["^ ","^1I",125,"^1J",445],["^ ","^1I",185,"^1J",445],["^ ","^1I",249,"^1J",445]],"~i5",[["^ ","^1I",0,"^1J",445,"^E","fulcro.client.impl.data-fetch/valid-types"]]],"~i257",["^ ","~i0",[["^ ","^1I",0,"^1J",446],["^ ","^1I",0,"^1J",446],["^ ","^1I",48,"^1J",450],["^ ","^1I",104,"^1J",450,"^E","var_args"],["^ ","^1I",0,"^1J",451],["^ ","^1I",0,"^1J",451],["^ ","^1I",4,"^1J",451,"^E","G__40894"],["^ ","^1I",15,"^1J",451],["^ ","^1I",15,"^1J",451],["^ ","^1I",0,"^1J",452],["^ ","^1I",0,"^1J",452],["^ ","^1I",8,"^1J",452,"^E","G__40894"],["^ ","^1I",5,"^1J",453],["^ ","^1I",0,"^1J",454],["^ ","^1I",7,"^1J",454,"^E","fulcro.client.impl.data-fetch/make-data-state"],["^ ","^1I",83,"^1J",454],["^ ","^1I",84,"^1J",454],["^ ","^1I",94,"^1J",454],["^ ","^1I",5,"^1J",457],["^ ","^1I",0,"^1J",458],["^ ","^1I",7,"^1J",458,"^E","fulcro.client.impl.data-fetch/make-data-state"],["^ ","^1I",83,"^1J",458],["^ ","^1I",84,"^1J",458],["^ ","^1I",94,"^1J",458],["^ ","^1I",100,"^1J",458],["^ ","^1I",101,"^1J",458],["^ ","^1I",111,"^1J",458],["^ ","^1I",0,"^1J",462],["^ ","^1I",6,"^1J",462],["^ ","^1I",11,"^1J",462,"^E","js/Error"],["^ ","^1I",17,"^1J",462],["^ ","^1I",18,"^1J",462],["^ ","^1I",80,"^1J",462],["^ ","^1I",80,"^1J",462],["^ ","^1I",0,"^1J",467],["^ ","^1I",0,"^1J",467],["^ ","^1I",78,"^1J",467],["^ ","^1I",0,"^1J",468],["^ ","^1I",0,"^1J",471],["^ ","^1I",0,"^1J",471],["^ ","^1I",78,"^1J",471],["^ ","^1I",0,"^1J",472],["^ ","^1I",0,"^1J",479],["^ ","^1I",0,"^1J",479],["^ ","^1I",72,"^1J",479],["^ ","^1I",0,"^1J",481]],"~i6",[["^ ","^1I",0,"^1J",450,"^E","fulcro.client.impl.data-fetch/make-data-state"],["^ ","^1I",0,"^1J",467,"^E","fulcro.client.impl.data-fetch/make-data-state"],["^ ","^1I",0,"^1J",471,"^E","fulcro.client.impl.data-fetch/make-data-state"],["^ ","^1I",0,"^1J",479,"^E","fulcro.client.impl.data-fetch/make-data-state"]]],"~i260",["^ ","~i4",[["^ ","^1I",89,"^1J",467,"^E","type"]]],"~i261",["^ ","~i3",[["^ ","^1I",0,"^1J",468],["^ ","^1I",88,"^1J",468]],"~i4",[["^ ","^1I",7,"^1J",468,"^E","fulcro.client.impl.data_fetch.make_data_state.cljs$core$IFn$_invoke$arity$2"]],"^1U",[["^ ","^1I",83,"^1J",468,"^E","type"]]],"~i263",["^ ","~i4",[["^ ","^1I",89,"^1J",471,"^E","type"]],"~i9",[["^ ","^1I",94,"^1J",471,"^E","params"]]],"~i264",["^ ","~i3",[["^ ","^1I",0,"^1J",472],["^ ","^1I",0,"^1J",473],["^ ","^1I",50,"^1J",473],["^ ","^1I",164,"^1J",473]],"~i7",[["^ ","^1I",20,"^1J",472]],"~i8",[["^ ","^1I",20,"^1J",472,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"]],"^2B",[["^ ","^1I",64,"^1J",472,"^E","fulcro.client.impl.data-fetch/valid-types"]],"^1W",[["^ ","^1I",106,"^1J",472,"^E","type"]]],"~i265",["^ ","^2C",[["^ ","^1I",159,"^1J",473,"^E","type"]],"^21",[["^ ","^1I",278,"^1J",473,"^E","params"]]],"~i266",["^ ","~i5",[["^ ","^1I",0,"^1J",475]],"^2B",[["^ ","^1I",6,"^1J",475],["^ ","^1I",143,"^1J",475]],"^2C",[["^ ","^1I",6,"^1J",475,"^E","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2"]],"^1Y",[["^ ","^1I",54,"^1J",475],["^ ","^1I",55,"^1J",475]],"^2E",[["^ ","^1I",127,"^1J",475,"^E","type"]]],"~i272",["^ ","~i0",[["^ ","^1I",0,"^1J",481],["^ ","^1I",48,"^1J",484],["^ ","^1I",104,"^1J",484,"^E","p__40901"],["^ ","^1I",0,"^1J",485],["^ ","^1I",0,"^1J",485],["^ ","^1I",4,"^1J",485,"^E","map__40903"],["^ ","^1I",17,"^1J",485,"^E","p__40901"],["^ ","^1I",4,"^1J",486,"^E","map__40903"],["^ ","^1I",21,"^1J",486],["^ ","^1I",23,"^1J",486],["^ ","^1I",25,"^1J",486],["^ ","^1I",27,"^1J",486],["^ ","^1I",28,"^1J",486,"^E","map__40903"],["^ ","^1I",42,"^1J",486],["^ ","^1I",50,"^1J",486],["^ ","^1I",52,"^1J",486],["^ ","^1I",54,"^1J",486],["^ ","^1I",55,"^1J",486],["^ ","^1I",55,"^1J",486,"^E","map__40903"],["^ ","^1I",104,"^1J",486],["^ ","^1I",115,"^1J",486],["^ ","^1I",116,"^1J",486,"^E","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1I",148,"^1J",486],["^ ","^1I",148,"^1J",486,"^E","map__40903"],["^ ","^1I",179,"^1J",486],["^ ","^1I",184,"^1J",486],["^ ","^1I",191,"^1J",486],["^ ","^1I",199,"^1J",486],["^ ","^1I",199,"^1J",486,"^E","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",245,"^1J",486,"^E","cljs.core/hash-map"],["^ ","^1I",264,"^1J",486,"^E","map__40903"],["^ ","^1I",276,"^1J",486,"^E","map__40903"],["^ ","^1I",10,"^1J",487,"^E","map__40903"],["^ ","^1I",10,"^1J",488],["^ ","^1I",10,"^1J",488,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",54,"^1J",488,"^E","map__40903"],["^ ","^1I",69,"^1J",488],["^ ","^1I",16,"^1J",489],["^ ","^1I",16,"^1J",489,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",60,"^1J",489,"^E","map__40903"],["^ ","^1I",75,"^1J",489],["^ ","^1I",15,"^1J",490],["^ ","^1I",15,"^1J",490,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",59,"^1J",490,"^E","map__40903"],["^ ","^1I",74,"^1J",490],["^ ","^1I",0,"^1J",491]],"~i6",[["^ ","^1I",0,"^1J",484,"^E","fulcro.client.impl.data-fetch/elide-ast-nodes"]]],"~i274",["^ ","^43",[["^ ","^1I",4,"^1J",488,"^E","key"]],"^1H",[["^ ","^1I",4,"^1J",489,"^E","union-key"]],"^1T",[["^ ","^1I",4,"^1J",490,"^E","children"]],"^2?",[["^ ","^1I",4,"^1J",487,"^E","ast"]],"^2<",[["^ ","^1I",113,"^1J",484,"^E","elision-set"]]],"~i275",["^ ","~i2",[["^ ","^1I",0,"^1J",491],["^ ","^1I",0,"^1J",492]],"~i8",[["^ ","^1I",4,"^1J",491,"^E","union-elision?"]],"^1V",[["^ ","^1I",27,"^1J",491]],"^1W",[["^ ","^1I",27,"^1J",491,"^E","cljs.core/contains?"]],"^28",[["^ ","^1I",53,"^1J",491,"^E","elision-set"]],"^22",[["^ ","^1I",65,"^1J",491,"^E","union-key"]]],"~i276",["^ ","~i4",[["^ ","^1I",0,"^1J",492],["^ ","^1I",0,"^1J",493],["^ ","^1I",0,"^1J",495]],"^1O",[["^ ","^1I",3,"^1J",492]],"^1Q",[["^ ","^1I",5,"^1J",492,"^E","union-elision?"]],"^1X",[["^ ","^1I",31,"^1J",492]],"^28",[["^ ","^1I",31,"^1J",492,"^E","cljs.core/contains?"]],"^2<",[["^ ","^1I",57,"^1J",492,"^E","elision-set"]],"^4Q",[["^ ","^1I",69,"^1J",492,"^E","key"]]],"~i277",["^ ","~i6",[["^ ","^1I",0,"^1J",495],["^ ","^1I",0,"^1J",496],["^ ","^1I",0,"^1J",505]],"^2B",[["^ ","^1I",3,"^1J",495]],"^1P",[["^ ","^1I",5,"^1J",495,"^E","union-elision?"]],"^27",[["^ ","^1I",31,"^1J",495],["^ ","^1I",61,"^1J",495]],"^2:",[["^ ","^1I",32,"^1J",495]],"^1M",[["^ ","^1I",32,"^1J",495,"^E","cljs.core/count"]],"^3B",[["^ ","^1I",48,"^1J",495,"^E","children"]]],"~i278",["^ ","~i8",[["^ ","^1I",0,"^1J",496],["^ ","^1I",4,"^1J",496],["^ ","^1I",4,"^1J",496],["^ ","^1I",4,"^1J",496,"^E","fulcro.logging._log.cljs$core$IFn$_invoke$arity$variadic"],["^ ","^1I",61,"^1J",496],["^ ","^1I",104,"^1J",496],["^ ","^1I",158,"^1J",496],["^ ","^1I",190,"^1J",496],["^ ","^1I",242,"^1J",496],["^ ","^1I",254,"^1J",496],["^ ","^1I",357,"^1J",496],["^ ","^1I",16,"^1J",497],["^ ","^1I",19,"^1J",497],["^ ","^1I",20,"^1J",497,"^E","e40905"],["^ ","^1I",38,"^1J",497,"^E","js/Error"],["^ ","^1I",0,"^1J",498],["^ ","^1I",4,"^1J",498,"^E","e__31527__auto__"],["^ ","^1I",29,"^1J",498,"^E","e40905"],["^ ","^1I",0,"^1J",499],["^ ","^1I",0,"^1J",499],["^ ","^1I",0,"^1J",499,"^E","fulcro.logging._log.cljs$core$IFn$_invoke$arity$variadic"],["^ ","^1I",57,"^1J",499],["^ ","^1I",100,"^1J",499],["^ ","^1I",154,"^1J",499],["^ ","^1I",186,"^1J",499],["^ ","^1I",238,"^1J",499],["^ ","^1I",250,"^1J",499],["^ ","^1I",353,"^1J",499],["^ ","^1I",406,"^1J",499,"^E","e__31527__auto__"],["^ ","^1I",0,"^1J",501],["^ ","^1I",0,"^1J",501],["^ ","^1I",6,"^1J",501,"^E","e40905"]]],"~i279",["^ ","^2G",[["^ ","^1I",508,"^1J",496]],"^2H",[["^ ","^1I",508,"^1J",496,"^E","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic"]],"^2M",[["^ ","^1I",612,"^1J",496,"^E","union-key"]]],"~i280",["^ ","~i6",[["^ ","^1I",0,"^1J",507],["^ ","^1I",58,"^1J",507]],"~i7",[["^ ","^1I",7,"^1J",507,"^E","cljs.core.update.cljs$core$IFn$_invoke$arity$3"]],"^1O",[["^ ","^1I",54,"^1J",507,"^E","ast"]],"^26",[["^ ","^1I",119,"^1J",507],["^ ","^1I",0,"^1J",509]],"^1X",[["^ ","^1I",18,"^1J",508,"^E","c"]],"^2:",[["^ ","^1I",0,"^1J",509]],"^1M",[["^ ","^1I",7,"^1J",509,"^E","cljs.core/vec"]],"^49",[["^ ","^1I",21,"^1J",509],["^ ","^1I",66,"^1J",509],["^ ","^1I",18,"^1J",510,"^E","p1__40899#"],["^ ","^1I",0,"^1J",511]],"^3G",[["^ ","^1I",21,"^1J",509,"^E","cljs.core.keep.cljs$core$IFn$_invoke$arity$2"]],"^2@",[["^ ","^1I",0,"^1J",511],["^ ","^1I",162,"^1J",511,"^E","p1__40899#"],["^ ","^1I",250,"^1J",511,"^E","p1__40899#"]],"^1N",[["^ ","^1I",8,"^1J",511,"^E","fulcro.client.impl.data-fetch/elide-ast-nodes"],["^ ","^1I",86,"^1J",511,"^E","fulcro.client.impl.data-fetch/elide-ast-nodes"],["^ ","^1I",194,"^1J",511,"^E","fulcro.client.impl.data-fetch/elide-ast-nodes"]],"^2N",[["^ ","^1I",179,"^1J",511,"^E","elision-set"],["^ ","^1I",267,"^1J",511,"^E","elision-set"]],"~i80",[["^ ","^1I",1,"^1J",513,"^E","c"]]],"~i282",["^ ","~i0",[["^ ","^1I",0,"^1J",518],["^ ","^1I",52,"^1J",534],["^ ","^1I",0,"^1J",535]],"~i6",[["^ ","^1I",0,"^1J",534,"^E","fulcro.client.impl.data-fetch/inject-query-params"]]],"~i297",["^ ","~i3",[["^ ","^1I",112,"^1J",534,"^E","ast"]],"~i7",[["^ ","^1I",116,"^1J",534,"^E","params"]]],"~i298",["^ ","~i2",[["^ ","^1I",0,"^1J",535],["^ ","^1I",61,"^1J",535],["^ ","^1I",144,"^1J",535],["^ ","^1I",213,"^1J",535],["^ ","^1I",224,"^1J",535,"^E","p1__40913#"],["^ ","^1I",0,"^1J",536]],"~i3",[["^ ","^1I",7,"^1J",535,"^E","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3"]],"^2C",[["^ ","^1I",57,"^1J",535,"^E","ast"]],"^1Z",[["^ ","^1I",0,"^1J",536],["^ ","^1I",3,"^1J",544,"^E","p1__40913#"]],"^1[",[["^ ","^1I",7,"^1J",536,"^E","cljs.core.map.cljs$core$IFn$_invoke$arity$2"]],"^29",[["^ ","^1I",51,"^1J",536],["^ ","^1I",0,"^1J",537]],"^20",[["^ ","^1I",62,"^1J",536,"^E","c"]],"^3B",[["^ ","^1I",0,"^1J",537],["^ ","^1I",4,"^1J",537,"^E","temp__5455__auto__"],["^ ","^1I",0,"^1J",538],["^ ","^1I",0,"^1J",538],["^ ","^1I",20,"^1J",538,"^E","temp__5455__auto__"],["^ ","^1I",0,"^1J",539],["^ ","^1I",17,"^1J",539,"^E","temp__5455__auto__"],["^ ","^1I",0,"^1J",540]],"^2D",[["^ ","^1I",4,"^1J",539,"^E","new-params"]],"^2K",[["^ ","^1I",25,"^1J",537]],"^2L",[["^ ","^1I",25,"^1J",537,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"]],"~i68",[["^ ","^1I",69,"^1J",537,"^E","params"]],"^2S",[["^ ","^1I",76,"^1J",537],["^ ","^1I",76,"^1J",537]],"^34",[["^ ","^1I",174,"^1J",537,"^E","c"]]],"~i299",["^ ","^3=",[["^ ","^1I",0,"^1J",540],["^ ","^1I",56,"^1J",540]],"^22",[["^ ","^1I",7,"^1J",540,"^E","cljs.core.update.cljs$core$IFn$_invoke$arity$4"]],"^3P",[["^ ","^1I",54,"^1J",540,"^E","c"]],"^2K",[["^ ","^1I",112,"^1J",540,"^E","cljs.core/merge"]],"~i69",[["^ ","^1I",128,"^1J",540,"^E","new-params"]]],"~i300",["^ ","^3=",[["^ ","^1I",0,"^1J",542,"^E","c"]]],"~i302",["^ ","~i0",[["^ ","^1I",0,"^1J",547],["^ ","^1I",44,"^1J",551],["^ ","^1I",96,"^1J",551,"^E","p__40918"],["^ ","^1I",0,"^1J",552],["^ ","^1I",0,"^1J",552],["^ ","^1I",4,"^1J",552,"^E","map__40919"],["^ ","^1I",17,"^1J",552,"^E","p__40918"],["^ ","^1I",4,"^1J",553,"^E","map__40919"],["^ ","^1I",21,"^1J",553],["^ ","^1I",23,"^1J",553],["^ ","^1I",25,"^1J",553],["^ ","^1I",27,"^1J",553],["^ ","^1I",28,"^1J",553,"^E","map__40919"],["^ ","^1I",42,"^1J",553],["^ ","^1I",50,"^1J",553],["^ ","^1I",52,"^1J",553],["^ ","^1I",54,"^1J",553],["^ ","^1I",55,"^1J",553],["^ ","^1I",55,"^1J",553,"^E","map__40919"],["^ ","^1I",104,"^1J",553],["^ ","^1I",115,"^1J",553],["^ ","^1I",116,"^1J",553,"^E","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1I",148,"^1J",553],["^ ","^1I",148,"^1J",553,"^E","map__40919"],["^ ","^1I",179,"^1J",553],["^ ","^1I",184,"^1J",553],["^ ","^1I",191,"^1J",553],["^ ","^1I",199,"^1J",553],["^ ","^1I",199,"^1J",553,"^E","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",245,"^1J",553,"^E","cljs.core/hash-map"],["^ ","^1I",264,"^1J",553,"^E","map__40919"],["^ ","^1I",276,"^1J",553,"^E","map__40919"],["^ ","^1I",13,"^1J",554],["^ ","^1I",13,"^1J",554,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",57,"^1J",554,"^E","map__40919"],["^ ","^1I",72,"^1J",554],["^ ","^1I",12,"^1J",555],["^ ","^1I",12,"^1J",555,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",56,"^1J",555,"^E","map__40919"],["^ ","^1I",71,"^1J",555],["^ ","^1I",15,"^1J",556],["^ ","^1I",15,"^1J",556,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",59,"^1J",556,"^E","map__40919"],["^ ","^1I",74,"^1J",556],["^ ","^1I",13,"^1J",557],["^ ","^1I",13,"^1J",557,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$3"],["^ ","^1I",57,"^1J",557,"^E","map__40919"],["^ ","^1I",72,"^1J",557],["^ ","^1I",130,"^1J",557],["^ ","^1I",14,"^1J",558],["^ ","^1I",14,"^1J",558,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$3"],["^ ","^1I",58,"^1J",558,"^E","map__40919"],["^ ","^1I",73,"^1J",558],["^ ","^1I",132,"^1J",558],["^ ","^1I",15,"^1J",559],["^ ","^1I",15,"^1J",559,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",59,"^1J",559,"^E","map__40919"],["^ ","^1I",74,"^1J",559],["^ ","^1I",15,"^1J",560],["^ ","^1I",15,"^1J",560,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",59,"^1J",560,"^E","map__40919"],["^ ","^1I",74,"^1J",560],["^ ","^1I",13,"^1J",561],["^ ","^1I",13,"^1J",561,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$3"],["^ ","^1I",57,"^1J",561,"^E","map__40919"],["^ ","^1I",72,"^1J",561],["^ ","^1I",128,"^1J",561],["^ ","^1I",13,"^1J",562],["^ ","^1I",13,"^1J",562,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",57,"^1J",562,"^E","map__40919"],["^ ","^1I",72,"^1J",562],["^ ","^1I",12,"^1J",563],["^ ","^1I",12,"^1J",563,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",56,"^1J",563,"^E","map__40919"],["^ ","^1I",71,"^1J",563],["^ ","^1I",10,"^1J",564],["^ ","^1I",10,"^1J",564,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",54,"^1J",564,"^E","map__40919"],["^ ","^1I",69,"^1J",564],["^ ","^1I",20,"^1J",565],["^ ","^1I",20,"^1J",565,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",64,"^1J",565,"^E","map__40919"],["^ ","^1I",79,"^1J",565],["^ ","^1I",14,"^1J",566],["^ ","^1I",14,"^1J",566,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$3"],["^ ","^1I",58,"^1J",566,"^E","map__40919"],["^ ","^1I",73,"^1J",566],["^ ","^1I",132,"^1J",566],["^ ","^1I",17,"^1J",567],["^ ","^1I",17,"^1J",567,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",61,"^1J",567,"^E","map__40919"],["^ ","^1I",76,"^1J",567],["^ ","^1I",12,"^1J",568],["^ ","^1I",12,"^1J",568,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",56,"^1J",568,"^E","map__40919"],["^ ","^1I",71,"^1J",568],["^ ","^1I",27,"^1J",569],["^ ","^1I",27,"^1J",569,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",71,"^1J",569,"^E","map__40919"],["^ ","^1I",86,"^1J",569],["^ ","^1I",0,"^1J",570]],"~i6",[["^ ","^1I",0,"^1J",551,"^E","fulcro.client.impl.data-fetch/ready-state"]]],"~i305",["^ ","^43",[["^ ","^1I",4,"^1J",568,"^E","ident"]],"^1P",[["^ ","^1I",4,"^1J",563,"^E","field"]],"^1V",[["^ ","^1I",4,"^1J",562,"^E","params"]],"^1Z",[["^ ","^1I",4,"^1J",557,"^E","remote"]],"^1M",[["^ ","^1I",4,"^1J",566,"^E","without"]],"^3=",[["^ ","^1I",4,"^1J",555,"^E","query"]],"^2X",[["^ ","^1I",4,"^1J",565,"^E","post-mutation"]],"^2M",[["^ ","^1I",4,"^1J",569,"^E","post-mutation-params"]],"^30",[["^ ","^1I",4,"^1J",560,"^E","fallback"]],"~i95",[["^ ","^1I",4,"^1J",559,"^E","parallel"]],"~i104",[["^ ","^1I",4,"^1J",558,"^E","refresh"]],"~i112",[["^ ","^1I",4,"^1J",561,"^E","marker"]]],"~i306",["^ ","^43",[["^ ","^1I",4,"^1J",554,"^E","target"]],"^1Q",[["^ ","^1I",4,"^1J",564,"^E","env"]],"^1L",[["^ ","^1I",4,"^1J",567,"^E","initialize"]],"^1X",[["^ ","^1I",4,"^1J",556,"^E","abort-id"]]],"~i308",["^ ","~i2",[["^ ","^1I",0,"^1J",570],["^ ","^1I",0,"^1J",577],["^ ","^1I",0,"^1J",578],["^ ","^1I",0,"^1J",578],["^ ","^1I",6,"^1J",578],["^ ","^1I",11,"^1J",578,"^E","js/Error"],["^ ","^1I",17,"^1J",578],["^ ","^1I",18,"^1J",578],["^ ","^1I",36,"^1J",578],["^ ","^1I",84,"^1J",578],["^ ","^1I",89,"^1J",578]],"^2=",[["^ ","^1I",20,"^1J",570],["^ ","^1I",37,"^1J",570,"^E","or__3949__auto__"],["^ ","^1I",0,"^1J",571],["^ ","^1I",0,"^1J",571],["^ ","^1I",20,"^1J",571,"^E","or__3949__auto__"],["^ ","^1I",0,"^1J",572,"^E","or__3949__auto__"]],"^1O",[["^ ","^1I",56,"^1J",570,"^E","field"]],"^1U",[["^ ","^1I",0,"^1J",574,"^E","query"]]],"~i309",["^ ","~i2",[["^ ","^1I",0,"^1J",581],["^ ","^1I",0,"^1J",593],["^ ","^1I",0,"^1J",594],["^ ","^1I",0,"^1J",594],["^ ","^1I",6,"^1J",594],["^ ","^1I",11,"^1J",594,"^E","js/Error"],["^ ","^1I",17,"^1J",594],["^ ","^1I",18,"^1J",594],["^ ","^1I",36,"^1J",594],["^ ","^1I",59,"^1J",594],["^ ","^1I",64,"^1J",594]],"^2=",[["^ ","^1I",20,"^1J",581],["^ ","^1I",37,"^1J",581,"^E","or__3949__auto__"],["^ ","^1I",0,"^1J",582],["^ ","^1I",0,"^1J",582],["^ ","^1I",3,"^1J",582,"^E","or__3949__auto__"],["^ ","^1I",0,"^1J",583,"^E","or__3949__auto__"]],"^1O",[["^ ","^1I",56,"^1J",581]],"^1H",[["^ ","^1I",56,"^1J",581,"^E","cljs.core/not"]],"^1S",[["^ ","^1I",70,"^1J",581,"^E","field"]],"^1R",[["^ ","^1I",0,"^1J",585],["^ ","^1I",4,"^1J",585,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",586],["^ ","^1I",0,"^1J",586],["^ ","^1I",20,"^1J",586,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",589,"^E","and__3938__auto__"]],"^1[",[["^ ","^1I",24,"^1J",585,"^E","field"]],"^1M",[["^ ","^1I",0,"^1J",587]],"^2;",[["^ ","^1I",7,"^1J",587,"^E","fulcro.util/ident?"]],"^2A",[["^ ","^1I",32,"^1J",587,"^E","ident"]]],"~i310",["^ ","~i2",[["^ ","^1I",0,"^1J",597],["^ ","^1I",0,"^1J",621],["^ ","^1I",0,"^1J",626],["^ ","^1I",47,"^1J",626],["^ ","^1I",170,"^1J",626],["^ ","^1I",271,"^1J",626],["^ ","^1I",356,"^1J",626],["^ ","^1I",466,"^1J",626],["^ ","^1I",584,"^1J",626],["^ ","^1I",698,"^1J",626],["^ ","^1I",824,"^1J",626],["^ ","^1I",927,"^1J",626],["^ ","^1I",1029,"^1J",626],["^ ","^1I",1130,"^1J",626],["^ ","^1I",1245,"^1J",626],["^ ","^1I",1354,"^1J",626],["^ ","^1I",1495,"^1J",626],["^ ","^1I",1613,"^1J",626],["^ ","^1I",1726,"^1J",626],["^ ","^1I",1853,"^1J",626],["^ ","^1I",374,"^1J",632]],"~i8",[["^ ","^1I",4,"^1J",597,"^E","old-ast"]],"^1U",[["^ ","^1I",14,"^1J",597]],"^1Y",[["^ ","^1I",14,"^1J",597,"^E","fulcro.client.primitives/query->ast"]],"^1M",[["^ ","^1I",53,"^1J",597,"^E","query"]]],"~i311",["^ ","~i8",[["^ ","^1I",4,"^1J",598,"^E","ast"]],"^1U",[["^ ","^1I",10,"^1J",598],["^ ","^1I",27,"^1J",598,"^E","G__40924"],["^ ","^1I",4,"^1J",599,"^E","G__40924"],["^ ","^1I",19,"^1J",599],["^ ","^1I",131,"^1J",599,"^E","G__40924"],["^ ","^1I",4,"^1J",600,"^E","G__40924"],["^ ","^1I",19,"^1J",600],["^ ","^1I",133,"^1J",611,"^E","G__40924"],["^ ","^1I",0,"^1J",612],["^ ","^1I",0,"^1J",612],["^ ","^1I",0,"^1J",615,"^E","G__40924"]],"^26",[["^ ","^1I",38,"^1J",598,"^E","old-ast"]]],"~i312",["^ ","^1L",[["^ ","^1I",37,"^1J",599]],"^1V",[["^ ","^1I",37,"^1J",599,"^E","cljs.core/not-empty"]],"^1X",[["^ ","^1I",57,"^1J",599,"^E","without"]],"^3G",[["^ ","^1I",67,"^1J",599],["^ ","^1I",113,"^1J",599,"^E","G__40924"]],"^3B",[["^ ","^1I",67,"^1J",599,"^E","fulcro.client.impl.data-fetch/elide-ast-nodes"]],"^31",[["^ ","^1I",122,"^1J",599,"^E","without"]]],"~i313",["^ ","^1L",[["^ ","^1I",37,"^1J",600],["^ ","^1I",54,"^1J",600,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",601],["^ ","^1I",0,"^1J",601],["^ ","^1I",20,"^1J",601,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",602],["^ ","^1I",4,"^1J",602,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",603],["^ ","^1I",0,"^1J",603],["^ ","^1I",20,"^1J",603,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",606,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",609,"^E","and__3938__auto__"]],"^21",[["^ ","^1I",74,"^1J",600,"^E","field"]],"^1X",[["^ ","^1I",28,"^1J",602,"^E","params"]],"^20",[["^ ","^1I",0,"^1J",604]],"^3=",[["^ ","^1I",9,"^1J",604]],"^22",[["^ ","^1I",9,"^1J",604,"^E","cljs.core/contains?"]],"^4Q",[["^ ","^1I",35,"^1J",604,"^E","params"]],"^2K",[["^ ","^1I",42,"^1J",604,"^E","field"]],"^24",[["^ ","^1I",6,"^1J",611],["^ ","^1I",56,"^1J",611,"^E","G__40924"],["^ ","^1I",69,"^1J",611]],"^2Q",[["^ ","^1I",6,"^1J",611,"^E","fulcro.client.impl.data-fetch/inject-query-params"]],"^37",[["^ ","^1I",117,"^1J",611,"^E","field"]],"^3:",[["^ ","^1I",123,"^1J",611,"^E","params"]]],"~i314",["^ ","^1L",[["^ ","^1I",20,"^1J",612,"^E","params"]],"^2>",[["^ ","^1I",0,"^1J",613],["^ ","^1I",57,"^1J",613,"^E","G__40924"]],"^1Z",[["^ ","^1I",7,"^1J",613,"^E","fulcro.client.impl.data-fetch/inject-query-params"]],"^2A",[["^ ","^1I",70,"^1J",613,"^E","params"]]],"~i315",["^ ","~i8",[["^ ","^1I",4,"^1J",618,"^E","query-field"]],"^1U",[["^ ","^1I",18,"^1J",618]],"^1Y",[["^ ","^1I",18,"^1J",618,"^E","cljs.core/first"]],"^21",[["^ ","^1I",34,"^1J",618,"^E","query"]]],"~i316",["^ ","~i8",[["^ ","^1I",4,"^1J",619,"^E","key"]],"^1U",[["^ ","^1I",10,"^1J",619]],"^1W",[["^ ","^1I",28,"^1J",619]],"^1T",[["^ ","^1I",28,"^1J",619,"^E","fulcro.util/join?"]],"^2:",[["^ ","^1I",52,"^1J",619,"^E","query-field"]],"^1N",[["^ ","^1I",66,"^1J",619]],"^2A",[["^ ","^1I",66,"^1J",619,"^E","fulcro.util/join-key"]],"^2L",[["^ ","^1I",87,"^1J",619,"^E","query-field"]],"^2U",[["^ ","^1I",100,"^1J",619,"^E","query-field"]]],"~i317",["^ ","~i8",[["^ ","^1I",4,"^1J",620,"^E","query'"]],"^1U",[["^ ","^1I",25,"^1J",620]],"^1Y",[["^ ","^1I",25,"^1J",620,"^E","fulcro.client.primitives/ast->query"]],"^1M",[["^ ","^1I",64,"^1J",620,"^E","ast"]]],"~i318",["^ ","~i4",[["^ ","^1I",0,"^1J",621],["^ ","^1I",0,"^1J",622],["^ ","^1I",0,"^1J",623],["^ ","^1I",0,"^1J",623],["^ ","^1I",6,"^1J",623],["^ ","^1I",11,"^1J",623,"^E","js/Error"],["^ ","^1I",17,"^1J",623],["^ ","^1I",18,"^1J",623],["^ ","^1I",36,"^1J",623],["^ ","^1I",91,"^1J",623],["^ ","^1I",96,"^1J",623]],"^2B",[["^ ","^1I",3,"^1J",621]],"^1K",[["^ ","^1I",5,"^1J",621]],"^1P",[["^ ","^1I",5,"^1J",621,"^E","cljs.core/not"]],"^1Y",[["^ ","^1I",19,"^1J",621,"^E","field"]],"^26",[["^ ","^1I",31,"^1J",621]],"^2>",[["^ ","^1I",31,"^1J",621,"^E","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^1[",[["^ ","^1I",76,"^1J",621,"^E","field"]],"^1M",[["^ ","^1I",82,"^1J",621,"^E","key"]]],"~i320",["^ ","^22",[["^ ","^1I",178,"^1J",632]],"^2X",[["^ ","^1I",223,"^1J",632]],"^2D",[["^ ","^1I",223,"^1J",632,"^E","cljs.core/random-uuid"]]],"~i322",["^ ","^1M",[["^ ","^1I",267,"^1J",632,"^E","target"]]],"~i323",["^ ","^1M",[["^ ","^1I",340,"^1J",632,"^E","remote"]]],"~i324",["^ ","^1M",[["^ ","^1I",334,"^1J",632,"^E","ident"]]],"~i325",["^ ","^1M",[["^ ","^1I",480,"^1J",632,"^E","field"]]],"~i326",["^ ","^1M",[["^ ","^1I",347,"^1J",632,"^E","query'"]]],"~i327",["^ ","^1M",[["^ ","^1I",466,"^1J",632,"^E","post-mutation"]]],"~i328",["^ ","^1M",[["^ ","^1I",429,"^1J",632,"^E","post-mutation-params"]]],"~i329",["^ ","^1M",[["^ ","^1I",1967,"^1J",626,"^E","initialize"]]],"~i330",["^ ","^1M",[["^ ","^1I",366,"^1J",632,"^E","refresh"]]],"~i331",["^ ","^1M",[["^ ","^1I",459,"^1J",632,"^E","marker"]]],"~i332",["^ ","^1M",[["^ ","^1I",258,"^1J",632,"^E","parallel"]]],"~i333",["^ ","^1M",[["^ ","^1I",450,"^1J",632,"^E","fallback"]]],"~i335",["^ ","^1M",[["^ ","^1I",274,"^1J",632],["^ ","^1I",294,"^1J",632]],"^2;",[["^ ","^1I",274,"^1J",632,"^E","cljs.core/with-meta"]],"^2X",[["^ ","^1I",329,"^1J",632,"^E","env"]]],"~i336",["^ ","^1M",[["^ ","^1I",1978,"^1J",626,"^E","abort-id"]]],"~i337",["^ ","^1M",[["^ ","^1I",1987,"^1J",626]],"^49",[["^ ","^1I",2005,"^1J",626],["^ ","^1I",2022,"^1J",626,"^E","G__40927"],["^ ","^1I",0,"^1J",627],["^ ","^1I",0,"^1J",627],["^ ","^1I",3,"^1J",627],["^ ","^1I",4,"^1J",627,"^E","G__40927"],["^ ","^1I",16,"^1J",627],["^ ","^1I",0,"^1J",628],["^ ","^1I",0,"^1J",630],["^ ","^1I",7,"^1J",630],["^ ","^1I",103,"^1J",630,"^E","G__40927"]],"^1N",[["^ ","^1I",2033,"^1J",626,"^E","env"]]],"~i338",["^ ","^2?",[["^ ","^1I",6,"^1J",632]],"^20",[["^ ","^1I",6,"^1J",632,"^E","fulcro.client.primitives/get-current-time"]],"^2J",[["^ ","^1I",48,"^1J",632],["^ ","^1I",48,"^1J",632]],"^2S",[["^ ","^1I",144,"^1J",632,"^E","env"]]],"~i339",["^ ","^2?",[["^ ","^1I",150,"^1J",632]],"^3B",[["^ ","^1I",150,"^1J",632,"^E","fulcro.history/max-tx-time"]]],"~i341",["^ ","~i0",[["^ ","^1I",0,"^1J",634],["^ ","^1I",43,"^1J",640],["^ ","^1I",94,"^1J",640,"^E","p__40950"],["^ ","^1I",0,"^1J",641],["^ ","^1I",0,"^1J",641],["^ ","^1I",4,"^1J",641,"^E","map__40951"],["^ ","^1I",17,"^1J",641,"^E","p__40950"],["^ ","^1I",4,"^1J",642,"^E","map__40951"],["^ ","^1I",21,"^1J",642],["^ ","^1I",23,"^1J",642],["^ ","^1I",25,"^1J",642],["^ ","^1I",27,"^1J",642],["^ ","^1I",28,"^1J",642,"^E","map__40951"],["^ ","^1I",42,"^1J",642],["^ ","^1I",50,"^1J",642],["^ ","^1I",52,"^1J",642],["^ ","^1I",54,"^1J",642],["^ ","^1I",55,"^1J",642],["^ ","^1I",55,"^1J",642,"^E","map__40951"],["^ ","^1I",104,"^1J",642],["^ ","^1I",115,"^1J",642],["^ ","^1I",116,"^1J",642,"^E","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1I",148,"^1J",642],["^ ","^1I",148,"^1J",642,"^E","map__40951"],["^ ","^1I",179,"^1J",642],["^ ","^1I",184,"^1J",642],["^ ","^1I",191,"^1J",642],["^ ","^1I",199,"^1J",642],["^ ","^1I",199,"^1J",642,"^E","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",245,"^1J",642,"^E","cljs.core/hash-map"],["^ ","^1I",264,"^1J",642,"^E","map__40951"],["^ ","^1I",276,"^1J",642,"^E","map__40951"],["^ ","^1I",13,"^1J",643,"^E","map__40951"],["^ ","^1I",10,"^1J",644],["^ ","^1I",10,"^1J",644,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",54,"^1J",644,"^E","map__40951"],["^ ","^1I",69,"^1J",644],["^ ","^1I",0,"^1J",645]],"~i6",[["^ ","^1I",0,"^1J",640,"^E","fulcro.client.impl.data-fetch/mark-ready"]]],"~i346",["^ ","^43",[["^ ","^1I",4,"^1J",644,"^E","env"]],"^1U",[["^ ","^1I",4,"^1J",643,"^E","config"]]],"~i347",["^ ","~i2",[["^ ","^1I",0,"^1J",645],["^ ","^1I",0,"^1J",648]],"~i8",[["^ ","^1I",4,"^1J",645,"^E","state"]],"^1Y",[["^ ","^1I",12,"^1J",645],["^ ","^1I",60,"^1J",645]],"^1L",[["^ ","^1I",12,"^1J",645,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"]],"^1R",[["^ ","^1I",56,"^1J",645,"^E","env"]]],"~i348",["^ ","~i8",[["^ ","^1I",4,"^1J",646,"^E","marker?"]],"^1Y",[["^ ","^1I",20,"^1J",646]],"^1R",[["^ ","^1I",22,"^1J",646],["^ ","^1I",23,"^1J",646]],"^2<",[["^ ","^1I",33,"^1J",646],["^ ","^1I",33,"^1J",646]],"^3P",[["^ ","^1I",119,"^1J",646,"^E","config"]]],"~i349",["^ ","~i8",[["^ ","^1I",4,"^1J",647,"^E","load-request"]],"^1Y",[["^ ","^1I",19,"^1J",647]],"^1L",[["^ ","^1I",19,"^1J",647,"^E","fulcro.client.impl.data-fetch/ready-state"]],"^28",[["^ ","^1I",61,"^1J",647],["^ ","^1I",164,"^1J",647],["^ ","^1I",207,"^1J",647],["^ ","^1I",263,"^1J",647],["^ ","^1I",268,"^1J",647],["^ ","^1I",327,"^1J",647],["^ ","^1I",360,"^1J",647],["^ ","^1I",419,"^1J",647],["^ ","^1I",453,"^1J",647]],"^29",[["^ ","^1I",61,"^1J",647,"^E","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic"]],"^2[",[["^ ","^1I",505,"^1J",647,"^E","env"]],"^34",[["^ ","^1I",517,"^1J",647,"^E","config"]]],"~i350",["^ ","~i4",[["^ ","^1I",0,"^1J",648]],"~i5",[["^ ","^1I",7,"^1J",648,"^E","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2"]],"^43",[["^ ","^1I",58,"^1J",648,"^E","state"]],"^1P",[["^ ","^1I",64,"^1J",648],["^ ","^1I",0,"^1J",650]],"^1L",[["^ ","^1I",18,"^1J",649,"^E","s"]]],"~i351",["^ ","^1S",[["^ ","^1I",0,"^1J",650],["^ ","^1I",4,"^1J",650,"^E","G__40954"],["^ ","^1I",0,"^1J",651],["^ ","^1I",0,"^1J",651],["^ ","^1I",0,"^1J",654,"^E","G__40954"]],"^21",[["^ ","^1I",15,"^1J",650],["^ ","^1I",64,"^1J",650]],"^26",[["^ ","^1I",15,"^1J",650,"^E","cljs.core.update.cljs$core$IFn$_invoke$arity$4"]],"^29",[["^ ","^1I",62,"^1J",650,"^E","s"]],"^31",[["^ ","^1I",145,"^1J",650],["^ ","^1I",205,"^1J",650]],"^2I",[["^ ","^1I",145,"^1J",650,"^E","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2"]],"^2M",[["^ ","^1I",190,"^1J",650,"^E","cljs.core/conj"]],"^2R",[["^ ","^1I",239,"^1J",650,"^E","load-request"]]],"~i352",["^ ","^1Y",[["^ ","^1I",3,"^1J",651,"^E","marker?"]],"^2>",[["^ ","^1I",0,"^1J",652],["^ ","^1I",55,"^1J",652,"^E","G__40954"]],"^1Z",[["^ ","^1I",7,"^1J",652,"^E","fulcro.client.impl.data-fetch/place-load-marker"]],"^2@",[["^ ","^1I",64,"^1J",652,"^E","load-request"]]],"~i354",["^ ","~i0",[["^ ","^1I",0,"^1J",659],["^ ","^1I",44,"^1J",663],["^ ","^1I",0,"^1J",664]],"~i6",[["^ ","^1I",0,"^1J",663,"^E","fulcro.client.impl.data-fetch/data-target"]]],"~i357",["^ ","~i3",[["^ ","^1I",96,"^1J",663,"^E","state"]],"^2=",[["^ ","^1I",0,"^1J",664],["^ ","^1I",7,"^1J",664]],"^1U",[["^ ","^1I",151,"^1J",664,"^E","state"]]],"~i358",["^ ","~i0",[["^ ","^1I",0,"^1J",666],["^ ","^1I",43,"^1J",670],["^ ","^1I",0,"^1J",671]],"~i6",[["^ ","^1I",0,"^1J",670,"^E","fulcro.client.impl.data-fetch/data-ident"]]],"~i361",["^ ","~i3",[["^ ","^1I",94,"^1J",670,"^E","state"]],"^2=",[["^ ","^1I",0,"^1J",671],["^ ","^1I",7,"^1J",671]],"^1W",[["^ ","^1I",140,"^1J",671,"^E","state"]]],"~i362",["^ ","~i0",[["^ ","^1I",0,"^1J",673],["^ ","^1I",43,"^1J",676],["^ ","^1I",0,"^1J",677]],"~i6",[["^ ","^1I",0,"^1J",676,"^E","fulcro.client.impl.data-fetch/data-query"]]],"~i364",["^ ","~i3",[["^ ","^1I",94,"^1J",676,"^E","state"]]],"~i365",["^ ","~i2",[["^ ","^1I",0,"^1J",677],["^ ","^1I",0,"^1J",678],["^ ","^1I",90,"^1J",678]],"~i6",[["^ ","^1I",20,"^1J",677]],"~i7",[["^ ","^1I",20,"^1J",677,"^E","fulcro.client.impl.data-fetch/data-ident"]],"^1Q",[["^ ","^1I",61,"^1J",677,"^E","state"]]],"~i366",["^ ","~i6",[["^ ","^1I",138,"^1J",678]],"~i7",[["^ ","^1I",138,"^1J",678,"^E","fulcro.client.impl.data-fetch/data-ident"]],"^1Q",[["^ ","^1I",179,"^1J",678,"^E","state"]],"^1T",[["^ ","^1I",186,"^1J",678],["^ ","^1I",186,"^1J",678]],"^2?",[["^ ","^1I",317,"^1J",678,"^E","state"]]],"~i367",["^ ","~i4",[["^ ","^1I",0,"^1J",680],["^ ","^1I",7,"^1J",680]],"^1Q",[["^ ","^1I",138,"^1J",680,"^E","state"]]],"~i368",["^ ","~i0",[["^ ","^1I",0,"^1J",683],["^ ","^1I",43,"^1J",686],["^ ","^1I",0,"^1J",687]],"~i6",[["^ ","^1I",0,"^1J",686,"^E","fulcro.client.impl.data-fetch/data-field"]]],"~i370",["^ ","~i3",[["^ ","^1I",94,"^1J",686,"^E","state"]],"^2=",[["^ ","^1I",0,"^1J",687],["^ ","^1I",7,"^1J",687]],"^1S",[["^ ","^1I",149,"^1J",687,"^E","state"]]],"~i371",["^ ","~i0",[["^ ","^1I",0,"^1J",689],["^ ","^1I",42,"^1J",692],["^ ","^1I",0,"^1J",693]],"~i6",[["^ ","^1I",0,"^1J",692,"^E","fulcro.client.impl.data-fetch/data-uuid"]]],"~i373",["^ ","~i3",[["^ ","^1I",92,"^1J",692,"^E","state"]],"^2=",[["^ ","^1I",0,"^1J",693],["^ ","^1I",7,"^1J",693]],"^1Q",[["^ ","^1I",147,"^1J",693,"^E","state"]]],"~i374",["^ ","~i0",[["^ ","^1I",0,"^1J",695],["^ ","^1I",44,"^1J",699],["^ ","^1I",0,"^1J",700]],"~i6",[["^ ","^1I",0,"^1J",699,"^E","fulcro.client.impl.data-fetch/data-marker"]]],"~i377",["^ ","~i3",[["^ ","^1I",96,"^1J",699,"^E","state"]],"^2=",[["^ ","^1I",0,"^1J",700],["^ ","^1I",7,"^1J",700]],"^1U",[["^ ","^1I",150,"^1J",700,"^E","state"]]],"~i378",["^ ","~i0",[["^ ","^1I",0,"^1J",702],["^ ","^1I",51,"^1J",705],["^ ","^1I",0,"^1J",706]],"~i6",[["^ ","^1I",0,"^1J",705,"^E","fulcro.client.impl.data-fetch/data-marker?"]]],"~i380",["^ ","~i3",[["^ ","^1I",110,"^1J",705,"^E","state"]],"^2=",[["^ ","^1I",0,"^1J",706]],"^43",[["^ ","^1I",7,"^1J",706,"^E","cljs.core/boolean"]],"^1S",[["^ ","^1I",26,"^1J",706],["^ ","^1I",26,"^1J",706]],"^2>",[["^ ","^1I",169,"^1J",706,"^E","state"]]],"~i381",["^ ","~i0",[["^ ","^1I",0,"^1J",708],["^ ","^1I",45,"^1J",711],["^ ","^1I",0,"^1J",712]],"~i6",[["^ ","^1I",0,"^1J",711,"^E","fulcro.client.impl.data-fetch/data-refresh"]]],"~i383",["^ ","~i3",[["^ ","^1I",98,"^1J",711,"^E","state"]],"^2=",[["^ ","^1I",0,"^1J",712],["^ ","^1I",7,"^1J",712]],"^1Y",[["^ ","^1I",152,"^1J",712,"^E","state"]]],"~i384",["^ ","~i0",[["^ ","^1I",0,"^1J",714],["^ ","^1I",44,"^1J",717],["^ ","^1I",0,"^1J",718]],"~i6",[["^ ","^1I",0,"^1J",717,"^E","fulcro.client.impl.data-fetch/data-remote"]]],"~i386",["^ ","~i3",[["^ ","^1I",96,"^1J",717,"^E","state"]],"^2=",[["^ ","^1I",0,"^1J",718],["^ ","^1I",7,"^1J",718]],"^1T",[["^ ","^1I",139,"^1J",718,"^E","state"]]],"~i387",["^ ","~i0",[["^ ","^1I",0,"^1J",720],["^ ","^1I",47,"^1J",724],["^ ","^1I",0,"^1J",725]],"~i6",[["^ ","^1I",0,"^1J",724,"^E","fulcro.client.impl.data-fetch/data-query-key"]]],"~i390",["^ ","~i3",[["^ ","^1I",102,"^1J",724,"^E","state"]]],"~i391",["^ ","~i2",[["^ ","^1I",0,"^1J",725],["^ ","^1I",0,"^1J",727]],"~i8",[["^ ","^1I",4,"^1J",725,"^E","ast"]],"^2C",[["^ ","^1I",10,"^1J",725]],"^1O",[["^ ","^1I",10,"^1J",725,"^E","fulcro.client.primitives/query->ast"]],"^1Z",[["^ ","^1I",49,"^1J",725],["^ ","^1I",49,"^1J",725]],"^28",[["^ ","^1I",180,"^1J",725,"^E","state"]]],"~i392",["^ ","~i8",[["^ ","^1I",4,"^1J",726,"^E","node"]],"^2C",[["^ ","^1I",11,"^1J",726],["^ ","^1I",27,"^1J",726],["^ ","^1I",27,"^1J",726]],"^1P",[["^ ","^1I",118,"^1J",726,"^E","ast"]],"^1[",[["^ ","^1I",11,"^1J",726,"^E","cljs.core/first"]]],"~i393",["^ ","~i4",[["^ ","^1I",0,"^1J",727],["^ ","^1I",7,"^1J",727]],"^2=",[["^ ","^1I",89,"^1J",727,"^E","node"]]],"~i395",["^ ","~i0",[["^ ","^1I",0,"^1J",729],["^ ","^1I",42,"^1J",732],["^ ","^1I",0,"^1J",733]],"~i6",[["^ ","^1I",0,"^1J",732,"^E","fulcro.client.impl.data-fetch/data-path"]]],"~i397",["^ ","~i3",[["^ ","^1I",92,"^1J",732,"^E","state"]]],"~i398",["^ ","~i2",[["^ ","^1I",0,"^1J",733],["^ ","^1I",0,"^1J",734]],"~i8",[["^ ","^1I",4,"^1J",733,"^E","target"]],"^1H",[["^ ","^1I",13,"^1J",733]],"^1K",[["^ ","^1I",13,"^1J",733,"^E","fulcro.client.impl.data-fetch/data-target"]],"^26",[["^ ","^1I",55,"^1J",733,"^E","state"]]],"~i399",["^ ","~i4",[["^ ","^1I",0,"^1J",734],["^ ","^1I",0,"^1J",748],["^ ","^1I",0,"^1J",751],["^ ","^1I",0,"^1J",754],["^ ","^1I",0,"^1J",754]]],"~i400",["^ ","~i6",[["^ ","^1I",20,"^1J",734],["^ ","^1I",37,"^1J",734,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",735],["^ ","^1I",0,"^1J",735],["^ ","^1I",3,"^1J",735,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",736],["^ ","^1I",4,"^1J",736,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",737],["^ ","^1I",0,"^1J",737],["^ ","^1I",3,"^1J",737,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",740,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",743,"^E","and__3938__auto__"]],"^43",[["^ ","^1I",57,"^1J",734],["^ ","^1I",109,"^1J",734]],"^1P",[["^ ","^1I",58,"^1J",734]],"^1Q",[["^ ","^1I",58,"^1J",734,"^E","fulcro.client.impl.data-fetch/data-field"]],"^2>",[["^ ","^1I",99,"^1J",734,"^E","state"]],"^1M",[["^ ","^1I",28,"^1J",736]],"^2;",[["^ ","^1I",28,"^1J",736,"^E","cljs.core/vector?"]],"^22",[["^ ","^1I",52,"^1J",736,"^E","target"]],"^2E",[["^ ","^1I",0,"^1J",738]],"^2F",[["^ ","^1I",7,"^1J",738,"^E","cljs.core/not-empty"]],"^2M",[["^ ","^1I",27,"^1J",738,"^E","target"]],"^2R",[["^ ","^1I",0,"^1J",746,"^E","target"]]],"~i401",["^ ","~i6",[["^ ","^1I",3,"^1J",748]],"^43",[["^ ","^1I",5,"^1J",748]],"^2B",[["^ ","^1I",5,"^1J",748,"^E","cljs.core/vector?"]],"^1U",[["^ ","^1I",29,"^1J",748]],"^1Y",[["^ ","^1I",29,"^1J",748,"^E","fulcro.client.impl.data-fetch/data-ident"]],"^27",[["^ ","^1I",70,"^1J",748,"^E","state"]],"^20",[["^ ","^1I",83,"^1J",748],["^ ","^1I",143,"^1J",748,"^E","cljs.core/Keyword"]],"^2A",[["^ ","^1I",84,"^1J",748]],"^2X",[["^ ","^1I",84,"^1J",748,"^E","fulcro.client.impl.data-fetch/data-field"]],"^2J",[["^ ","^1I",125,"^1J",748,"^E","state"]],"^2P",[["^ ","^1I",0,"^1J",749]],"^24",[["^ ","^1I",7,"^1J",749,"^E","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"^2U",[["^ ","^1I",52,"^1J",749]],"^2V",[["^ ","^1I",52,"^1J",749,"^E","fulcro.client.impl.data-fetch/data-ident"]],"~i89",[["^ ","^1I",93,"^1J",749,"^E","state"]],"~i96",[["^ ","^1I",100,"^1J",749]],"^38",[["^ ","^1I",100,"^1J",749,"^E","fulcro.client.impl.data-fetch/data-field"]],"~i108",[["^ ","^1I",141,"^1J",749,"^E","state"]]],"~i402",["^ ","~i6",[["^ ","^1I",3,"^1J",751]],"~i7",[["^ ","^1I",3,"^1J",751,"^E","fulcro.util/ident?"]],"^1S",[["^ ","^1I",28,"^1J",751]],"^1U",[["^ ","^1I",28,"^1J",751,"^E","fulcro.client.impl.data-fetch/data-query-key"]],"^29",[["^ ","^1I",73,"^1J",751,"^E","state"]],"^3B",[["^ ","^1I",0,"^1J",752]],"^2<",[["^ ","^1I",7,"^1J",752,"^E","fulcro.client.impl.data-fetch/data-query-key"]],"^31",[["^ ","^1I",52,"^1J",752,"^E","state"]]],"~i403",["^ ","^1Q",[["^ ","^1I",90,"^1J",754]],"^1S",[["^ ","^1I",90,"^1J",754,"^E","fulcro.client.impl.data-fetch/data-query-key"]],"^28",[["^ ","^1I",135,"^1J",754,"^E","state"]]],"~i405",["^ ","~i0",[["^ ","^1I",0,"^1J",760],["^ ","^1I",44,"^1J",763],["^ ","^1I",0,"^1J",764]],"~i6",[["^ ","^1I",0,"^1J",763,"^E","fulcro.client.impl.data-fetch/data-params"]]],"~i407",["^ ","~i3",[["^ ","^1I",96,"^1J",763,"^E","state"]],"^2=",[["^ ","^1I",0,"^1J",764],["^ ","^1I",7,"^1J",764]],"^1U",[["^ ","^1I",151,"^1J",764,"^E","state"]]],"~i410",["^ ","~i0",[["^ ","^1I",0,"^1J",766],["^ ","^1I",15,"^1J",766],["^ ","^1I",0,"^1J",767],["^ ","^1I",0,"^1J",769]],"^1S",[["^ ","^1I",64,"^1J",766,"^E","state"]],"^1T",[["^ ","^1I",70,"^1J",766,"^E","type"]],"^1Z",[["^ ","^1I",75,"^1J",766,"^E","params"]]],"~i411",["^ ","^2=",[["^ ","^1I",0,"^1J",767],["^ ","^1I",116,"^1J",767],["^ ","^1I",159,"^1J",767],["^ ","^1I",273,"^1J",767]],"^43",[["^ ","^1I",7,"^1J",767,"^E","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic"]],"^1P",[["^ ","^1I",110,"^1J",767,"^E","state"]],"^1X",[["^ ","^1I",268,"^1J",767,"^E","type"]]],"~i412",["^ ","^1X",[["^ ","^1I",387,"^1J",767,"^E","params"]]],"~i413",["^ ","~i2",[["^ ","^1I",0,"^1J",769],["^ ","^1I",0,"^1J",769],["^ ","^1I",48,"^1J",772],["^ ","^1I",104,"^1J",772,"^E","var_args"],["^ ","^1I",0,"^1J",773],["^ ","^1I",0,"^1J",773],["^ ","^1I",4,"^1J",773,"^E","G__41049"],["^ ","^1I",15,"^1J",773],["^ ","^1I",15,"^1J",773],["^ ","^1I",0,"^1J",774],["^ ","^1I",0,"^1J",774],["^ ","^1I",8,"^1J",774,"^E","G__41049"],["^ ","^1I",5,"^1J",775],["^ ","^1I",0,"^1J",776],["^ ","^1I",7,"^1J",776,"^E","fulcro.client.impl.data-fetch/set-ready!"],["^ ","^1I",83,"^1J",776],["^ ","^1I",84,"^1J",776],["^ ","^1I",94,"^1J",776],["^ ","^1I",5,"^1J",779],["^ ","^1I",0,"^1J",780],["^ ","^1I",7,"^1J",780,"^E","fulcro.client.impl.data-fetch/set-ready!"],["^ ","^1I",83,"^1J",780],["^ ","^1I",84,"^1J",780],["^ ","^1I",94,"^1J",780],["^ ","^1I",100,"^1J",780],["^ ","^1I",101,"^1J",780],["^ ","^1I",111,"^1J",780],["^ ","^1I",0,"^1J",784],["^ ","^1I",6,"^1J",784],["^ ","^1I",11,"^1J",784,"^E","js/Error"],["^ ","^1I",17,"^1J",784],["^ ","^1I",18,"^1J",784],["^ ","^1I",80,"^1J",784],["^ ","^1I",80,"^1J",784],["^ ","^1I",0,"^1J",789],["^ ","^1I",0,"^1J",789],["^ ","^1I",78,"^1J",789],["^ ","^1I",0,"^1J",790],["^ ","^1I",0,"^1J",793],["^ ","^1I",0,"^1J",793],["^ ","^1I",78,"^1J",793],["^ ","^1I",0,"^1J",794],["^ ","^1I",0,"^1J",797],["^ ","^1I",0,"^1J",797],["^ ","^1I",72,"^1J",797],["^ ","^1I",0,"^1J",799]],"~i8",[["^ ","^1I",0,"^1J",772,"^E","fulcro.client.impl.data-fetch/set-ready!"],["^ ","^1I",0,"^1J",789,"^E","fulcro.client.impl.data-fetch/set-ready!"],["^ ","^1I",0,"^1J",793,"^E","fulcro.client.impl.data-fetch/set-ready!"],["^ ","^1I",0,"^1J",797,"^E","fulcro.client.impl.data-fetch/set-ready!"]]],"~i415",["^ ","~i6",[["^ ","^1I",89,"^1J",789,"^E","state"]],"^2C",[["^ ","^1I",0,"^1J",790],["^ ","^1I",89,"^1J",790]],"^1O",[["^ ","^1I",7,"^1J",790,"^E","fulcro.client.impl.data_fetch.set_ready_BANG_.cljs$core$IFn$_invoke$arity$2"]],"^1T",[["^ ","^1I",83,"^1J",790,"^E","state"]]],"~i416",["^ ","~i6",[["^ ","^1I",89,"^1J",793,"^E","state"]],"^2B",[["^ ","^1I",95,"^1J",793,"^E","params"]],"^1U",[["^ ","^1I",0,"^1J",794],["^ ","^1I",22,"^1J",794]],"^1Y",[["^ ","^1I",7,"^1J",794,"^E","set-type"]],"^1Z",[["^ ","^1I",16,"^1J",794,"^E","state"]],"^3B",[["^ ","^1I",77,"^1J",794,"^E","params"]]],"~i417",["^ ","~i2",[["^ ","^1I",0,"^1J",800],["^ ","^1I",0,"^1J",800],["^ ","^1I",50,"^1J",803],["^ ","^1I",108,"^1J",803,"^E","var_args"],["^ ","^1I",0,"^1J",804],["^ ","^1I",0,"^1J",804],["^ ","^1I",4,"^1J",804,"^E","G__41061"],["^ ","^1I",15,"^1J",804],["^ ","^1I",15,"^1J",804],["^ ","^1I",0,"^1J",805],["^ ","^1I",0,"^1J",805],["^ ","^1I",8,"^1J",805,"^E","G__41061"],["^ ","^1I",5,"^1J",806],["^ ","^1I",0,"^1J",807],["^ ","^1I",7,"^1J",807,"^E","fulcro.client.impl.data-fetch/set-loading!"],["^ ","^1I",85,"^1J",807],["^ ","^1I",86,"^1J",807],["^ ","^1I",96,"^1J",807],["^ ","^1I",5,"^1J",810],["^ ","^1I",0,"^1J",811],["^ ","^1I",7,"^1J",811,"^E","fulcro.client.impl.data-fetch/set-loading!"],["^ ","^1I",85,"^1J",811],["^ ","^1I",86,"^1J",811],["^ ","^1I",96,"^1J",811],["^ ","^1I",102,"^1J",811],["^ ","^1I",103,"^1J",811],["^ ","^1I",113,"^1J",811],["^ ","^1I",0,"^1J",815],["^ ","^1I",6,"^1J",815],["^ ","^1I",11,"^1J",815,"^E","js/Error"],["^ ","^1I",17,"^1J",815],["^ ","^1I",18,"^1J",815],["^ ","^1I",80,"^1J",815],["^ ","^1I",80,"^1J",815],["^ ","^1I",0,"^1J",820],["^ ","^1I",0,"^1J",820],["^ ","^1I",80,"^1J",820],["^ ","^1I",0,"^1J",821],["^ ","^1I",0,"^1J",824],["^ ","^1I",0,"^1J",824],["^ ","^1I",80,"^1J",824],["^ ","^1I",0,"^1J",825],["^ ","^1I",0,"^1J",829],["^ ","^1I",0,"^1J",829],["^ ","^1I",74,"^1J",829],["^ ","^1I",0,"^1J",831]],"~i8",[["^ ","^1I",0,"^1J",803,"^E","fulcro.client.impl.data-fetch/set-loading!"],["^ ","^1I",0,"^1J",820,"^E","fulcro.client.impl.data-fetch/set-loading!"],["^ ","^1I",0,"^1J",824,"^E","fulcro.client.impl.data-fetch/set-loading!"],["^ ","^1I",0,"^1J",829,"^E","fulcro.client.impl.data-fetch/set-loading!"]]],"~i419",["^ ","~i6",[["^ ","^1I",91,"^1J",820,"^E","state"]],"^2C",[["^ ","^1I",0,"^1J",821],["^ ","^1I",91,"^1J",821]],"^1O",[["^ ","^1I",7,"^1J",821,"^E","fulcro.client.impl.data_fetch.set_loading_BANG_.cljs$core$IFn$_invoke$arity$2"]],"^21",[["^ ","^1I",85,"^1J",821,"^E","state"]]],"~i420",["^ ","~i6",[["^ ","^1I",91,"^1J",824,"^E","state"]],"^2B",[["^ ","^1I",97,"^1J",824,"^E","params"]],"^1U",[["^ ","^1I",0,"^1J",825],["^ ","^1I",0,"^1J",826]],"^1R",[["^ ","^1I",4,"^1J",825,"^E","rv"]],"^2>",[["^ ","^1I",9,"^1J",825],["^ ","^1I",24,"^1J",825]],"^1Z",[["^ ","^1I",9,"^1J",825,"^E","set-type"]],"^2?",[["^ ","^1I",18,"^1J",825,"^E","state"]],"^2E",[["^ ","^1I",83,"^1J",825,"^E","params"]]],"~i421",["^ ","^1L",[["^ ","^1I",0,"^1J",826],["^ ","^1I",30,"^1J",826],["^ ","^1I",73,"^1J",826]],"^1V",[["^ ","^1I",7,"^1J",826,"^E","cljs.core/with-meta"]],"^1X",[["^ ","^1I",27,"^1J",826,"^E","rv"]],"^2<",[["^ ","^1I",129,"^1J",826,"^E","rv"]]],"~i422",["^ ","~i2",[["^ ","^1I",0,"^1J",832],["^ ","^1I",0,"^1J",832],["^ ","^1I",49,"^1J",835],["^ ","^1I",106,"^1J",835,"^E","var_args"],["^ ","^1I",0,"^1J",836],["^ ","^1I",0,"^1J",836],["^ ","^1I",4,"^1J",836,"^E","G__41069"],["^ ","^1I",15,"^1J",836],["^ ","^1I",15,"^1J",836],["^ ","^1I",0,"^1J",837],["^ ","^1I",0,"^1J",837],["^ ","^1I",8,"^1J",837,"^E","G__41069"],["^ ","^1I",5,"^1J",838],["^ ","^1I",0,"^1J",839],["^ ","^1I",7,"^1J",839,"^E","fulcro.client.impl.data-fetch/set-failed!"],["^ ","^1I",84,"^1J",839],["^ ","^1I",85,"^1J",839],["^ ","^1I",95,"^1J",839],["^ ","^1I",5,"^1J",842],["^ ","^1I",0,"^1J",843],["^ ","^1I",7,"^1J",843,"^E","fulcro.client.impl.data-fetch/set-failed!"],["^ ","^1I",84,"^1J",843],["^ ","^1I",85,"^1J",843],["^ ","^1I",95,"^1J",843],["^ ","^1I",101,"^1J",843],["^ ","^1I",102,"^1J",843],["^ ","^1I",112,"^1J",843],["^ ","^1I",0,"^1J",847],["^ ","^1I",6,"^1J",847],["^ ","^1I",11,"^1J",847,"^E","js/Error"],["^ ","^1I",17,"^1J",847],["^ ","^1I",18,"^1J",847],["^ ","^1I",80,"^1J",847],["^ ","^1I",80,"^1J",847],["^ ","^1I",0,"^1J",852],["^ ","^1I",0,"^1J",852],["^ ","^1I",79,"^1J",852],["^ ","^1I",0,"^1J",853],["^ ","^1I",0,"^1J",856],["^ ","^1I",0,"^1J",856],["^ ","^1I",79,"^1J",856],["^ ","^1I",0,"^1J",857],["^ ","^1I",0,"^1J",860],["^ ","^1I",0,"^1J",860],["^ ","^1I",73,"^1J",860],["^ ","^1I",0,"^1J",862]],"~i8",[["^ ","^1I",0,"^1J",835,"^E","fulcro.client.impl.data-fetch/set-failed!"],["^ ","^1I",0,"^1J",852,"^E","fulcro.client.impl.data-fetch/set-failed!"],["^ ","^1I",0,"^1J",856,"^E","fulcro.client.impl.data-fetch/set-failed!"],["^ ","^1I",0,"^1J",860,"^E","fulcro.client.impl.data-fetch/set-failed!"]]],"~i424",["^ ","~i6",[["^ ","^1I",90,"^1J",852,"^E","state"]],"^2C",[["^ ","^1I",0,"^1J",853],["^ ","^1I",90,"^1J",853]],"^1O",[["^ ","^1I",7,"^1J",853,"^E","fulcro.client.impl.data_fetch.set_failed_BANG_.cljs$core$IFn$_invoke$arity$2"]],"^1R",[["^ ","^1I",84,"^1J",853,"^E","state"]]],"~i425",["^ ","~i6",[["^ ","^1I",90,"^1J",856,"^E","state"]],"^2B",[["^ ","^1I",96,"^1J",856,"^E","params"]]],"~i426",["^ ","~i5",[["^ ","^1I",0,"^1J",857],["^ ","^1I",22,"^1J",857]],"~i6",[["^ ","^1I",7,"^1J",857,"^E","set-type"]],"^1H",[["^ ","^1I",16,"^1J",857,"^E","state"]],"^2>",[["^ ","^1I",80,"^1J",857,"^E","params"]]],"~i428",["^ ","~i0",[["^ ","^1I",0,"^1J",862],["^ ","^1I",43,"^1J",865],["^ ","^1I",0,"^1J",866]],"~i6",[["^ ","^1I",0,"^1J",865,"^E","fulcro.client.impl.data-fetch/full-query"]]],"~i430",["^ ","~i3",[["^ ","^1I",94,"^1J",865,"^E","items"]],"^2=",[["^ ","^1I",0,"^1J",866]],"^43",[["^ ","^1I",7,"^1J",866,"^E","cljs.core/vec"]],"^1H",[["^ ","^1I",21,"^1J",866]],"^1K",[["^ ","^1I",21,"^1J",866,"^E","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic"]],"^1V",[["^ ","^1I",75,"^1J",866],["^ ","^1I",0,"^1J",867]],"^26",[["^ ","^1I",86,"^1J",866,"^E","item"]],"^28",[["^ ","^1I",0,"^1J",867]],"^29",[["^ ","^1I",7,"^1J",867,"^E","fulcro.client.impl.data-fetch/data-query"]],"^22",[["^ ","^1I",48,"^1J",867,"^E","item"]],"^3P",[["^ ","^1I",53,"^1J",868,"^E","items"]]],"~i432",["^ ","~i0",[["^ ","^1I",0,"^1J",870],["^ ","^1I",57,"^1J",870],["^ ","^1I",0,"^1J",871],["^ ","^1I",0,"^1J",871]],"~i7",[["^ ","^1I",0,"^1J",870,"^E","fulcro.client.impl.data-fetch/set-global-loading!"]],"^26",[["^ ","^1I",122,"^1J",870,"^E","reconciler"]]],"~i434",["^ ","~i2",[["^ ","^1I",0,"^1J",872],["^ ","^1I",0,"^1J",874]],"~i8",[["^ ","^1I",4,"^1J",872,"^E","state-atom"]],"^1S",[["^ ","^1I",17,"^1J",872]],"^1U",[["^ ","^1I",17,"^1J",872,"^E","fulcro.client.primitives/app-state"]],"^29",[["^ ","^1I",52,"^1J",872,"^E","reconciler"]]],"~i435",["^ ","~i8",[["^ ","^1I",4,"^1J",873,"^E","loading?"]],"^1S",[["^ ","^1I",21,"^1J",873]],"^1U",[["^ ","^1I",21,"^1J",873,"^E","cljs.core/boolean"]],"^26",[["^ ","^1I",40,"^1J",873]],"^2>",[["^ ","^1I",40,"^1J",873,"^E","cljs.core/seq"]],"^1X",[["^ ","^1I",54,"^1J",873],["^ ","^1I",98,"^1J",873],["^ ","^1I",98,"^1J",873,"^E","cljs.core/deref"],["^ ","^1I",126,"^1J",873]],"^28",[["^ ","^1I",54,"^1J",873,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"]],"^2?",[["^ ","^1I",114,"^1J",873,"^E","state-atom"]]],"~i436",["^ ","~i4",[["^ ","^1I",0,"^1J",874],["^ ","^1I",85,"^1J",874]],"~i5",[["^ ","^1I",7,"^1J",874,"^E","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4"]],"^43",[["^ ","^1I",58,"^1J",874,"^E","state-atom"]],"^1L",[["^ ","^1I",69,"^1J",874,"^E","cljs.core/assoc"]],"^3=",[["^ ","^1I",158,"^1J",874,"^E","loading?"]]],"~i438",["^ ","~i0",[["^ ","^1I",0,"^1J",876],["^ ","^1I",58,"^1J",876],["^ ","^1I",0,"^1J",877]],"~i6",[["^ ","^1I",0,"^1J",876,"^E","fulcro.client.impl.data-fetch/replacement-target?"]],"^21",[["^ ","^1I",124,"^1J",876,"^E","t"]],"^1Z",[["^ ","^1I",0,"^1J",877]],"^1[",[["^ ","^1I",7,"^1J",877,"^E","fulcro.client.impl.data-targeting/replacement-target?"]],"^23",[["^ ","^1I",67,"^1J",877,"^E","t"]]],"~i439",["^ ","~i0",[["^ ","^1I",0,"^1J",879],["^ ","^1I",54,"^1J",879],["^ ","^1I",0,"^1J",880]],"~i6",[["^ ","^1I",0,"^1J",879,"^E","fulcro.client.impl.data-fetch/prepend-target?"]],"^1V",[["^ ","^1I",116,"^1J",879,"^E","t"]],"^1R",[["^ ","^1I",0,"^1J",880]],"^21",[["^ ","^1I",7,"^1J",880,"^E","fulcro.client.impl.data-targeting/prepend-target?"]],"^3P",[["^ ","^1I",63,"^1J",880,"^E","t"]]],"~i440",["^ ","~i0",[["^ ","^1I",0,"^1J",882],["^ ","^1I",53,"^1J",882],["^ ","^1I",0,"^1J",883]],"~i6",[["^ ","^1I",0,"^1J",882,"^E","fulcro.client.impl.data-fetch/append-target?"]],"^1L",[["^ ","^1I",114,"^1J",882,"^E","t"]],"^1T",[["^ ","^1I",0,"^1J",883]],"^1R",[["^ ","^1I",7,"^1J",883,"^E","fulcro.client.impl.data-targeting/append-target?"]],"^2X",[["^ ","^1I",62,"^1J",883,"^E","t"]]],"~i441",["^ ","~i0",[["^ ","^1I",0,"^1J",885],["^ ","^1I",56,"^1J",885],["^ ","^1I",0,"^1J",886]],"~i6",[["^ ","^1I",0,"^1J",885,"^E","fulcro.client.impl.data-fetch/multiple-targets?"]],"^1T",[["^ ","^1I",120,"^1J",885,"^E","t"]],"^26",[["^ ","^1I",0,"^1J",886]],"^2>",[["^ ","^1I",7,"^1J",886,"^E","fulcro.client.impl.data-targeting/multiple-targets?"]],"^2G",[["^ ","^1I",65,"^1J",886,"^E","t"]]],"~i442",["^ ","~i0",[["^ ","^1I",0,"^1J",888],["^ ","^1I",54,"^1J",888],["^ ","^1I",0,"^1J",889]],"~i6",[["^ ","^1I",0,"^1J",888,"^E","fulcro.client.impl.data-fetch/special-target?"]],"^1V",[["^ ","^1I",116,"^1J",888,"^E","t"]],"^1R",[["^ ","^1I",0,"^1J",889]],"^21",[["^ ","^1I",7,"^1J",889,"^E","fulcro.client.impl.data-targeting/special-target?"]],"^3P",[["^ ","^1I",63,"^1J",889,"^E","t"]]],"~i444",["^ ","~i0",[["^ ","^1I",0,"^1J",891]],"~i5",[["^ ","^1I",0,"^1J",891,"^E","fulcro.client.impl.data-fetch/process-target"]],"^1U",[["^ ","^1I",47,"^1J",891,"^E","fulcro.client.impl.data-targeting/process-target"]]],"~i446",["^ ","~i0",[["^ ","^1I",0,"^1J",892],["^ ","^1I",64,"^1J",895],["^ ","^1I",0,"^1J",896]],"~i6",[["^ ","^1I",0,"^1J",895,"^E","fulcro.client.impl.data-fetch/relocate-targeted-results!"]]],"~i448",["^ ","~i3",[["^ ","^1I",136,"^1J",895,"^E","state-atom"]],"^1O",[["^ ","^1I",147,"^1J",895,"^E","items"]]],"~i449",["^ ","~i2",[["^ ","^1I",0,"^1J",896]],"~i3",[["^ ","^1I",7,"^1J",896,"^E","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2"]],"~i9",[["^ ","^1I",58,"^1J",896,"^E","state-atom"]]],"~i450",["^ ","~i4",[["^ ","^1I",69,"^1J",896],["^ ","^1I",0,"^1J",897]],"~i9",[["^ ","^1I",80,"^1J",896,"^E","state-map"]]],"~i451",["^ ","~i6",[["^ ","^1I",0,"^1J",897]],"~i7",[["^ ","^1I",7,"^1J",897,"^E","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^1O",[["^ ","^1I",54,"^1J",897],["^ ","^1I",0,"^1J",898]],"^1S",[["^ ","^1I",65,"^1J",897,"^E","state"]],"^1T",[["^ ","^1I",71,"^1J",897,"^E","item"]]],"~i452",["^ ","^1K",[["^ ","^1I",0,"^1J",898],["^ ","^1I",0,"^1J",913]],"^1L",[["^ ","^1I",4,"^1J",898,"^E","default-target"]],"^2;",[["^ ","^1I",21,"^1J",898]],"^2?",[["^ ","^1I",21,"^1J",898,"^E","fulcro.client.impl.data-fetch/data-query-key"]],"^2E",[["^ ","^1I",66,"^1J",898,"^E","item"]]],"~i453",["^ ","^1L",[["^ ","^1I",4,"^1J",899,"^E","explicit-target"]],"^2;",[["^ ","^1I",22,"^1J",899],["^ ","^1I",39,"^1J",899,"^E","or__3949__auto__"],["^ ","^1I",0,"^1J",900],["^ ","^1I",0,"^1J",900],["^ ","^1I",20,"^1J",900,"^E","or__3949__auto__"],["^ ","^1I",0,"^1J",901,"^E","or__3949__auto__"],["^ ","^1I",0,"^1J",903]],"^3G",[["^ ","^1I",58,"^1J",899]],"^3B",[["^ ","^1I",58,"^1J",899,"^E","fulcro.client.impl.data-fetch/data-target"]],"^2F",[["^ ","^1I",100,"^1J",899,"^E","item"]]],"~i454",["^ ","^1L",[["^ ","^1I",4,"^1J",906,"^E","relocate?"]],"^2;",[["^ ","^1I",22,"^1J",906],["^ ","^1I",39,"^1J",906,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",907],["^ ","^1I",0,"^1J",907],["^ ","^1I",3,"^1J",907,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",910,"^E","and__3938__auto__"]]],"~i455",["^ ","^20",[["^ ","^1I",59,"^1J",906],["^ ","^1I",110,"^1J",906]],"^22",[["^ ","^1I",60,"^1J",906]],"^3E",[["^ ","^1I",60,"^1J",906,"^E","fulcro.client.impl.data-fetch/data-field"]],"^2H",[["^ ","^1I",101,"^1J",906,"^E","item"]]],"~i456",["^ ","^20",[["^ ","^1I",0,"^1J",908]],"^49",[["^ ","^1I",7,"^1J",908,"^E","cljs.core/not-empty"]],"^2X",[["^ ","^1I",27,"^1J",908,"^E","explicit-target"]]],"~i457",["^ ","^1Q",[["^ ","^1I",0,"^1J",913]],"^1L",[["^ ","^1I",20,"^1J",913,"^E","relocate?"]]],"~i458",["^ ","^1U",[["^ ","^1I",0,"^1J",914]],"^1Y",[["^ ","^1I",8,"^1J",914,"^E","fulcro.client.impl.data-fetch/process-target"],["^ ","^1I",85,"^1J",914,"^E","fulcro.client.impl.data-fetch/process-target"],["^ ","^1I",200,"^1J",914,"^E","fulcro.client.impl.data-fetch/process-target"]],"^2:",[["^ ","^1I",160,"^1J",914,"^E","state"],["^ ","^1I",255,"^1J",914,"^E","state"]],"^3G",[["^ ","^1I",166,"^1J",914,"^E","default-target"],["^ ","^1I",261,"^1J",914,"^E","default-target"]],"^2G",[["^ ","^1I",181,"^1J",914,"^E","explicit-target"],["^ ","^1I",276,"^1J",914,"^E","explicit-target"]]],"~i459",["^ ","^1U",[["^ ","^1I",0,"^1J",916,"^E","state"]],"^2>",[["^ ","^1I",3,"^1J",918,"^E","state-map"]],"^2?",[["^ ","^1I",13,"^1J",918,"^E","items"]]],"~i461",["^ ","~i0",[["^ ","^1I",0,"^1J",921],["^ ","^1I",46,"^1J",924],["^ ","^1I",0,"^1J",925]],"~i7",[["^ ","^1I",0,"^1J",924,"^E","fulcro.client.impl.data-fetch/remove-marker"]]],"~i463",["^ ","~i3",[["^ ","^1I",100,"^1J",924,"^E","app-state"]],"^2C",[["^ ","^1I",110,"^1J",924,"^E","item"]]],"~i464",["^ ","~i2",[["^ ","^1I",0,"^1J",925],["^ ","^1I",0,"^1J",927]],"~i8",[["^ ","^1I",4,"^1J",925,"^E","marker-id"]],"^1V",[["^ ","^1I",16,"^1J",925]],"^1W",[["^ ","^1I",16,"^1J",925,"^E","fulcro.client.impl.data-fetch/data-marker"]],"^2:",[["^ ","^1I",58,"^1J",925,"^E","item"]]],"~i465",["^ ","~i8",[["^ ","^1I",4,"^1J",926,"^E","legacy-marker?"]],"^1V",[["^ ","^1I",27,"^1J",926]],"^1Z",[["^ ","^1I",27,"^1J",926,"^E","marker-id"]]],"~i466",["^ ","~i4",[["^ ","^1I",0,"^1J",927]],"~i8",[["^ ","^1I",3,"^1J",927,"^E","legacy-marker?"]]],"~i467",["^ ","~i6",[["^ ","^1I",0,"^1J",928],["^ ","^1I",0,"^1J",930]],"^2B",[["^ ","^1I",4,"^1J",928,"^E","path"]],"^1P",[["^ ","^1I",11,"^1J",928]],"^1Q",[["^ ","^1I",11,"^1J",928,"^E","fulcro.client.impl.data-fetch/data-path"]],"^26",[["^ ","^1I",51,"^1J",928,"^E","item"]]],"~i468",["^ ","^2B",[["^ ","^1I",4,"^1J",929,"^E","data"]],"^1P",[["^ ","^1I",11,"^1J",929]],"^1Q",[["^ ","^1I",11,"^1J",929,"^E","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2"]],"^1T",[["^ ","^1I",58,"^1J",929,"^E","app-state"]],"^29",[["^ ","^1I",68,"^1J",929,"^E","path"]]],"~i469",["^ ","~i8",[["^ ","^1I",0,"^1J",930],["^ ","^1I",0,"^1J",933],["^ ","^1I",0,"^1J",936]]],"~i470",["^ ","^2=",[["^ ","^1I",3,"^1J",930]],"^1H",[["^ ","^1I",5,"^1J",930]],"^1K",[["^ ","^1I",5,"^1J",930,"^E","cljs.core/map?"]],"^1Y",[["^ ","^1I",26,"^1J",930,"^E","data"]],"^21",[["^ ","^1I",37,"^1J",930],["^ ","^1I",82,"^1J",930],["^ ","^1I",163,"^1J",930]],"^26",[["^ ","^1I",37,"^1J",930,"^E","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^1N",[["^ ","^1I",253,"^1J",930]],"^2A",[["^ ","^1I",253,"^1J",930,"^E","cljs.core/set"]],"^2E",[["^ ","^1I",267,"^1J",930]],"^2F",[["^ ","^1I",267,"^1J",930,"^E","cljs.core/keys"]],"^2I",[["^ ","^1I",282,"^1J",930,"^E","data"]],"^66",[["^ ","^1I",0,"^1J",931],["^ ","^1I",41,"^1J",931]],"^2O",[["^ ","^1I",7,"^1J",931,"^E","cljs.core/assoc-in"]],"^2W",[["^ ","^1I",26,"^1J",931,"^E","app-state"]],"^7W",[["^ ","^1I",36,"^1J",931,"^E","path"]]],"~i471",["^ ","^2=",[["^ ","^1I",3,"^1J",933]],"^1H",[["^ ","^1I",5,"^1J",933]],"^1K",[["^ ","^1I",5,"^1J",933,"^E","cljs.core/map?"]],"^1Y",[["^ ","^1I",26,"^1J",933,"^E","data"]],"^21",[["^ ","^1I",37,"^1J",933],["^ ","^1I",68,"^1J",933]],"^26",[["^ ","^1I",37,"^1J",933,"^E","cljs.core/contains?"]],"^2;",[["^ ","^1I",63,"^1J",933,"^E","data"]],"^23",[["^ ","^1I",0,"^1J",934],["^ ","^1I",89,"^1J",934]],"^2J",[["^ ","^1I",7,"^1J",934,"^E","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4"]],"^24",[["^ ","^1I",57,"^1J",934,"^E","app-state"]],"^4T",[["^ ","^1I",67,"^1J",934,"^E","path"]],"^32",[["^ ","^1I",72,"^1J",934,"^E","cljs.core/dissoc"]]],"~i472",["^ ","^1K",[["^ ","^1I",0,"^1J",936],["^ ","^1I",41,"^1J",936]],"^1P",[["^ ","^1I",7,"^1J",936,"^E","cljs.core/assoc-in"]],"^1R",[["^ ","^1I",26,"^1J",936,"^E","app-state"]],"^2:",[["^ ","^1I",36,"^1J",936,"^E","path"]]],"~i473",["^ ","~i6",[["^ ","^1I",0,"^1J",941]],"~i7",[["^ ","^1I",7,"^1J",941,"^E","cljs.core.update.cljs$core$IFn$_invoke$arity$4"]],"^1O",[["^ ","^1I",54,"^1J",941,"^E","app-state"]],"^1W",[["^ ","^1I",64,"^1J",941,"^E","fulcro.client.impl.data-fetch/marker-table"]],"^1M",[["^ ","^1I",107,"^1J",941,"^E","cljs.core/dissoc"]],"^2<",[["^ ","^1I",124,"^1J",941,"^E","marker-id"]]],"~i475",["^ ","~i0",[["^ ","^1I",0,"^1J",944],["^ ","^1I",45,"^1J",947],["^ ","^1I",0,"^1J",948]],"~i6",[["^ ","^1I",0,"^1J",947,"^E","fulcro.client.impl.data-fetch/callback-env"]]],"~i477",["^ ","~i3",[["^ ","^1I",98,"^1J",947,"^E","reconciler"]],"^1O",[["^ ","^1I",109,"^1J",947,"^E","load-request"]],"^21",[["^ ","^1I",122,"^1J",947,"^E","original-env"]]],"~i478",["^ ","~i2",[["^ ","^1I",0,"^1J",948],["^ ","^1I",4,"^1J",949,"^E","map__41165"],["^ ","^1I",4,"^1J",950,"^E","map__41165"],["^ ","^1I",21,"^1J",950],["^ ","^1I",23,"^1J",950],["^ ","^1I",25,"^1J",950],["^ ","^1I",27,"^1J",950],["^ ","^1I",28,"^1J",950,"^E","map__41165"],["^ ","^1I",42,"^1J",950],["^ ","^1I",50,"^1J",950],["^ ","^1I",52,"^1J",950],["^ ","^1I",54,"^1J",950],["^ ","^1I",55,"^1J",950],["^ ","^1I",55,"^1J",950,"^E","map__41165"],["^ ","^1I",104,"^1J",950],["^ ","^1I",115,"^1J",950],["^ ","^1I",116,"^1J",950,"^E","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1I",148,"^1J",950],["^ ","^1I",148,"^1J",950,"^E","map__41165"],["^ ","^1I",179,"^1J",950],["^ ","^1I",184,"^1J",950],["^ ","^1I",191,"^1J",950],["^ ","^1I",199,"^1J",950],["^ ","^1I",199,"^1J",950,"^E","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",245,"^1J",950,"^E","cljs.core/hash-map"],["^ ","^1I",264,"^1J",950,"^E","map__41165"],["^ ","^1I",276,"^1J",950,"^E","map__41165"],["^ ","^1I",4,"^1J",951,"^E","parallel"],["^ ","^1I",15,"^1J",951],["^ ","^1I",15,"^1J",951,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",59,"^1J",951,"^E","map__41165"],["^ ","^1I",74,"^1J",951],["^ ","^1I",4,"^1J",952,"^E","target"],["^ ","^1I",13,"^1J",952],["^ ","^1I",13,"^1J",952,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",57,"^1J",952,"^E","map__41165"],["^ ","^1I",72,"^1J",952],["^ ","^1I",4,"^1J",953,"^E","ident"],["^ ","^1I",12,"^1J",953],["^ ","^1I",12,"^1J",953,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",56,"^1J",953,"^E","map__41165"],["^ ","^1I",71,"^1J",953],["^ ","^1I",4,"^1J",954,"^E","remote"],["^ ","^1I",13,"^1J",954],["^ ","^1I",13,"^1J",954,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",57,"^1J",954,"^E","map__41165"],["^ ","^1I",72,"^1J",954],["^ ","^1I",4,"^1J",955,"^E","query"],["^ ","^1I",12,"^1J",955],["^ ","^1I",12,"^1J",955,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",56,"^1J",955,"^E","map__41165"],["^ ","^1I",71,"^1J",955],["^ ","^1I",4,"^1J",956,"^E","refresh"],["^ ","^1I",14,"^1J",956],["^ ","^1I",14,"^1J",956,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",58,"^1J",956,"^E","map__41165"],["^ ","^1I",73,"^1J",956],["^ ","^1I",4,"^1J",957,"^E","post-mutation-params"],["^ ","^1I",27,"^1J",957],["^ ","^1I",27,"^1J",957,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",71,"^1J",957,"^E","map__41165"],["^ ","^1I",86,"^1J",957],["^ ","^1I",4,"^1J",958,"^E","fallback"],["^ ","^1I",15,"^1J",958],["^ ","^1I",15,"^1J",958,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",59,"^1J",958,"^E","map__41165"],["^ ","^1I",74,"^1J",958],["^ ","^1I",4,"^1J",959,"^E","marker"],["^ ","^1I",13,"^1J",959],["^ ","^1I",13,"^1J",959,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",57,"^1J",959,"^E","map__41165"],["^ ","^1I",72,"^1J",959],["^ ","^1I",4,"^1J",960,"^E","post-mutation"],["^ ","^1I",20,"^1J",960],["^ ","^1I",20,"^1J",960,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",64,"^1J",960,"^E","map__41165"],["^ ","^1I",79,"^1J",960],["^ ","^1I",4,"^1J",961,"^E","field"],["^ ","^1I",12,"^1J",961],["^ ","^1I",12,"^1J",961,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",56,"^1J",961,"^E","map__41165"],["^ ","^1I",71,"^1J",961],["^ ","^1I",0,"^1J",962]],"~i8",[["^ ","^1I",4,"^1J",948,"^E","state"]],"^1O",[["^ ","^1I",12,"^1J",948]],"^1H",[["^ ","^1I",12,"^1J",948,"^E","fulcro.client.primitives/app-state"]],"^1Z",[["^ ","^1I",47,"^1J",948,"^E","reconciler"]]],"~i479",["^ ","~i155",[["^ ","^1I",17,"^1J",949,"^E","load-request"]]],"~i480",["^ ","~i4",[["^ ","^1I",0,"^1J",962],["^ ","^1I",123,"^1J",962],["^ ","^1I",166,"^1J",962],["^ ","^1I",228,"^1J",962]],"~i5",[["^ ","^1I",7,"^1J",962,"^E","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic"]],"^43",[["^ ","^1I",110,"^1J",962,"^E","original-env"]]],"~i481",["^ ","^1O",[["^ ","^1I",222,"^1J",962,"^E","state"]]],"~i483",["^ ","^1O",[["^ ","^1I",296,"^1J",962],["^ ","^1I",313,"^1J",962,"^E","G__41173"],["^ ","^1I",324,"^1J",962],["^ ","^1I",367,"^1J",962],["^ ","^1I",430,"^1J",962],["^ ","^1I",495,"^1J",962],["^ ","^1I",558,"^1J",962],["^ ","^1I",633,"^1J",962],["^ ","^1I",4,"^1J",963,"^E","G__41173"],["^ ","^1I",19,"^1J",963],["^ ","^1I",194,"^1J",963,"^E","G__41173"],["^ ","^1I",4,"^1J",964,"^E","G__41173"],["^ ","^1I",19,"^1J",964],["^ ","^1I",225,"^1J",964,"^E","G__41173"],["^ ","^1I",4,"^1J",965,"^E","G__41173"],["^ ","^1I",19,"^1J",965],["^ ","^1I",173,"^1J",965,"^E","G__41173"],["^ ","^1I",0,"^1J",966],["^ ","^1I",0,"^1J",966],["^ ","^1I",0,"^1J",969,"^E","G__41173"]],"^1[",[["^ ","^1I",423,"^1J",962,"^E","target"]],"^22",[["^ ","^1I",488,"^1J",962,"^E","remote"]],"^23",[["^ ","^1I",551,"^1J",962,"^E","marker"]],"^4T",[["^ ","^1I",627,"^1J",962,"^E","query"]],"^39",[["^ ","^1I",695,"^1J",962]],"^4H",[["^ ","^1I",695,"^1J",962,"^E","cljs.core/boolean"]],"^4U",[["^ ","^1I",714,"^1J",962,"^E","parallel"]]],"~i484",["^ ","^1K",[["^ ","^1I",37,"^1J",963,"^E","post-mutation"]],"^1Z",[["^ ","^1I",52,"^1J",963],["^ ","^1I",98,"^1J",963,"^E","G__41173"],["^ ","^1I",107,"^1J",963]],"^1[",[["^ ","^1I",52,"^1J",963,"^E","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3"]],"^2D",[["^ ","^1I",179,"^1J",963,"^E","post-mutation"]]],"~i485",["^ ","^1K",[["^ ","^1I",37,"^1J",964,"^E","post-mutation-params"]],"^1M",[["^ ","^1I",59,"^1J",964],["^ ","^1I",105,"^1J",964,"^E","G__41173"],["^ ","^1I",118,"^1J",964]],"^2;",[["^ ","^1I",59,"^1J",964,"^E","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3"]],"^3@",[["^ ","^1I",203,"^1J",964,"^E","post-mutation-params"]]],"~i486",["^ ","^1K",[["^ ","^1I",37,"^1J",965,"^E","refresh"]],"^1W",[["^ ","^1I",46,"^1J",965],["^ ","^1I",92,"^1J",965,"^E","G__41173"],["^ ","^1I",105,"^1J",965]],"^1T",[["^ ","^1I",46,"^1J",965,"^E","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3"]],"^20",[["^ ","^1I",164,"^1J",965,"^E","refresh"]]],"~i487",["^ ","^1K",[["^ ","^1I",20,"^1J",966,"^E","fallback"]],"^1T",[["^ ","^1I",0,"^1J",967],["^ ","^1I",53,"^1J",967,"^E","G__41173"],["^ ","^1I",66,"^1J",967]],"^1R",[["^ ","^1I",7,"^1J",967,"^E","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3"]],"^3G",[["^ ","^1I",126,"^1J",967,"^E","fallback"]]],"~i489",["^ ","~i0",[["^ ","^1I",0,"^1J",973],["^ ","^1I",43,"^1J",976],["^ ","^1I",0,"^1J",977]],"~i7",[["^ ","^1I",0,"^1J",976,"^E","fulcro.client.impl.data-fetch/tick!"]]],"~i490",["^ ","~i3",[["^ ","^1I",94,"^1J",976,"^E","r"]]],"~i491",["^ ","~i2",[["^ ","^1I",0,"^1J",977]],"~i3",[["^ ","^1I",7,"^1J",977,"^E","fulcro.client.impl.protocols/tick!"]],"^43",[["^ ","^1I",47,"^1J",977,"^E","r"]]],"~i493",["^ ","~i0",[["^ ","^1I",0,"^1J",979],["^ ","^1I",48,"^1J",992],["^ ","^1I",0,"^1J",993]],"~i7",[["^ ","^1I",0,"^1J",992,"^E","fulcro.client.impl.data-fetch/loaded-callback"]]],"~i505",["^ ","~i3",[["^ ","^1I",104,"^1J",992,"^E","reconciler"]]],"~i506",["^ ","~i2",[["^ ","^1I",0,"^1J",993],["^ ","^1I",0,"^1J",994]],"~i7",[["^ ","^1I",18,"^1J",993,"^E","response"]],"^1K",[["^ ","^1I",27,"^1J",993,"^E","items"]]],"~i507",["^ ","~i4",[["^ ","^1I",0,"^1J",994],["^ ","^1I",0,"^1J",1216]],"^2=",[["^ ","^1I",4,"^1J",994,"^E","query"]],"^1Z",[["^ ","^1I",12,"^1J",994]],"^1[",[["^ ","^1I",12,"^1J",994,"^E","fulcro.client.impl.data-fetch/full-query"]],"^3G",[["^ ","^1I",53,"^1J",994,"^E","items"]]],"~i508",["^ ","^2=",[["^ ","^1I",4,"^1J",995,"^E","base-merge"]],"^1Z",[["^ ","^1I",17,"^1J",995],["^ ","^1I",1,"^1J",1005]],"^1[",[["^ ","^1I",17,"^1J",995,"^E","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^2;",[["^ ","^1I",64,"^1J",995],["^ ","^1I",0,"^1J",997]],"^3B",[["^ ","^1I",18,"^1J",996,"^E","initial-state"]],"^2G",[["^ ","^1I",32,"^1J",996,"^E","item"]]],"~i509",["^ ","^20",[["^ ","^1I",0,"^1J",997],["^ ","^1I",4,"^1J",997,"^E","temp__5455__auto__"],["^ ","^1I",0,"^1J",998],["^ ","^1I",0,"^1J",998],["^ ","^1I",20,"^1J",998,"^E","temp__5455__auto__"],["^ ","^1I",0,"^1J",999],["^ ","^1I",16,"^1J",999,"^E","temp__5455__auto__"],["^ ","^1I",0,"^1J",1000]],"^1N",[["^ ","^1I",4,"^1J",999,"^E","item-tree"]],"^31",[["^ ","^1I",25,"^1J",997],["^ ","^1I",25,"^1J",997]],"^2Q",[["^ ","^1I",178,"^1J",997,"^E","item"]]],"~i510",["^ ","^3G",[["^ ","^1I",0,"^1J",1000]],"^3B",[["^ ","^1I",7,"^1J",1000,"^E","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic"]],"^1N",[["^ ","^1I",110,"^1J",1000,"^E","initial-state"]],"^2K",[["^ ","^1I",124,"^1J",1000,"^E","item-tree"]]],"~i511",["^ ","^3G",[["^ ","^1I",0,"^1J",1002,"^E","initial-state"]],"^23",[["^ ","^1I",36,"^1J",1005,"^E","items"]]],"~i512",["^ ","^2=",[["^ ","^1I",4,"^1J",1006,"^E","response"]],"^1Z",[["^ ","^1I",19,"^1J",1006]],"^1[",[["^ ","^1I",19,"^1J",1006,"^E","fulcro.util.deep_merge.cljs$core$IFn$_invoke$arity$variadic"]],"^3E",[["^ ","^1I",129,"^1J",1006,"^E","base-merge"]],"^2H",[["^ ","^1I",140,"^1J",1006,"^E","response"]]],"~i513",["^ ","^2=",[["^ ","^1I",4,"^1J",1007,"^E","loading-items"]],"^1Z",[["^ ","^1I",20,"^1J",1007],["^ ","^1I",65,"^1J",1007]],"^1[",[["^ ","^1I",20,"^1J",1007,"^E","cljs.core.into.cljs$core$IFn$_invoke$arity$2"]],"^20",[["^ ","^1I",99,"^1J",1007]],"^49",[["^ ","^1I",99,"^1J",1007,"^E","cljs.core.map.cljs$core$IFn$_invoke$arity$2"]],"^3=",[["^ ","^1I",143,"^1J",1007,"^E","fulcro.client.impl.data-fetch/set-loading!"]],"^2H",[["^ ","^1I",191,"^1J",1007,"^E","items"]]],"~i514",["^ ","^2=",[["^ ","^1I",4,"^1J",1008,"^E","refresh-set"]],"^1Z",[["^ ","^1I",18,"^1J",1008],["^ ","^1I",63,"^1J",1008],["^ ","^1I",110,"^1J",1008],["^ ","^1I",223,"^1J",1008]],"^1[",[["^ ","^1I",18,"^1J",1008,"^E","cljs.core.into.cljs$core$IFn$_invoke$arity$2"]],"^2P",[["^ ","^1I",180,"^1J",1008,"^E","fulcro.client.impl.data-fetch/marker-table"]],"^2[",[["^ ","^1I",298,"^1J",1008]],"^30",[["^ ","^1I",298,"^1J",1008,"^E","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic"]],"~i93",[["^ ","^1I",352,"^1J",1008,"^E","fulcro.client.impl.data-fetch/data-refresh"]],"~i106",[["^ ","^1I",445,"^1J",1008,"^E","items"]]],"~i515",["^ ","^2=",[["^ ","^1I",4,"^1J",1009,"^E","marked-response"]],"^1Z",[["^ ","^1I",22,"^1J",1009]],"^1[",[["^ ","^1I",22,"^1J",1009,"^E","fulcro.client.primitives/mark-missing"]],"^1N",[["^ ","^1I",60,"^1J",1009,"^E","response"]],"^2H",[["^ ","^1I",73,"^1J",1009,"^E","query"]]],"~i516",["^ ","^2=",[["^ ","^1I",4,"^1J",1010,"^E","explicit-refresh"]],"^1Z",[["^ ","^1I",23,"^1J",1010]],"^1[",[["^ ","^1I",23,"^1J",1010,"^E","cljs.core.into.cljs$core$IFn$_invoke$arity$3"]],"^2:",[["^ ","^1I",68,"^1J",1010]],"^1M",[["^ ","^1I",68,"^1J",1010,"^E","cljs.core/vec"]],"^49",[["^ ","^1I",82,"^1J",1010,"^E","refresh-set"]],"^2E",[["^ ","^1I",95,"^1J",1010]],"^2F",[["^ ","^1I",95,"^1J",1010,"^E","cljs.core.remove.cljs$core$IFn$_invoke$arity$1"]],"^2J",[["^ ","^1I",142,"^1J",1010,"^E","cljs.core/symbol?"]],"^2P",[["^ ","^1I",167,"^1J",1010]],"^24",[["^ ","^1I",167,"^1J",1010,"^E","cljs.core/keys"]],"^2U",[["^ ","^1I",182,"^1J",1010,"^E","marked-response"]]],"~i517",["^ ","^2=",[["^ ","^1I",4,"^1J",1011,"^E","app-state"]],"^1Z",[["^ ","^1I",16,"^1J",1011]],"^1[",[["^ ","^1I",16,"^1J",1011,"^E","fulcro.client.primitives/app-state"]],"^22",[["^ ","^1I",51,"^1J",1011,"^E","reconciler"]]],"~i518",["^ ","^2=",[["^ ","^1I",4,"^1J",1012,"^E","ran-mutations"]],"^1Z",[["^ ","^1I",20,"^1J",1012],["^ ","^1I",65,"^1J",1012]],"^1[",[["^ ","^1I",20,"^1J",1012,"^E","cljs.core.atom.cljs$core$IFn$_invoke$arity$1"]]],"~i519",["^ ","^2=",[["^ ","^1I",4,"^1J",1013,"^E","remove-markers!"]],"^1Z",[["^ ","^1I",27,"^1J",1013],["^ ","^1I",0,"^1J",1015]],"^1M",[["^ ","^1I",0,"^1J",1015],["^ ","^1I",4,"^1J",1015,"^E","seq__41191"],["^ ","^1I",17,"^1J",1015],["^ ","^1I",17,"^1J",1015,"^E","cljs.core/seq"],["^ ","^1I",4,"^1J",1016,"^E","chunk__41192"],["^ ","^1I",19,"^1J",1016],["^ ","^1I",4,"^1J",1017,"^E","count__41193"],["^ ","^1I",19,"^1J",1017],["^ ","^1I",4,"^1J",1018,"^E","i__41194"],["^ ","^1I",15,"^1J",1018],["^ ","^1I",0,"^1J",1020],["^ ","^1I",0,"^1J",1020],["^ ","^1I",3,"^1J",1020],["^ ","^1I",3,"^1J",1020],["^ ","^1I",4,"^1J",1020,"^E","i__41194"],["^ ","^1I",15,"^1J",1020,"^E","count__41193"],["^ ","^1I",0,"^1J",1021],["^ ","^1I",11,"^1J",1021],["^ ","^1I",11,"^1J",1021,"^E","chunk__41192"],["^ ","^1I",61,"^1J",1021,"^E","i__41194"],["^ ","^1I",0,"^1J",1022],["^ ","^1I",0,"^1J",1022],["^ ","^1I",0,"^1J",1035],["^ ","^1I",0,"^1J",1036],["^ ","^1I",15,"^1J",1036,"^E","seq__41191"],["^ ","^1I",15,"^1J",1037,"^E","chunk__41192"],["^ ","^1I",15,"^1J",1038,"^E","count__41193"],["^ ","^1I",15,"^1J",1039],["^ ","^1I",16,"^1J",1039,"^E","i__41194"],["^ ","^1I",27,"^1J",1039],["^ ","^1I",0,"^1J",1046],["^ ","^1I",4,"^1J",1046,"^E","temp__5457__auto__"],["^ ","^1I",25,"^1J",1046],["^ ","^1I",25,"^1J",1046,"^E","cljs.core/seq"],["^ ","^1I",39,"^1J",1046,"^E","seq__41191"],["^ ","^1I",0,"^1J",1047],["^ ","^1I",0,"^1J",1047],["^ ","^1I",3,"^1J",1047,"^E","temp__5457__auto__"],["^ ","^1I",0,"^1J",1048],["^ ","^1I",0,"^1J",1048],["^ ","^1I",4,"^1J",1048,"^E","seq__41191"],["^ ","^1I",21,"^1J",1048,"^E","temp__5457__auto__"],["^ ","^1I",0,"^1J",1049],["^ ","^1I",0,"^1J",1049],["^ ","^1I",3,"^1J",1049],["^ ","^1I",3,"^1J",1049,"^E","cljs.core/chunked-seq?"],["^ ","^1I",32,"^1J",1049,"^E","seq__41191"],["^ ","^1I",0,"^1J",1050],["^ ","^1I",4,"^1J",1050,"^E","c__4351__auto__"],["^ ","^1I",22,"^1J",1050],["^ ","^1I",22,"^1J",1050,"^E","cljs.core/chunk-first"],["^ ","^1I",44,"^1J",1050,"^E","seq__41191"],["^ ","^1I",0,"^1J",1051],["^ ","^1I",0,"^1J",1051],["^ ","^1I",15,"^1J",1051],["^ ","^1I",15,"^1J",1051,"^E","cljs.core/chunk-rest"],["^ ","^1I",36,"^1J",1051,"^E","seq__41191"],["^ ","^1I",15,"^1J",1052,"^E","c__4351__auto__"],["^ ","^1I",15,"^1J",1053],["^ ","^1I",15,"^1J",1053,"^E","cljs.core/count"],["^ ","^1I",31,"^1J",1053,"^E","c__4351__auto__"],["^ ","^1I",15,"^1J",1054],["^ ","^1I",0,"^1J",1061],["^ ","^1I",11,"^1J",1061],["^ ","^1I",11,"^1J",1061,"^E","cljs.core/first"],["^ ","^1I",27,"^1J",1061,"^E","seq__41191"],["^ ","^1I",0,"^1J",1062],["^ ","^1I",0,"^1J",1062],["^ ","^1I",0,"^1J",1075],["^ ","^1I",0,"^1J",1076],["^ ","^1I",15,"^1J",1076],["^ ","^1I",15,"^1J",1076,"^E","cljs.core/next"],["^ ","^1I",30,"^1J",1076,"^E","seq__41191"],["^ ","^1I",15,"^1J",1077],["^ ","^1I",15,"^1J",1078],["^ ","^1I",15,"^1J",1079],["^ ","^1I",0,"^1J",1087]],"^3=",[["^ ","^1I",4,"^1J",1021,"^E","item"],["^ ","^1I",4,"^1J",1061,"^E","item"]],"^2A",[["^ ","^1I",31,"^1J",1015,"^E","loading-items"]]],"~i520",["^ ","^2?",[["^ ","^1I",0,"^1J",1022],["^ ","^1I",0,"^1J",1062]],"^20",[["^ ","^1I",0,"^1J",1022,"^E","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",0,"^1J",1062,"^E","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2"]],"^22",[["^ ","^1I",51,"^1J",1022,"^E","app-state"],["^ ","^1I",51,"^1J",1062,"^E","app-state"]],"^4Q",[["^ ","^1I",61,"^1J",1022],["^ ","^1I",0,"^1J",1024],["^ ","^1I",61,"^1J",1062],["^ ","^1I",0,"^1J",1064]],"^23",[["^ ","^1I",18,"^1J",1023,"^E","s"],["^ ","^1I",18,"^1J",1063,"^E","s"]]],"~i521",["^ ","^2H",[["^ ","^1I",0,"^1J",1024],["^ ","^1I",4,"^1J",1024,"^E","G__41196"],["^ ","^1I",4,"^1J",1025,"^E","G__41196"],["^ ","^1I",19,"^1J",1025],["^ ","^1I",0,"^1J",1027],["^ ","^1I",0,"^1J",1027],["^ ","^1I",0,"^1J",1030,"^E","G__41196"],["^ ","^1I",0,"^1J",1064],["^ ","^1I",4,"^1J",1064,"^E","G__41201"],["^ ","^1I",4,"^1J",1065,"^E","G__41201"],["^ ","^1I",19,"^1J",1065],["^ ","^1I",0,"^1J",1067],["^ ","^1I",0,"^1J",1067],["^ ","^1I",0,"^1J",1070,"^E","G__41201"]],"^3@",[["^ ","^1I",15,"^1J",1024,"^E","s"],["^ ","^1I",15,"^1J",1064,"^E","s"]]],"~i522",["^ ","^64",[["^ ","^1I",19,"^1J",1025],["^ ","^1I",66,"^1J",1025,"^E","G__41196"],["^ ","^1I",75,"^1J",1025],["^ ","^1I",19,"^1J",1065],["^ ","^1I",66,"^1J",1065,"^E","G__41201"],["^ ","^1I",75,"^1J",1065]],"^66",[["^ ","^1I",19,"^1J",1025,"^E","cljs.core.update.cljs$core$IFn$_invoke$arity$4"],["^ ","^1I",19,"^1J",1065,"^E","cljs.core.update.cljs$core$IFn$_invoke$arity$4"]],"~i102",[["^ ","^1I",166,"^1J",1025,"^E","cljs.core/disj"],["^ ","^1I",166,"^1J",1065,"^E","cljs.core/disj"]],"^4U",[["^ ","^1I",181,"^1J",1025],["^ ","^1I",181,"^1J",1065]],"^7Y",[["^ ","^1I",181,"^1J",1025,"^E","fulcro.client.impl.data-fetch/data-uuid"],["^ ","^1I",181,"^1J",1065,"^E","fulcro.client.impl.data-fetch/data-uuid"]],"^3C",[["^ ","^1I",221,"^1J",1025,"^E","item"],["^ ","^1I",221,"^1J",1065,"^E","item"]]],"~i523",["^ ","^2I",[["^ ","^1I",20,"^1J",1027],["^ ","^1I",20,"^1J",1067]],"^23",[["^ ","^1I",20,"^1J",1027,"^E","fulcro.client.impl.data-fetch/data-marker?"],["^ ","^1I",20,"^1J",1067,"^E","fulcro.client.impl.data-fetch/data-marker?"]],"^2R",[["^ ","^1I",69,"^1J",1027,"^E","item"],["^ ","^1I",69,"^1J",1067,"^E","item"]],"^60",[["^ ","^1I",0,"^1J",1028],["^ ","^1I",51,"^1J",1028,"^E","G__41196"],["^ ","^1I",0,"^1J",1068],["^ ","^1I",51,"^1J",1068,"^E","G__41201"]],"^2Y",[["^ ","^1I",7,"^1J",1028,"^E","fulcro.client.impl.data-fetch/remove-marker"],["^ ","^1I",7,"^1J",1068,"^E","fulcro.client.impl.data-fetch/remove-marker"]],"^6:",[["^ ","^1I",64,"^1J",1028,"^E","item"],["^ ","^1I",64,"^1J",1068,"^E","item"]]],"~i524",["^ ","^2=",[["^ ","^1I",4,"^1J",1094,"^E","to-refresh"]],"^1Z",[["^ ","^1I",17,"^1J",1094]],"^1[",[["^ ","^1I",17,"^1J",1094,"^E","cljs.core.atom.cljs$core$IFn$_invoke$arity$1"]],"^2:",[["^ ","^1I",62,"^1J",1094]],"^1M",[["^ ","^1I",62,"^1J",1094,"^E","cljs.core/set"]],"^49",[["^ ","^1I",76,"^1J",1094,"^E","explicit-refresh"]]],"~i525",["^ ","^2=",[["^ ","^1I",4,"^1J",1095,"^E","run-post-mutations!"]],"^1Z",[["^ ","^1I",31,"^1J",1095],["^ ","^1I",0,"^1J",1097]],"^1M",[["^ ","^1I",0,"^1J",1097],["^ ","^1I",4,"^1J",1097,"^E","seq__41204"],["^ ","^1I",17,"^1J",1097],["^ ","^1I",17,"^1J",1097,"^E","cljs.core/seq"],["^ ","^1I",4,"^1J",1098,"^E","chunk__41205"],["^ ","^1I",19,"^1J",1098],["^ ","^1I",4,"^1J",1099,"^E","count__41206"],["^ ","^1I",19,"^1J",1099],["^ ","^1I",4,"^1J",1100,"^E","i__41207"],["^ ","^1I",15,"^1J",1100],["^ ","^1I",0,"^1J",1102],["^ ","^1I",0,"^1J",1102],["^ ","^1I",3,"^1J",1102],["^ ","^1I",3,"^1J",1102],["^ ","^1I",4,"^1J",1102,"^E","i__41207"],["^ ","^1I",15,"^1J",1102,"^E","count__41206"],["^ ","^1I",0,"^1J",1103],["^ ","^1I",11,"^1J",1103],["^ ","^1I",11,"^1J",1103,"^E","chunk__41205"],["^ ","^1I",61,"^1J",1103,"^E","i__41207"],["^ ","^1I",0,"^1J",1104],["^ ","^1I",0,"^1J",1104],["^ ","^1I",0,"^1J",1137],["^ ","^1I",0,"^1J",1138],["^ ","^1I",15,"^1J",1138,"^E","seq__41204"],["^ ","^1I",15,"^1J",1139,"^E","chunk__41205"],["^ ","^1I",15,"^1J",1140,"^E","count__41206"],["^ ","^1I",15,"^1J",1141],["^ ","^1I",16,"^1J",1141,"^E","i__41207"],["^ ","^1I",27,"^1J",1141],["^ ","^1I",0,"^1J",1148],["^ ","^1I",4,"^1J",1148,"^E","temp__5457__auto__"],["^ ","^1I",25,"^1J",1148],["^ ","^1I",25,"^1J",1148,"^E","cljs.core/seq"],["^ ","^1I",39,"^1J",1148,"^E","seq__41204"],["^ ","^1I",0,"^1J",1149],["^ ","^1I",0,"^1J",1149],["^ ","^1I",3,"^1J",1149,"^E","temp__5457__auto__"],["^ ","^1I",0,"^1J",1150],["^ ","^1I",0,"^1J",1150],["^ ","^1I",4,"^1J",1150,"^E","seq__41204"],["^ ","^1I",21,"^1J",1150,"^E","temp__5457__auto__"],["^ ","^1I",0,"^1J",1151],["^ ","^1I",0,"^1J",1151],["^ ","^1I",3,"^1J",1151],["^ ","^1I",3,"^1J",1151,"^E","cljs.core/chunked-seq?"],["^ ","^1I",32,"^1J",1151,"^E","seq__41204"],["^ ","^1I",0,"^1J",1152],["^ ","^1I",4,"^1J",1152,"^E","c__4351__auto__"],["^ ","^1I",22,"^1J",1152],["^ ","^1I",22,"^1J",1152,"^E","cljs.core/chunk-first"],["^ ","^1I",44,"^1J",1152,"^E","seq__41204"],["^ ","^1I",0,"^1J",1153],["^ ","^1I",0,"^1J",1153],["^ ","^1I",15,"^1J",1153],["^ ","^1I",15,"^1J",1153,"^E","cljs.core/chunk-rest"],["^ ","^1I",36,"^1J",1153,"^E","seq__41204"],["^ ","^1I",15,"^1J",1154,"^E","c__4351__auto__"],["^ ","^1I",15,"^1J",1155],["^ ","^1I",15,"^1J",1155,"^E","cljs.core/count"],["^ ","^1I",31,"^1J",1155,"^E","c__4351__auto__"],["^ ","^1I",15,"^1J",1156],["^ ","^1I",0,"^1J",1163],["^ ","^1I",11,"^1J",1163],["^ ","^1I",11,"^1J",1163,"^E","cljs.core/first"],["^ ","^1I",27,"^1J",1163,"^E","seq__41204"],["^ ","^1I",0,"^1J",1164],["^ ","^1I",0,"^1J",1164],["^ ","^1I",0,"^1J",1197],["^ ","^1I",0,"^1J",1198],["^ ","^1I",15,"^1J",1198],["^ ","^1I",15,"^1J",1198,"^E","cljs.core/next"],["^ ","^1I",30,"^1J",1198,"^E","seq__41204"],["^ ","^1I",15,"^1J",1199],["^ ","^1I",15,"^1J",1200],["^ ","^1I",15,"^1J",1201],["^ ","^1I",0,"^1J",1209]],"^3=",[["^ ","^1I",4,"^1J",1103,"^E","item"],["^ ","^1I",4,"^1J",1163,"^E","item"]],"^2A",[["^ ","^1I",31,"^1J",1097,"^E","loading-items"]]],"~i526",["^ ","^2?",[["^ ","^1I",0,"^1J",1104],["^ ","^1I",4,"^1J",1104,"^E","temp__5457__auto__"],["^ ","^1I",0,"^1J",1105],["^ ","^1I",0,"^1J",1105],["^ ","^1I",20,"^1J",1105,"^E","temp__5457__auto__"],["^ ","^1I",0,"^1J",1106],["^ ","^1I",0,"^1J",1106],["^ ","^1I",28,"^1J",1106,"^E","temp__5457__auto__"],["^ ","^1I",0,"^1J",1107],["^ ","^1I",0,"^1J",1135],["^ ","^1I",0,"^1J",1164],["^ ","^1I",4,"^1J",1164,"^E","temp__5457__auto__"],["^ ","^1I",0,"^1J",1165],["^ ","^1I",0,"^1J",1165],["^ ","^1I",20,"^1J",1165,"^E","temp__5457__auto__"],["^ ","^1I",0,"^1J",1166],["^ ","^1I",0,"^1J",1166],["^ ","^1I",28,"^1J",1166,"^E","temp__5457__auto__"],["^ ","^1I",0,"^1J",1167],["^ ","^1I",0,"^1J",1195]],"^2A",[["^ ","^1I",4,"^1J",1106,"^E","mutation-symbol"],["^ ","^1I",4,"^1J",1166,"^E","mutation-symbol"]],"^3@",[["^ ","^1I",31,"^1J",1104],["^ ","^1I",31,"^1J",1104],["^ ","^1I",35,"^1J",1164],["^ ","^1I",35,"^1J",1164]],"^2Z",[["^ ","^1I",188,"^1J",1104,"^E","item"],["^ ","^1I",192,"^1J",1164,"^E","item"]]],"~i527",["^ ","^49",[["^ ","^1I",0,"^1J",1107],["^ ","^1I",36,"^1J",1107],["^ ","^1I",0,"^1J",1167],["^ ","^1I",36,"^1J",1167]],"^3G",[["^ ","^1I",0,"^1J",1107,"^E","cljs.core/reset!"],["^ ","^1I",0,"^1J",1167,"^E","cljs.core/reset!"]],"^1N",[["^ ","^1I",22,"^1J",1107,"^E","ran-mutations"],["^ ","^1I",22,"^1J",1167,"^E","ran-mutations"]]],"~i528",["^ ","^49",[["^ ","^1I",0,"^1J",1109],["^ ","^1I",4,"^1J",1117,"^E","map__41210"],["^ ","^1I",4,"^1J",1122,"^E","map__41210"],["^ ","^1I",27,"^1J",1122],["^ ","^1I",29,"^1J",1122],["^ ","^1I",31,"^1J",1122],["^ ","^1I",33,"^1J",1122],["^ ","^1I",34,"^1J",1122,"^E","map__41210"],["^ ","^1I",54,"^1J",1122],["^ ","^1I",62,"^1J",1122],["^ ","^1I",64,"^1J",1122],["^ ","^1I",66,"^1J",1122],["^ ","^1I",67,"^1J",1122],["^ ","^1I",67,"^1J",1122,"^E","map__41210"],["^ ","^1I",122,"^1J",1122],["^ ","^1I",133,"^1J",1122],["^ ","^1I",134,"^1J",1122,"^E","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1I",166,"^1J",1122],["^ ","^1I",166,"^1J",1122,"^E","map__41210"],["^ ","^1I",203,"^1J",1122],["^ ","^1I",208,"^1J",1122],["^ ","^1I",215,"^1J",1122],["^ ","^1I",223,"^1J",1122],["^ ","^1I",223,"^1J",1122,"^E","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",269,"^1J",1122,"^E","cljs.core/hash-map"],["^ ","^1I",288,"^1J",1122,"^E","map__41210"],["^ ","^1I",306,"^1J",1122,"^E","map__41210"],["^ ","^1I",19,"^1J",1123],["^ ","^1I",19,"^1J",1123,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",63,"^1J",1123,"^E","map__41210"],["^ ","^1I",84,"^1J",1123],["^ ","^1I",20,"^1J",1124],["^ ","^1I",20,"^1J",1124,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",64,"^1J",1124,"^E","map__41210"],["^ ","^1I",85,"^1J",1124],["^ ","^1I",0,"^1J",1125],["^ ","^1I",0,"^1J",1169],["^ ","^1I",4,"^1J",1177,"^E","map__41228"],["^ ","^1I",4,"^1J",1182,"^E","map__41228"],["^ ","^1I",27,"^1J",1182],["^ ","^1I",29,"^1J",1182],["^ ","^1I",31,"^1J",1182],["^ ","^1I",33,"^1J",1182],["^ ","^1I",34,"^1J",1182,"^E","map__41228"],["^ ","^1I",54,"^1J",1182],["^ ","^1I",62,"^1J",1182],["^ ","^1I",64,"^1J",1182],["^ ","^1I",66,"^1J",1182],["^ ","^1I",67,"^1J",1182],["^ ","^1I",67,"^1J",1182,"^E","map__41228"],["^ ","^1I",122,"^1J",1182],["^ ","^1I",133,"^1J",1182],["^ ","^1I",134,"^1J",1182,"^E","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1I",166,"^1J",1182],["^ ","^1I",166,"^1J",1182,"^E","map__41228"],["^ ","^1I",203,"^1J",1182],["^ ","^1I",208,"^1J",1182],["^ ","^1I",215,"^1J",1182],["^ ","^1I",223,"^1J",1182],["^ ","^1I",223,"^1J",1182,"^E","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",269,"^1J",1182,"^E","cljs.core/hash-map"],["^ ","^1I",288,"^1J",1182,"^E","map__41228"],["^ ","^1I",306,"^1J",1182,"^E","map__41228"],["^ ","^1I",19,"^1J",1183],["^ ","^1I",19,"^1J",1183,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",63,"^1J",1183,"^E","map__41228"],["^ ","^1I",84,"^1J",1183],["^ ","^1I",20,"^1J",1184],["^ ","^1I",20,"^1J",1184,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",64,"^1J",1184,"^E","map__41228"],["^ ","^1I",85,"^1J",1184],["^ ","^1I",0,"^1J",1185]],"^3E",[["^ ","^1I",4,"^1J",1109,"^E","params"],["^ ","^1I",4,"^1J",1169,"^E","params"]],"^2I",[["^ ","^1I",19,"^1J",1109],["^ ","^1I",36,"^1J",1109,"^E","or__3949__auto__"],["^ ","^1I",0,"^1J",1110],["^ ","^1I",0,"^1J",1110],["^ ","^1I",20,"^1J",1110,"^E","or__3949__auto__"],["^ ","^1I",0,"^1J",1111,"^E","or__3949__auto__"],["^ ","^1I",0,"^1J",1113],["^ ","^1I",19,"^1J",1169],["^ ","^1I",36,"^1J",1169,"^E","or__3949__auto__"],["^ ","^1I",0,"^1J",1170],["^ ","^1I",0,"^1J",1170],["^ ","^1I",20,"^1J",1170,"^E","or__3949__auto__"],["^ ","^1I",0,"^1J",1171,"^E","or__3949__auto__"],["^ ","^1I",0,"^1J",1173]],"^2L",[["^ ","^1I",55,"^1J",1109],["^ ","^1I",55,"^1J",1109],["^ ","^1I",55,"^1J",1169],["^ ","^1I",55,"^1J",1169]],"^33",[["^ ","^1I",226,"^1J",1109,"^E","item"],["^ ","^1I",226,"^1J",1169,"^E","item"]]],"~i529",["^ ","^3E",[["^ ","^1I",4,"^1J",1116,"^E","original-env"],["^ ","^1I",4,"^1J",1176,"^E","original-env"]],"^2I",[["^ ","^1I",25,"^1J",1116],["^ ","^1I",40,"^1J",1116],["^ ","^1I",40,"^1J",1116],["^ ","^1I",25,"^1J",1176],["^ ","^1I",40,"^1J",1176],["^ ","^1I",40,"^1J",1176]],"^2L",[["^ ","^1I",196,"^1J",1116,"^E","item"],["^ ","^1I",196,"^1J",1176,"^E","item"]],"^25",[["^ ","^1I",25,"^1J",1116,"^E","cljs.core/meta"],["^ ","^1I",25,"^1J",1176,"^E","cljs.core/meta"]]],"~i530",["^ ","^2F",[["^ ","^1I",4,"^1J",1123,"^E","action"],["^ ","^1I",4,"^1J",1183,"^E","action"]],"^2J",[["^ ","^1I",4,"^1J",1124,"^E","refresh"],["^ ","^1I",4,"^1J",1184,"^E","refresh"]],"^24",[["^ ","^1I",23,"^1J",1117],["^ ","^1I",40,"^1J",1117,"^E","G__41214"],["^ ","^1I",4,"^1J",1118,"^E","G__41215"],["^ ","^1I",4,"^1J",1119,"^E","G__41216"],["^ ","^1I",0,"^1J",1120],["^ ","^1I",0,"^1J",1120],["^ ","^1I",132,"^1J",1120,"^E","G__41214"],["^ ","^1I",141,"^1J",1120,"^E","G__41215"],["^ ","^1I",150,"^1J",1120,"^E","G__41216"],["^ ","^1I",203,"^1J",1120,"^E","G__41214"],["^ ","^1I",212,"^1J",1120,"^E","G__41215"],["^ ","^1I",221,"^1J",1120,"^E","G__41216"],["^ ","^1I",23,"^1J",1177],["^ ","^1I",40,"^1J",1177,"^E","G__41231"],["^ ","^1I",4,"^1J",1178,"^E","G__41232"],["^ ","^1I",4,"^1J",1179,"^E","G__41233"],["^ ","^1I",0,"^1J",1180],["^ ","^1I",0,"^1J",1180],["^ ","^1I",132,"^1J",1180,"^E","G__41231"],["^ ","^1I",141,"^1J",1180,"^E","G__41232"],["^ ","^1I",150,"^1J",1180,"^E","G__41233"],["^ ","^1I",203,"^1J",1180,"^E","G__41231"],["^ ","^1I",212,"^1J",1180,"^E","G__41232"],["^ ","^1I",221,"^1J",1180,"^E","G__41233"]],"^2Q",[["^ ","^1I",8,"^1J",1120,"^E","fulcro.client.mutations/mutate"],["^ ","^1I",71,"^1J",1120,"^E","fulcro.client.mutations/mutate"],["^ ","^1I",162,"^1J",1120,"^E","fulcro.client.mutations/mutate"],["^ ","^1I",8,"^1J",1180,"^E","fulcro.client.mutations/mutate"],["^ ","^1I",71,"^1J",1180,"^E","fulcro.client.mutations/mutate"],["^ ","^1I",162,"^1J",1180,"^E","fulcro.client.mutations/mutate"]],"^4T",[["^ ","^1I",51,"^1J",1117],["^ ","^1I",51,"^1J",1177]],"^2Z",[["^ ","^1I",51,"^1J",1117,"^E","fulcro.client.impl.data-fetch/callback-env"],["^ ","^1I",51,"^1J",1177,"^E","fulcro.client.impl.data-fetch/callback-env"]],"^7X",[["^ ","^1I",94,"^1J",1117,"^E","reconciler"],["^ ","^1I",94,"^1J",1177,"^E","reconciler"]],"^4U",[["^ ","^1I",105,"^1J",1117,"^E","item"],["^ ","^1I",105,"^1J",1177,"^E","item"]],"^6<",[["^ ","^1I",110,"^1J",1117,"^E","original-env"],["^ ","^1I",110,"^1J",1177,"^E","original-env"]],"^3M",[["^ ","^1I",15,"^1J",1118,"^E","mutation-symbol"],["^ ","^1I",15,"^1J",1178,"^E","mutation-symbol"]],"^3[",[["^ ","^1I",15,"^1J",1119,"^E","params"],["^ ","^1I",15,"^1J",1179,"^E","params"]]],"~i531",["^ ","^3B",[["^ ","^1I",0,"^1J",1125],["^ ","^1I",0,"^1J",1126],["^ ","^1I",0,"^1J",1128],["^ ","^1I",0,"^1J",1185],["^ ","^1I",0,"^1J",1186],["^ ","^1I",0,"^1J",1188]],"^1N",[["^ ","^1I",3,"^1J",1125],["^ ","^1I",3,"^1J",1185]],"^2A",[["^ ","^1I",3,"^1J",1125,"^E","cljs.core/seq"],["^ ","^1I",3,"^1J",1185,"^E","cljs.core/seq"]],"^2E",[["^ ","^1I",17,"^1J",1125,"^E","refresh"],["^ ","^1I",17,"^1J",1185,"^E","refresh"]]],"~i532",["^ ","^3=",[["^ ","^1I",0,"^1J",1126],["^ ","^1I",0,"^1J",1186]],"^22",[["^ ","^1I",0,"^1J",1126,"^E","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3"],["^ ","^1I",0,"^1J",1186,"^E","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3"]],"^2D",[["^ ","^1I",51,"^1J",1126,"^E","to-refresh"],["^ ","^1I",51,"^1J",1186,"^E","to-refresh"]],"^2K",[["^ ","^1I",62,"^1J",1126,"^E","cljs.core/into"],["^ ","^1I",62,"^1J",1186,"^E","cljs.core/into"]],"^64",[["^ ","^1I",77,"^1J",1126,"^E","refresh"],["^ ","^1I",77,"^1J",1186,"^E","refresh"]]],"~i533",["^ ","^3B",[["^ ","^1I",0,"^1J",1130],["^ ","^1I",0,"^1J",1131],["^ ","^1I",0,"^1J",1133],["^ ","^1I",0,"^1J",1190],["^ ","^1I",0,"^1J",1191],["^ ","^1I",0,"^1J",1193]],"^1N",[["^ ","^1I",20,"^1J",1130,"^E","action"],["^ ","^1I",20,"^1J",1190,"^E","action"]]],"~i534",["^ ","^3=",[["^ ","^1I",0,"^1J",1131],["^ ","^1I",0,"^1J",1191]],"^22",[["^ ","^1I",1,"^1J",1131,"^E","action"],["^ ","^1I",46,"^1J",1131,"^E","action"],["^ ","^1I",93,"^1J",1131,"^E","action"],["^ ","^1I",1,"^1J",1191,"^E","action"],["^ ","^1I",46,"^1J",1191,"^E","action"],["^ ","^1I",93,"^1J",1191,"^E","action"]]],"~i535",["^ ","~i6",[["^ ","^1I",0,"^1J",1216]],"~i7",[["^ ","^1I",0,"^1J",1216,"^E","remove-markers!"]]],"~i536",["^ ","~i6",[["^ ","^1I",0,"^1J",1218]],"~i7",[["^ ","^1I",0,"^1J",1218,"^E","fulcro.client.primitives.merge_BANG_.cljs$core$IFn$_invoke$arity$3"]],"^1S",[["^ ","^1I",67,"^1J",1218,"^E","reconciler"]],"^1Z",[["^ ","^1I",78,"^1J",1218,"^E","marked-response"]],"^22",[["^ ","^1I",94,"^1J",1218,"^E","query"]]],"~i537",["^ ","~i6",[["^ ","^1I",0,"^1J",1220]],"~i7",[["^ ","^1I",0,"^1J",1220,"^E","fulcro.client.impl.data-fetch/relocate-targeted-results!"]],"^28",[["^ ","^1I",62,"^1J",1220,"^E","app-state"]],"^2<",[["^ ","^1I",72,"^1J",1220,"^E","loading-items"]]],"~i538",["^ ","~i6",[["^ ","^1I",0,"^1J",1222]],"~i7",[["^ ","^1I",0,"^1J",1222,"^E","run-post-mutations!"]]],"~i539",["^ ","~i6",[["^ ","^1I",0,"^1J",1224]],"~i7",[["^ ","^1I",0,"^1J",1224,"^E","fulcro.client.impl.data-fetch/set-global-loading!"]],"^21",[["^ ","^1I",55,"^1J",1224,"^E","reconciler"]]],"~i540",["^ ","~i6",[["^ ","^1I",0,"^1J",1226]],"~i7",[["^ ","^1I",0,"^1J",1226,"^E","fulcro.client.impl.data-fetch/tick!"]],"^2C",[["^ ","^1I",41,"^1J",1226,"^E","reconciler"]]],"~i541",["^ ","~i6",[["^ ","^1I",0,"^1J",1228]],"^2=",[["^ ","^1I",3,"^1J",1228],["^ ","^1I",41,"^1J",1228]],"^43",[["^ ","^1I",3,"^1J",1228,"^E","cljs.core/contains?"]],"^1Y",[["^ ","^1I",29,"^1J",1228,"^E","refresh-set"]]],"~i542",["^ ","~i8",[["^ ","^1I",0,"^1J",1229]],"~i9",[["^ ","^1I",7,"^1J",1229,"^E","fulcro.client.primitives/force-root-render!"]],"^1X",[["^ ","^1I",56,"^1J",1229,"^E","reconciler"]]],"~i543",["^ ","~i8",[["^ ","^1I",0,"^1J",1231]],"~i9",[["^ ","^1I",7,"^1J",1231,"^E","fulcro.client.util.force_render.cljs$core$IFn$_invoke$arity$2"]],"^1L",[["^ ","^1I",69,"^1J",1231,"^E","reconciler"]],"^1X",[["^ ","^1I",80,"^1J",1231],["^ ","^1I",94,"^1J",1231],["^ ","^1I",94,"^1J",1231,"^E","cljs.core/deref"]],"^28",[["^ ","^1I",80,"^1J",1231,"^E","cljs.core/vec"]],"^2?",[["^ ","^1I",110,"^1J",1231,"^E","to-refresh"]]],"~i545",["^ ","~i0",[["^ ","^1I",0,"^1J",1235],["^ ","^1I",47,"^1J",1246],["^ ","^1I",0,"^1J",1247]],"~i7",[["^ ","^1I",0,"^1J",1246,"^E","fulcro.client.impl.data-fetch/error-callback"]]],"~i555",["^ ","~i3",[["^ ","^1I",102,"^1J",1246,"^E","reconciler"]]],"~i556",["^ ","~i2",[["^ ","^1I",0,"^1J",1247],["^ ","^1I",0,"^1J",1248]],"~i7",[["^ ","^1I",18,"^1J",1247,"^E","error"]],"^2C",[["^ ","^1I",24,"^1J",1247,"^E","items"]]],"~i557",["^ ","~i4",[["^ ","^1I",0,"^1J",1248],["^ ","^1I",0,"^1J",1447]],"^2=",[["^ ","^1I",4,"^1J",1248,"^E","loading-items"]],"^1W",[["^ ","^1I",20,"^1J",1248],["^ ","^1I",65,"^1J",1248]],"^1T",[["^ ","^1I",20,"^1J",1248,"^E","cljs.core.into.cljs$core$IFn$_invoke$arity$2"]],"^28",[["^ ","^1I",99,"^1J",1248]],"^29",[["^ ","^1I",99,"^1J",1248,"^E","cljs.core.map.cljs$core$IFn$_invoke$arity$2"]],"^2?",[["^ ","^1I",143,"^1J",1248,"^E","fulcro.client.impl.data-fetch/set-loading!"]],"^2D",[["^ ","^1I",191,"^1J",1248,"^E","items"]]],"~i558",["^ ","^2=",[["^ ","^1I",4,"^1J",1249,"^E","app-state"]],"^1W",[["^ ","^1I",16,"^1J",1249]],"^1T",[["^ ","^1I",16,"^1J",1249,"^E","fulcro.client.primitives/app-state"]],"^20",[["^ ","^1I",51,"^1J",1249,"^E","reconciler"]]],"~i562",["^ ","^2=",[["^ ","^1I",4,"^1J",1250,"^E","ran-fallbacks"]],"^1W",[["^ ","^1I",20,"^1J",1250],["^ ","^1I",65,"^1J",1250]],"^1T",[["^ ","^1I",20,"^1J",1250,"^E","cljs.core.atom.cljs$core$IFn$_invoke$arity$1"]]],"~i563",["^ ","^2=",[["^ ","^1I",4,"^1J",1251,"^E","mark-errors"]],"^1W",[["^ ","^1I",18,"^1J",1251],["^ ","^1I",0,"^1J",1253]]],"~i564",["^ ","^1R",[["^ ","^1I",0,"^1J",1253],["^ ","^1I",77,"^1J",1253]],"^21",[["^ ","^1I",0,"^1J",1253,"^E","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4"]],"^1X",[["^ ","^1I",51,"^1J",1253,"^E","app-state"]],"^3B",[["^ ","^1I",61,"^1J",1253,"^E","cljs.core/assoc"]],"^2O",[["^ ","^1I",158,"^1J",1253,"^E","error"]]],"~i565",["^ ","^1R",[["^ ","^1I",0,"^1J",1255],["^ ","^1I",4,"^1J",1255,"^E","seq__41371"],["^ ","^1I",17,"^1J",1255],["^ ","^1I",17,"^1J",1255,"^E","cljs.core/seq"],["^ ","^1I",4,"^1J",1256,"^E","chunk__41372"],["^ ","^1I",19,"^1J",1256],["^ ","^1I",4,"^1J",1257,"^E","count__41373"],["^ ","^1I",19,"^1J",1257],["^ ","^1I",4,"^1J",1258,"^E","i__41374"],["^ ","^1I",15,"^1J",1258],["^ ","^1I",0,"^1J",1260],["^ ","^1I",0,"^1J",1260],["^ ","^1I",3,"^1J",1260],["^ ","^1I",3,"^1J",1260],["^ ","^1I",4,"^1J",1260,"^E","i__41374"],["^ ","^1I",15,"^1J",1260,"^E","count__41373"],["^ ","^1I",0,"^1J",1261],["^ ","^1I",11,"^1J",1261],["^ ","^1I",11,"^1J",1261,"^E","chunk__41372"],["^ ","^1I",61,"^1J",1261,"^E","i__41374"],["^ ","^1I",0,"^1J",1262],["^ ","^1I",0,"^1J",1262],["^ ","^1I",0,"^1J",1284],["^ ","^1I",0,"^1J",1285],["^ ","^1I",15,"^1J",1285,"^E","seq__41371"],["^ ","^1I",15,"^1J",1286,"^E","chunk__41372"],["^ ","^1I",15,"^1J",1287,"^E","count__41373"],["^ ","^1I",15,"^1J",1288],["^ ","^1I",16,"^1J",1288,"^E","i__41374"],["^ ","^1I",27,"^1J",1288],["^ ","^1I",0,"^1J",1295],["^ ","^1I",4,"^1J",1295,"^E","temp__5457__auto__"],["^ ","^1I",25,"^1J",1295],["^ ","^1I",25,"^1J",1295,"^E","cljs.core/seq"],["^ ","^1I",39,"^1J",1295,"^E","seq__41371"],["^ ","^1I",0,"^1J",1296],["^ ","^1I",0,"^1J",1296],["^ ","^1I",3,"^1J",1296,"^E","temp__5457__auto__"],["^ ","^1I",0,"^1J",1297],["^ ","^1I",0,"^1J",1297],["^ ","^1I",4,"^1J",1297,"^E","seq__41371"],["^ ","^1I",21,"^1J",1297,"^E","temp__5457__auto__"],["^ ","^1I",0,"^1J",1298],["^ ","^1I",0,"^1J",1298],["^ ","^1I",3,"^1J",1298],["^ ","^1I",3,"^1J",1298,"^E","cljs.core/chunked-seq?"],["^ ","^1I",32,"^1J",1298,"^E","seq__41371"],["^ ","^1I",0,"^1J",1299],["^ ","^1I",4,"^1J",1299,"^E","c__4351__auto__"],["^ ","^1I",22,"^1J",1299],["^ ","^1I",22,"^1J",1299,"^E","cljs.core/chunk-first"],["^ ","^1I",44,"^1J",1299,"^E","seq__41371"],["^ ","^1I",0,"^1J",1300],["^ ","^1I",0,"^1J",1300],["^ ","^1I",15,"^1J",1300],["^ ","^1I",15,"^1J",1300,"^E","cljs.core/chunk-rest"],["^ ","^1I",36,"^1J",1300,"^E","seq__41371"],["^ ","^1I",15,"^1J",1301,"^E","c__4351__auto__"],["^ ","^1I",15,"^1J",1302],["^ ","^1I",15,"^1J",1302,"^E","cljs.core/count"],["^ ","^1I",31,"^1J",1302,"^E","c__4351__auto__"],["^ ","^1I",15,"^1J",1303],["^ ","^1I",0,"^1J",1310],["^ ","^1I",11,"^1J",1310],["^ ","^1I",11,"^1J",1310,"^E","cljs.core/first"],["^ ","^1I",27,"^1J",1310,"^E","seq__41371"],["^ ","^1I",0,"^1J",1311],["^ ","^1I",0,"^1J",1311],["^ ","^1I",0,"^1J",1333],["^ ","^1I",0,"^1J",1334],["^ ","^1I",15,"^1J",1334],["^ ","^1I",15,"^1J",1334,"^E","cljs.core/next"],["^ ","^1I",30,"^1J",1334,"^E","seq__41371"],["^ ","^1I",15,"^1J",1335],["^ ","^1I",15,"^1J",1336],["^ ","^1I",15,"^1J",1337],["^ ","^1I",0,"^1J",1345]],"^28",[["^ ","^1I",4,"^1J",1261,"^E","item"],["^ ","^1I",4,"^1J",1310,"^E","item"]],"^2?",[["^ ","^1I",31,"^1J",1255,"^E","loading-items"]]],"~i566",["^ ","^26",[["^ ","^1I",0,"^1J",1262],["^ ","^1I",0,"^1J",1311]],"^2>",[["^ ","^1I",0,"^1J",1262,"^E","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",0,"^1J",1311,"^E","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2"]],"^29",[["^ ","^1I",51,"^1J",1262,"^E","app-state"],["^ ","^1I",51,"^1J",1311,"^E","app-state"]],"^3=",[["^ ","^1I",61,"^1J",1262],["^ ","^1I",0,"^1J",1264],["^ ","^1I",61,"^1J",1311],["^ ","^1I",0,"^1J",1313]],"^2A",[["^ ","^1I",18,"^1J",1263,"^E","s"],["^ ","^1I",18,"^1J",1312,"^E","s"]]],"~i567",["^ ","^3E",[["^ ","^1I",0,"^1J",1264],["^ ","^1I",4,"^1J",1264,"^E","G__41377"],["^ ","^1I",4,"^1J",1265,"^E","G__41377"],["^ ","^1I",19,"^1J",1265],["^ ","^1I",301,"^1J",1271,"^E","G__41377"],["^ ","^1I",4,"^1J",1272,"^E","G__41377"],["^ ","^1I",19,"^1J",1272],["^ ","^1I",285,"^1J",1278,"^E","G__41377"],["^ ","^1I",0,"^1J",1279],["^ ","^1I",0,"^1J",1279],["^ ","^1I",0,"^1J",1313],["^ ","^1I",4,"^1J",1313,"^E","G__41388"],["^ ","^1I",4,"^1J",1314,"^E","G__41388"],["^ ","^1I",19,"^1J",1314],["^ ","^1I",301,"^1J",1320,"^E","G__41388"],["^ ","^1I",4,"^1J",1321,"^E","G__41388"],["^ ","^1I",19,"^1J",1321],["^ ","^1I",285,"^1J",1327,"^E","G__41388"],["^ ","^1I",0,"^1J",1328],["^ ","^1I",0,"^1J",1328]],"^2F",[["^ ","^1I",15,"^1J",1264,"^E","s"],["^ ","^1I",15,"^1J",1313,"^E","s"]]],"~i568",["^ ","^1N",[["^ ","^1I",37,"^1J",1265],["^ ","^1I",54,"^1J",1265,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",1266],["^ ","^1I",0,"^1J",1266],["^ ","^1I",20,"^1J",1266,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",1269,"^E","and__3938__auto__"],["^ ","^1I",37,"^1J",1314],["^ ","^1I",54,"^1J",1314,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",1315],["^ ","^1I",0,"^1J",1315],["^ ","^1I",20,"^1J",1315,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",1318,"^E","and__3938__auto__"]],"^2E",[["^ ","^1I",74,"^1J",1265],["^ ","^1I",74,"^1J",1314]],"^2F",[["^ ","^1I",74,"^1J",1265,"^E","fulcro.client.impl.data-fetch/data-marker?"],["^ ","^1I",74,"^1J",1314,"^E","fulcro.client.impl.data-fetch/data-marker?"]],"^64",[["^ ","^1I",123,"^1J",1265,"^E","item"],["^ ","^1I",123,"^1J",1314,"^E","item"]],"^2R",[["^ ","^1I",0,"^1J",1267],["^ ","^1I",67,"^1J",1267,"^E","cljs.core/Keyword"],["^ ","^1I",0,"^1J",1316],["^ ","^1I",67,"^1J",1316,"^E","cljs.core/Keyword"]],"^25",[["^ ","^1I",8,"^1J",1267],["^ ","^1I",8,"^1J",1316]],"^2[",[["^ ","^1I",8,"^1J",1267,"^E","fulcro.client.impl.data-fetch/data-marker"],["^ ","^1I",8,"^1J",1316,"^E","fulcro.client.impl.data-fetch/data-marker"]],"^38",[["^ ","^1I",50,"^1J",1267,"^E","item"],["^ ","^1I",50,"^1J",1316,"^E","item"]],"~i105",[["^ ","^1I",6,"^1J",1271],["^ ","^1I",56,"^1J",1271,"^E","G__41377"],["^ ","^1I",65,"^1J",1271],["^ ","^1I",6,"^1J",1320],["^ ","^1I",56,"^1J",1320,"^E","G__41388"],["^ ","^1I",65,"^1J",1320]],"^9T",[["^ ","^1I",6,"^1J",1271,"^E","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4"],["^ ","^1I",6,"^1J",1320,"^E","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4"]],"^3A",[["^ ","^1I",148,"^1J",1271,"^E","fulcro.client.impl.data-fetch/marker-table"],["^ ","^1I",148,"^1J",1320,"^E","fulcro.client.impl.data-fetch/marker-table"]],"^3R",[["^ ","^1I",191,"^1J",1271],["^ ","^1I",191,"^1J",1320]],"^3S",[["^ ","^1I",191,"^1J",1271,"^E","fulcro.client.impl.data-fetch/data-marker"],["^ ","^1I",191,"^1J",1320,"^E","fulcro.client.impl.data-fetch/data-marker"]],"~i143",[["^ ","^1I",233,"^1J",1271,"^E","item"],["^ ","^1I",233,"^1J",1320,"^E","item"]],"^44",[["^ ","^1I",247,"^1J",1271,"^E","fulcro.client.impl.data-fetch/set-failed!"],["^ ","^1I",247,"^1J",1320,"^E","fulcro.client.impl.data-fetch/set-failed!"]],"^4?",[["^ ","^1I",294,"^1J",1271,"^E","error"],["^ ","^1I",294,"^1J",1320,"^E","error"]]],"~i569",["^ ","^1N",[["^ ","^1I",37,"^1J",1272],["^ ","^1I",54,"^1J",1272,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",1273],["^ ","^1I",0,"^1J",1273],["^ ","^1I",20,"^1J",1273,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",1276,"^E","and__3938__auto__"],["^ ","^1I",37,"^1J",1321],["^ ","^1I",54,"^1J",1321,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",1322],["^ ","^1I",0,"^1J",1322],["^ ","^1I",20,"^1J",1322,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",1325,"^E","and__3938__auto__"]],"^2E",[["^ ","^1I",74,"^1J",1272],["^ ","^1I",74,"^1J",1321]],"^2F",[["^ ","^1I",74,"^1J",1272,"^E","fulcro.client.impl.data-fetch/data-marker?"],["^ ","^1I",74,"^1J",1321,"^E","fulcro.client.impl.data-fetch/data-marker?"]],"^64",[["^ ","^1I",123,"^1J",1272,"^E","item"],["^ ","^1I",123,"^1J",1321,"^E","item"]],"^2R",[["^ ","^1I",0,"^1J",1274],["^ ","^1I",8,"^1J",1274],["^ ","^1I",0,"^1J",1323],["^ ","^1I",8,"^1J",1323]],"^35",[["^ ","^1I",17,"^1J",1274],["^ ","^1I",17,"^1J",1323]],"^36",[["^ ","^1I",17,"^1J",1274,"^E","fulcro.client.impl.data-fetch/data-marker"],["^ ","^1I",17,"^1J",1323,"^E","fulcro.client.impl.data-fetch/data-marker"]],"^6;",[["^ ","^1I",59,"^1J",1274,"^E","item"],["^ ","^1I",59,"^1J",1323,"^E","item"]],"^6<",[["^ ","^1I",6,"^1J",1278],["^ ","^1I",56,"^1J",1278,"^E","G__41377"],["^ ","^1I",6,"^1J",1327],["^ ","^1I",56,"^1J",1327,"^E","G__41388"]],"^3;",[["^ ","^1I",6,"^1J",1278,"^E","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4"],["^ ","^1I",6,"^1J",1327,"^E","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4"]],"^3J",[["^ ","^1I",69,"^1J",1278],["^ ","^1I",160,"^1J",1278],["^ ","^1I",69,"^1J",1327],["^ ","^1I",160,"^1J",1327]],"^3K",[["^ ","^1I",69,"^1J",1278,"^E","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",69,"^1J",1327,"^E","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"^3Q",[["^ ","^1I",114,"^1J",1278],["^ ","^1I",114,"^1J",1327]],"^3R",[["^ ","^1I",114,"^1J",1278,"^E","fulcro.client.impl.data-fetch/data-path"],["^ ","^1I",114,"^1J",1327,"^E","fulcro.client.impl.data-fetch/data-path"]],"^4V",[["^ ","^1I",154,"^1J",1278,"^E","item"],["^ ","^1I",154,"^1J",1327,"^E","item"]],"~i163",[["^ ","^1I",231,"^1J",1278,"^E","fulcro.client.impl.data-fetch/set-failed!"],["^ ","^1I",231,"^1J",1327,"^E","fulcro.client.impl.data-fetch/set-failed!"]],"~i175",[["^ ","^1I",278,"^1J",1278,"^E","error"],["^ ","^1I",278,"^1J",1327,"^E","error"]]],"~i570",["^ ","^2G",[["^ ","^1I",0,"^1J",1279],["^ ","^1I",54,"^1J",1279,"^E","G__41377"],["^ ","^1I",67,"^1J",1279],["^ ","^1I",0,"^1J",1328],["^ ","^1I",54,"^1J",1328,"^E","G__41388"],["^ ","^1I",67,"^1J",1328]],"^2H",[["^ ","^1I",7,"^1J",1279,"^E","cljs.core.update.cljs$core$IFn$_invoke$arity$4"],["^ ","^1I",7,"^1J",1328,"^E","cljs.core.update.cljs$core$IFn$_invoke$arity$4"]],"^35",[["^ ","^1I",158,"^1J",1279,"^E","cljs.core/disj"],["^ ","^1I",158,"^1J",1328,"^E","cljs.core/disj"]],"^7X",[["^ ","^1I",173,"^1J",1279],["^ ","^1I",173,"^1J",1328]],"^38",[["^ ","^1I",173,"^1J",1279,"^E","fulcro.client.impl.data-fetch/data-uuid"],["^ ","^1I",173,"^1J",1328,"^E","fulcro.client.impl.data-fetch/data-uuid"]],"^4U",[["^ ","^1I",213,"^1J",1279,"^E","item"],["^ ","^1I",213,"^1J",1328,"^E","item"]]],"~i571",["^ ","^2=",[["^ ","^1I",4,"^1J",1352,"^E","run-fallbacks"]],"^1W",[["^ ","^1I",20,"^1J",1352],["^ ","^1I",0,"^1J",1354]],"^1[",[["^ ","^1I",0,"^1J",1354],["^ ","^1I",4,"^1J",1354,"^E","seq__41395"],["^ ","^1I",17,"^1J",1354],["^ ","^1I",17,"^1J",1354,"^E","cljs.core/seq"],["^ ","^1I",4,"^1J",1355,"^E","chunk__41396"],["^ ","^1I",19,"^1J",1355],["^ ","^1I",4,"^1J",1356,"^E","count__41397"],["^ ","^1I",19,"^1J",1356],["^ ","^1I",4,"^1J",1357,"^E","i__41398"],["^ ","^1I",15,"^1J",1357],["^ ","^1I",0,"^1J",1359],["^ ","^1I",0,"^1J",1359],["^ ","^1I",3,"^1J",1359],["^ ","^1I",3,"^1J",1359],["^ ","^1I",4,"^1J",1359,"^E","i__41398"],["^ ","^1I",15,"^1J",1359,"^E","count__41397"],["^ ","^1I",0,"^1J",1360],["^ ","^1I",11,"^1J",1360],["^ ","^1I",11,"^1J",1360,"^E","chunk__41396"],["^ ","^1I",61,"^1J",1360,"^E","i__41398"],["^ ","^1I",0,"^1J",1361],["^ ","^1I",0,"^1J",1361],["^ ","^1I",0,"^1J",1381],["^ ","^1I",0,"^1J",1382],["^ ","^1I",15,"^1J",1382,"^E","seq__41395"],["^ ","^1I",15,"^1J",1383,"^E","chunk__41396"],["^ ","^1I",15,"^1J",1384,"^E","count__41397"],["^ ","^1I",15,"^1J",1385],["^ ","^1I",16,"^1J",1385,"^E","i__41398"],["^ ","^1I",27,"^1J",1385],["^ ","^1I",0,"^1J",1392],["^ ","^1I",4,"^1J",1392,"^E","temp__5457__auto__"],["^ ","^1I",25,"^1J",1392],["^ ","^1I",25,"^1J",1392,"^E","cljs.core/seq"],["^ ","^1I",39,"^1J",1392,"^E","seq__41395"],["^ ","^1I",0,"^1J",1393],["^ ","^1I",0,"^1J",1393],["^ ","^1I",3,"^1J",1393,"^E","temp__5457__auto__"],["^ ","^1I",0,"^1J",1394],["^ ","^1I",0,"^1J",1394],["^ ","^1I",4,"^1J",1394,"^E","seq__41395"],["^ ","^1I",21,"^1J",1394,"^E","temp__5457__auto__"],["^ ","^1I",0,"^1J",1395],["^ ","^1I",0,"^1J",1395],["^ ","^1I",3,"^1J",1395],["^ ","^1I",3,"^1J",1395,"^E","cljs.core/chunked-seq?"],["^ ","^1I",32,"^1J",1395,"^E","seq__41395"],["^ ","^1I",0,"^1J",1396],["^ ","^1I",4,"^1J",1396,"^E","c__4351__auto__"],["^ ","^1I",22,"^1J",1396],["^ ","^1I",22,"^1J",1396,"^E","cljs.core/chunk-first"],["^ ","^1I",44,"^1J",1396,"^E","seq__41395"],["^ ","^1I",0,"^1J",1397],["^ ","^1I",0,"^1J",1397],["^ ","^1I",15,"^1J",1397],["^ ","^1I",15,"^1J",1397,"^E","cljs.core/chunk-rest"],["^ ","^1I",36,"^1J",1397,"^E","seq__41395"],["^ ","^1I",15,"^1J",1398,"^E","c__4351__auto__"],["^ ","^1I",15,"^1J",1399],["^ ","^1I",15,"^1J",1399,"^E","cljs.core/count"],["^ ","^1I",31,"^1J",1399,"^E","c__4351__auto__"],["^ ","^1I",15,"^1J",1400],["^ ","^1I",0,"^1J",1407],["^ ","^1I",11,"^1J",1407],["^ ","^1I",11,"^1J",1407,"^E","cljs.core/first"],["^ ","^1I",27,"^1J",1407,"^E","seq__41395"],["^ ","^1I",0,"^1J",1408],["^ ","^1I",0,"^1J",1408],["^ ","^1I",0,"^1J",1428],["^ ","^1I",0,"^1J",1429],["^ ","^1I",15,"^1J",1429],["^ ","^1I",15,"^1J",1429,"^E","cljs.core/next"],["^ ","^1I",30,"^1J",1429,"^E","seq__41395"],["^ ","^1I",15,"^1J",1430],["^ ","^1I",15,"^1J",1431],["^ ","^1I",15,"^1J",1432],["^ ","^1I",0,"^1J",1440]],"^2?",[["^ ","^1I",4,"^1J",1360,"^E","item"],["^ ","^1I",4,"^1J",1407,"^E","item"]],"^2<",[["^ ","^1I",31,"^1J",1354,"^E","loading-items"]]],"~i572",["^ ","^1X",[["^ ","^1I",0,"^1J",1361],["^ ","^1I",4,"^1J",1361,"^E","temp__5457__auto__"],["^ ","^1I",0,"^1J",1362],["^ ","^1I",0,"^1J",1362],["^ ","^1I",20,"^1J",1362,"^E","temp__5457__auto__"],["^ ","^1I",0,"^1J",1363],["^ ","^1I",0,"^1J",1363],["^ ","^1I",28,"^1J",1363,"^E","temp__5457__auto__"],["^ ","^1I",0,"^1J",1364],["^ ","^1I",0,"^1J",1379],["^ ","^1I",0,"^1J",1408],["^ ","^1I",4,"^1J",1408,"^E","temp__5457__auto__"],["^ ","^1I",0,"^1J",1409],["^ ","^1I",0,"^1J",1409],["^ ","^1I",20,"^1J",1409,"^E","temp__5457__auto__"],["^ ","^1I",0,"^1J",1410],["^ ","^1I",0,"^1J",1410],["^ ","^1I",28,"^1J",1410,"^E","temp__5457__auto__"],["^ ","^1I",0,"^1J",1411],["^ ","^1I",0,"^1J",1426]],"^2<",[["^ ","^1I",4,"^1J",1363,"^E","fallback-symbol"],["^ ","^1I",4,"^1J",1410,"^E","fallback-symbol"]],"^2I",[["^ ","^1I",31,"^1J",1361],["^ ","^1I",31,"^1J",1361],["^ ","^1I",35,"^1J",1408],["^ ","^1I",35,"^1J",1408]],"^24",[["^ ","^1I",179,"^1J",1361,"^E","item"],["^ ","^1I",183,"^1J",1408,"^E","item"]]],"~i573",["^ ","^29",[["^ ","^1I",0,"^1J",1364],["^ ","^1I",0,"^1J",1366],["^ ","^1I",0,"^1J",1411],["^ ","^1I",0,"^1J",1413]],"^49",[["^ ","^1I",4,"^1J",1364,"^E","original-env"],["^ ","^1I",4,"^1J",1411,"^E","original-env"]],"^2E",[["^ ","^1I",25,"^1J",1364],["^ ","^1I",40,"^1J",1364],["^ ","^1I",40,"^1J",1364],["^ ","^1I",25,"^1J",1411],["^ ","^1I",40,"^1J",1411],["^ ","^1I",40,"^1J",1411]],"^2H",[["^ ","^1I",196,"^1J",1364,"^E","item"],["^ ","^1I",196,"^1J",1411,"^E","item"]],"^2V",[["^ ","^1I",25,"^1J",1364,"^E","cljs.core/meta"],["^ ","^1I",25,"^1J",1411,"^E","cljs.core/meta"]]],"~i574",["^ ","^49",[["^ ","^1I",4,"^1J",1365,"^E","env"],["^ ","^1I",4,"^1J",1412,"^E","env"]],"^2E",[["^ ","^1I",16,"^1J",1365],["^ ","^1I",16,"^1J",1412]],"^2F",[["^ ","^1I",16,"^1J",1365,"^E","fulcro.client.impl.data-fetch/callback-env"],["^ ","^1I",16,"^1J",1412,"^E","fulcro.client.impl.data-fetch/callback-env"]],"^64",[["^ ","^1I",59,"^1J",1365,"^E","reconciler"],["^ ","^1I",59,"^1J",1412,"^E","reconciler"]],"^2W",[["^ ","^1I",70,"^1J",1365,"^E","item"],["^ ","^1I",70,"^1J",1412,"^E","item"]],"^25",[["^ ","^1I",75,"^1J",1365,"^E","original-env"],["^ ","^1I",75,"^1J",1412,"^E","original-env"]]],"~i575",["^ ","^1M",[["^ ","^1I",0,"^1J",1366],["^ ","^1I",36,"^1J",1366],["^ ","^1I",0,"^1J",1413],["^ ","^1I",36,"^1J",1413]],"^2;",[["^ ","^1I",0,"^1J",1366,"^E","cljs.core/reset!"],["^ ","^1I",0,"^1J",1413,"^E","cljs.core/reset!"]],"^3=",[["^ ","^1I",22,"^1J",1366,"^E","ran-fallbacks"],["^ ","^1I",22,"^1J",1413,"^E","ran-fallbacks"]]],"~i576",["^ ","^1M",[["^ ","^1I",0,"^1J",1368],["^ ","^1I",4,"^1J",1368,"^E","G__41402"],["^ ","^1I",4,"^1J",1373,"^E","G__41402"],["^ ","^1I",25,"^1J",1373],["^ ","^1I",27,"^1J",1373],["^ ","^1I",28,"^1J",1373,"^E","G__41402"],["^ ","^1I",46,"^1J",1373],["^ ","^1I",53,"^1J",1373],["^ ","^1I",58,"^1J",1373],["^ ","^1I",58,"^1J",1373],["^ ","^1I",145,"^1J",1373,"^E","G__41402"],["^ ","^1I",0,"^1J",1374],["^ ","^1I",0,"^1J",1374],["^ ","^1I",3,"^1J",1374],["^ ","^1I",4,"^1J",1374,"^E","G__41402"],["^ ","^1I",26,"^1J",1374],["^ ","^1I",0,"^1J",1375],["^ ","^1I",0,"^1J",1415],["^ ","^1I",4,"^1J",1415,"^E","G__41412"],["^ ","^1I",4,"^1J",1420,"^E","G__41412"],["^ ","^1I",25,"^1J",1420],["^ ","^1I",27,"^1J",1420],["^ ","^1I",28,"^1J",1420,"^E","G__41412"],["^ ","^1I",46,"^1J",1420],["^ ","^1I",53,"^1J",1420],["^ ","^1I",58,"^1J",1420],["^ ","^1I",58,"^1J",1420],["^ ","^1I",145,"^1J",1420,"^E","G__41412"],["^ ","^1I",0,"^1J",1421],["^ ","^1I",0,"^1J",1421],["^ ","^1I",3,"^1J",1421],["^ ","^1I",4,"^1J",1421,"^E","G__41412"],["^ ","^1I",26,"^1J",1421],["^ ","^1I",0,"^1J",1422]]],"~i577",["^ ","^2?",[["^ ","^1I",21,"^1J",1368],["^ ","^1I",38,"^1J",1368,"^E","G__41403"],["^ ","^1I",4,"^1J",1369,"^E","G__41404"],["^ ","^1I",4,"^1J",1370,"^E","G__41405"],["^ ","^1I",15,"^1J",1370],["^ ","^1I",58,"^1J",1370],["^ ","^1I",0,"^1J",1371],["^ ","^1I",0,"^1J",1371],["^ ","^1I",132,"^1J",1371,"^E","G__41403"],["^ ","^1I",141,"^1J",1371,"^E","G__41404"],["^ ","^1I",150,"^1J",1371,"^E","G__41405"],["^ ","^1I",203,"^1J",1371,"^E","G__41403"],["^ ","^1I",212,"^1J",1371,"^E","G__41404"],["^ ","^1I",221,"^1J",1371,"^E","G__41405"],["^ ","^1I",21,"^1J",1415],["^ ","^1I",38,"^1J",1415,"^E","G__41414"],["^ ","^1I",4,"^1J",1416,"^E","G__41415"],["^ ","^1I",4,"^1J",1417,"^E","G__41416"],["^ ","^1I",15,"^1J",1417],["^ ","^1I",58,"^1J",1417],["^ ","^1I",0,"^1J",1418],["^ ","^1I",0,"^1J",1418],["^ ","^1I",132,"^1J",1418,"^E","G__41414"],["^ ","^1I",141,"^1J",1418,"^E","G__41415"],["^ ","^1I",150,"^1J",1418,"^E","G__41416"],["^ ","^1I",203,"^1J",1418,"^E","G__41414"],["^ ","^1I",212,"^1J",1418,"^E","G__41415"],["^ ","^1I",221,"^1J",1418,"^E","G__41416"]],"^20",[["^ ","^1I",8,"^1J",1371,"^E","fulcro.client.mutations/mutate"],["^ ","^1I",71,"^1J",1371,"^E","fulcro.client.mutations/mutate"],["^ ","^1I",162,"^1J",1371,"^E","fulcro.client.mutations/mutate"],["^ ","^1I",8,"^1J",1418,"^E","fulcro.client.mutations/mutate"],["^ ","^1I",71,"^1J",1418,"^E","fulcro.client.mutations/mutate"],["^ ","^1I",162,"^1J",1418,"^E","fulcro.client.mutations/mutate"]],"^1N",[["^ ","^1I",49,"^1J",1368,"^E","env"],["^ ","^1I",49,"^1J",1415,"^E","env"]],"^3P",[["^ ","^1I",15,"^1J",1369,"^E","fallback-symbol"],["^ ","^1I",15,"^1J",1416,"^E","fallback-symbol"]],"^2U",[["^ ","^1I",113,"^1J",1370,"^E","error"],["^ ","^1I",113,"^1J",1417,"^E","error"]]],"~i579",["^ ","^2?",[["^ ","^1I",0,"^1J",1376],["^ ","^1I",46,"^1J",1376,"^E","G__41402"],["^ ","^1I",65,"^1J",1376],["^ ","^1I",0,"^1J",1423],["^ ","^1I",46,"^1J",1423,"^E","G__41412"],["^ ","^1I",65,"^1J",1423]],"^20",[["^ ","^1I",0,"^1J",1376,"^E","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1I",0,"^1J",1423,"^E","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"]]],"~i580",["^ ","~i6",[["^ ","^1I",0,"^1J",1447]],"~i7",[["^ ","^1I",0,"^1J",1447,"^E","mark-errors"]]],"~i581",["^ ","~i6",[["^ ","^1I",0,"^1J",1449]],"~i7",[["^ ","^1I",0,"^1J",1449,"^E","run-fallbacks"]]],"~i582",["^ ","~i6",[["^ ","^1I",0,"^1J",1451]],"~i7",[["^ ","^1I",0,"^1J",1451,"^E","fulcro.client.impl.data-fetch/set-global-loading!"]],"^21",[["^ ","^1I",55,"^1J",1451,"^E","reconciler"]]],"~i583",["^ ","~i6",[["^ ","^1I",0,"^1J",1453]],"~i7",[["^ ","^1I",0,"^1J",1453,"^E","fulcro.client.impl.data-fetch/tick!"]],"^2C",[["^ ","^1I",41,"^1J",1453,"^E","reconciler"]]],"~i584",["^ ","~i6",[["^ ","^1I",0,"^1J",1455]],"~i7",[["^ ","^1I",7,"^1J",1455,"^E","fulcro.client.primitives/force-root-render!"]],"^1[",[["^ ","^1I",56,"^1J",1455,"^E","reconciler"]]],"~i586",["^ ","~i0",[["^ ","^1I",0,"^1J",1458],["^ ","^1I",63,"^1J",1461],["^ ","^1I",0,"^1J",1462]],"~i6",[["^ ","^1I",0,"^1J",1461,"^E","fulcro.client.impl.data-fetch/is-deferred-transaction?"]]],"~i588",["^ ","~i3",[["^ ","^1I",134,"^1J",1461,"^E","query"]]],"~i589",["^ ","~i2",[["^ ","^1I",0,"^1J",1462]],"~i3",[["^ ","^1I",7,"^1J",1462,"^E","cljs.core/boolean"]],"^43",[["^ ","^1I",26,"^1J",1462],["^ ","^1I",43,"^1J",1462,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",1463],["^ ","^1I",0,"^1J",1463],["^ ","^1I",20,"^1J",1463,"^E","and__3938__auto__"],["^ ","^1I",0,"^1J",1464],["^ ","^1I",0,"^1J",1466,"^E","and__3938__auto__"]],"^1K",[["^ ","^1I",63,"^1J",1462,"^E","query"]],"^1L",[["^ ","^1I",9,"^1J",1464]],"^1V",[["^ ","^1I",9,"^1J",1464,"^E","cljs.core/vector?"]],"^1[",[["^ ","^1I",33,"^1J",1464,"^E","query"]],"^2;",[["^ ","^1I",45,"^1J",1464],["^ ","^1I",90,"^1J",1464]],"^2?",[["^ ","^1I",45,"^1J",1464,"^E","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^2L",[["^ ","^1I",232,"^1J",1464]],"^2M",[["^ ","^1I",232,"^1J",1464,"^E","cljs.core/first"]],"^2P",[["^ ","^1I",248,"^1J",1464,"^E","query"]]],"~i2407",["^ ","^2X",[["^ ","^1I",22,"^1J",214],["^ ","^1I",22,"^1J",214,"^E","cljs.core/chunk-first"],["^ ","^1I",44,"^1J",214,"^E","s__40789"]]]],"~:cljc",true],"~:cache-keys",["~#cmap",[["^1@","goog/dom/tagname.js"],[1508737613441,"^V","~$goog.dom.HtmlElement"],["^1@","goog/async/freelist.js"],[1508737613441,"^V"],["^1@","cljs/core/async/impl/ioc_helpers.cljs"],[1516100900795,"^V","^U","~$cljs.core.async.impl.protocols"],["^1@","goog/labs/useragent/platform.js"],[1508737613441,"^V","~$goog.labs.userAgent.util","~$goog.string"],["~:macro","^U"],[1537260906000],["^1@","cljs/core/async.cljs"],[1516100900795,"^V","^U","^;B","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers"],["^1@","goog/timer/timer.js"],[1508737613441,"^V","~$goog.Promise","~$goog.events.EventTarget"],["^1@","fulcro/util.cljc"],[1537260907310,"^V","^U","^A","^10","^N"],["^1@","goog/module/basemodule.js"],[1508737613441,"^V","~$goog.Disposable","~$goog.module"],["^1@","cljs/spec/gen/alpha.cljs"],[1537260906289,"^V","^U","~$goog.Uri"],["^1@","cljs/tools/reader/impl/utils.cljs"],[1537358547920,"^V","^U","~$clojure.string","^;D"],["^1@","goog/math/math.js"],[1508737613441,"^V","~$goog.array","~$goog.asserts"],["^1@","goog/events/eventtype.js"],[1508737613441,"^V","~$goog.userAgent"],["^1@","goog/labs/useragent/browser.js"],[1508737613441,"^V","^;Q","^;C","~$goog.object","^;D"],["^1@","goog/html/safeurl.js"],[1508737613441,"^V","^;R","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","^;D","~$goog.string.Const","~$goog.string.TypedString"],["^1@","goog/array/array.js"],[1508737613441,"^V","^;R"],["~:shadow.build.npm/resource","node_modules/prop-types/checkPropTypes.js"],[1537358551000,1529422278000,"~$shadow.js","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"],["^;E","^W"],[1537260907000],["^1@","fulcro/client/primitives.cljc"],[1537260907310,"^V","^U","^;D","~$cljsjs.react","^;T","~$fulcro-css.css-protocols","~$fulcro-css.css-implementation","^=","^L","^Z","^N","~$fulcro.tempid","~$fulcro.transit","~$clojure.zip","^P","^R","~$fulcro.client.impl.parser","^X","^10","^;P","^A","~$cognitect.transit"],["^1@","goog/useragent/useragent.js"],[1508737613441,"^V","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^;C","~$goog.reflect","^;D"],["^;E","~$cljs.tools.reader.reader-types"],[1537358547000],["^;E","^T"],[1537260907000],["^1@","goog/async/run.js"],[1508737613441,"^V","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"],["^1@","com/cognitect/transit/impl/reader.js"],[1482686437866,"^V","~$com.cognitect.transit.impl.decoder","~$com.cognitect.transit.caching"],["^1@","goog/debug/error.js"],[1508737613441,"^V"],["^1@","goog/async/workqueue.js"],[1508737613441,"^V","^;R","~$goog.async.FreeList"],["^1@","goog/events/events.js"],[1508737613441,"^V","^;R","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","~$goog.events.BrowserFeature","~$goog.events.Listenable","~$goog.events.ListenerMap"],["^1@","goog/promise/resolver.js"],[1508737613441,"^V"],["^1@","goog/events/browserfeature.js"],[1508737613441,"^V","^;S"],["^1@","cljs/tools/reader/edn.cljs"],[1537358547920,"^V","^U","~$cljs.tools.reader.impl.errors","^<>","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^;D","~$goog.string.StringBuffer"],["^1@","goog/net/xhrio.js"],[1508737613441,"^V","~$goog.Timer","^;Q","^;R","^<E","^;L","~$goog.json.hybrid","~$goog.log","~$goog.net.ErrorCode","~$goog.net.EventType","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^;D","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","^;S"],["^1@","goog/promise/thenable.js"],[1508737613441,"^V"],["^1@","goog/dom/nodetype.js"],[1508737613441,"^V"],["^1@","goog/net/bulkloaderhelper.js"],[1508737613441,"^V","^;M"],["^1@","cljs/tools/reader/impl/inspect.cljs"],[1537358547920,"^V","^U"],["^1@","com/cognitect/transit/util.js"],[1482686437866,"^V","^;T"],["^;E","~$cljs.spec.gen.alpha"],[1537260906000],["^1@","cljs/tools/reader.cljs"],[1537358547920,"^V","^U","^<>","^<K","^<L","^<J","^;Q","^;D","^<N"],["^1@","goog/module/modulemanager.js"],[1508737613441,"^V","^;M","^;Q","^;R","~$goog.async.Deferred","~$goog.debug.Trace","~$goog.dispose","^<Q","^;N","~$goog.module.AbstractModuleLoader","~$goog.module.ModuleInfo","~$goog.module.ModuleLoadCallback","^;T"],["^1@","goog/net/wrapperxmlhttpfactory.js"],[1508737613441,"^V","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"],["^1@","goog/events/eventtarget.js"],[1508737613441,"^V","^;M","^;R","~$goog.events","~$goog.events.Event","^<H","^<I","^;T"],["^1@","goog/module/moduleinfo.js"],[1508737613441,"^V","^;M","^<A","~$goog.functions","^;N","~$goog.module.BaseModule","^=3"],["^1@","goog/disposable/disposable.js"],[1508737613441,"^V","~$goog.disposable.IDisposable"],["^1@","goog/string/typedstring.js"],[1508737613441,"^V"],["^;[","node_modules/react/index.js"],[1537358551000,499162500000,"^<0","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"],["^1@","shadow/js.js"],[1537358551352,"^V"],["^1@","goog/object/object.js"],[1508737613441,"^V"],["^1@","goog/dom/asserts.js"],[1508737613441,"^V","^;R"],"~:SHADOW-TIMESTAMP",[1537358551000,1537260906000],["^;[","node_modules/react/cjs/react.development.js"],[1537358551000,499162500000,"^<0","~$module$node_modules$object_assign$index","~$module$node_modules$prop_types$checkPropTypes"],["^1@","cljs/stacktrace.cljc"],[1537260906289,"^V","^U","^;D","^;P"],["^1@","goog/math/long.js"],[1508737613441,"^V","^;R","^<="],["^1@","fulcro/transit.cljc"],[1537260907310,"^V","^U","^<9","~$com.cognitect.transit","^<5"],["^1@","goog/events/listener.js"],[1508737613441,"^V","~$goog.events.ListenableKey"],["^1@","goog/html/trustedresourceurl.js"],[1508737613441,"^V","^;R","^;W","^;X","^;Y","^;Z"],["^1@","goog/html/legacyconversions.js"],[1508737613441,"^V","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","~$goog.html.SafeStyleSheet","~$goog.html.SafeUrl","^;V"],["^1@","goog/net/jsloader.js"],[1508737613441,"^V","^;Q","^<Z","~$goog.debug.Error","~$goog.dom","~$goog.dom.TagName","~$goog.dom.safe","^;V","^;T"],["^1@","goog/debug/tracer.js"],[1508737613441,"^V","^;Q","~$goog.debug.Logger","~$goog.iter","^<Q","^<W","~$goog.structs.SimplePool"],["^1@","cljs/core/async/impl/channels.cljs"],[1516100900795,"^V","^U","^;B","^;I","^;G"],["^1@","goog/events/listenermap.js"],[1508737613441,"^V","^;Q","~$goog.events.Listener","^;T"],["^1@","goog/events/eventid.js"],[1508737613441,"^V"],["^1@","goog/functions/functions.js"],[1508737613441,"^V"],["^1@","cljs/core/async/impl/dispatch.cljs"],[1516100900795,"^V","^U","^;G","^<@"],["^1@","goog/html/safestyle.js"],[1508737613441,"^V","^;Q","^;R","^=F","^;D","^;Y","^;Z"],["^1@","goog/dom/safe.js"],[1508737613441,"^V","^;R","~$goog.dom.asserts","^=B","^=C","^=D","^=F","^;V","^;D","^;Y"],["^1@","clojure/walk.cljs"],[1537260906289,"^V","^U"],["^1@","goog/useragent/product.js"],[1508737613441,"^V","^<:","^<<","^;S"],["^1@","cljs/core/async/impl/protocols.cljs"],[1516100900795,"^V","^U"],["^1@","goog/net/eventtype.js"],[1508737613441,"^V"],["^1@","goog/structs/map.js"],[1508737613441,"^V","~$goog.iter.Iterator","~$goog.iter.StopIteration","^;T"],["^1@","com/cognitect/transit/delimiters.js"],[1482686437866,"^V"],["^1@","goog/html/safehtml.js"],[1508737613441,"^V","^;Q","^;R","^=I","~$goog.dom.tags","^=C","^=D","^=E","^=F","^;V","^;W","^;X","^<:","^;T","^;D","^;Y","^;Z"],["^1@","goog/dom/tags.js"],[1508737613441,"^V","^;T"],["^1@","goog/module/moduleloadcallback.js"],[1508737613441,"^V","^<E","^;N"],["^1@","goog/math/size.js"],[1508737613441,"^V"],["^1@","fulcro/client/impl/data_targeting.cljc"],[1537260907310,"^V","^U","^L","^X"],["^;E","^N"],[1537260907000],["^1@","goog/labs/useragent/engine.js"],[1508737613441,"^V","^;Q","^;C","^;D"],["^1@","com/cognitect/transit/impl/decoder.js"],[1482686437866,"^V","~$com.cognitect.transit.util","~$com.cognitect.transit.delimiters","^<C","~$com.cognitect.transit.types"],["^1@","fulcro_css/css_implementation.cljc"],[1537260907310,"^V","^U","~$cljs.tagged-literals","^<3","^;P"],["^1@","cljs/reader.cljs"],[1537260906289,"^V","^U","^;T","^<M","~$cljs.tools.reader.edn","^<N"],["^1@","fulcro_css/css_protocols.cljc"],[1537260907310,"^V","^U"],["^1@","goog/dom/dom.js"],[1508737613441,"^V","^;Q","^;R","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^=I","^=J","^=B","~$goog.html.uncheckedconversions","~$goog.math.Coordinate","~$goog.math.Size","^;T","^;D","~$goog.string.Unicode","^;S"],["^;E","^A"],[1537260906000],["^1@","goog/asserts/asserts.js"],[1508737613441,"^V","^=G","^=Y","^;D"],["^1@","goog/debug/relativetimeprovider.js"],[1508737613441,"^V"],["^1@","cljs/core/async/impl/buffers.cljs"],[1516100900795,"^V","^U","^;B"],["^1@","goog/debug/logbuffer.js"],[1508737613441,"^V","^;R","~$goog.debug.LogRecord"],["^1@","cljs/tagged_literals.cljc"],[1537260906289,"^V","^U","~$cljs.reader"],["^1@","goog/uri/uri.js"],[1508737613441,"^V","^;Q","^;R","^;D","^<V","^<W","^<X","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^1@","goog/net/errorcode.js"],[1508737613441,"^V"],["^1@","goog/i18n/bidi.js"],[1508737613441,"^V"],["^;[","node_modules/object-assign/index.js"],[1537358551000,1484580833000,"^<0"],["^1@","fulcro/client/impl/data_fetch.cljc"],[1537260907310,"^V","^U","^T","^P","^X","^Q","^10","^L","^N","^Z","^W","^R","^A"],["^;E","^="],[1516100900000],["^1@","goog/module/module.js"],[1508737613441,"^V"],["^1@","fulcro/tempid.cljc"],[1537260907310,"^V","^U"],["^1@","cljs/loader.cljs"],[1537260906289,"^V","^U","^;T","~$goog.module.ModuleLoader","~$goog.module.ModuleManager"],["^1@","goog/disposable/idisposable.js"],[1508737613441,"^V"],["^1@","goog/debug/formatter.js"],[1508737613441,"^V","~$goog.debug","^=K","~$goog.debug.RelativeTimeProvider","^=B","^=F","^=Z","^;Y"],["^1@","goog/promise/promise.js"],[1508737613441,"^V","~$goog.Thenable","^;R","^<D","~$goog.async.run","^<A","^=G","~$goog.promise.Resolver"],["^1@","cljs/core/async/impl/timers.cljs"],[1516100900795,"^V","^U","^;B","^;F","^;I"],["^1@","cljs/spec/alpha.cljs"],[1537260906289,"^V","^U","^;T","^10","^<Y","^;P"],["^1@","goog/fs/url.js"],[1508737613441,"^V"],["^1@","goog/debug/logrecord.js"],[1508737613441,"^V"],["^1@","goog/base.js"],[1508737613441],["^1@","fulcro/client/util.cljc"],[1537260907310,"^V","^U","^A","^10","^T","^R","^<6","^X","^<9","^<8"],["^1@","goog/json/hybrid.js"],[1508737613441,"^V","^;R","~$goog.json"],["^1@","goog/structs/structs.js"],[1508737613441,"^V","^;Q","^;T"],["^1@","cljs/tools/reader/impl/errors.cljs"],[1537358547920,"^V","^U","^<>","^;P","~$cljs.tools.reader.impl.inspect"],["^1@","cljsjs/react.cljs"],[1537358551030,"^V","^U","~$module$node_modules$react$index"],["^1@","clojure/string.cljs"],[1537260906289,"^V","^U","^;D","^<N"],["^1@","fulcro/history.cljc"],[1537260907310,"^V","^U","^N","^X","^L","^A"],["^;[","node_modules/react/cjs/react.production.min.js"],[1537358551000,499162500000,"^<0","^=>"],["^1@","goog/net/httpstatus.js"],[1508737613441,"^V"],["^1@","fulcro/client/mutations.cljc"],[1537260907310,"^V","^U","^A","^X","^N","^T","~$cljs.loader","^R","^<8"],["^1@","com/cognitect/transit/handlers.js"],[1482686437866,"^V","^=S","^=U","~$goog.math.Long"],["^1@","fulcro/client/impl/protocols.cljc"],[1537260907310,"^V","^U"],["^1@","goog/debug/entrypointregistry.js"],[1508737613441,"^V","^;R"],["^1@","goog/string/string.js"],[1508737613441,"^V"],["^1@","com/cognitect/transit/types.js"],[1482686437866,"^V","^=S","~$com.cognitect.transit.eq","^>A"],["^1@","goog/module/abstractmoduleloader.js"],[1508737613441,"^V","^;N","^=2"],["^1@","goog/reflect/reflect.js"],[1508737613441,"^V"],["^1@","goog/labs/useragent/util.js"],[1508737613441,"^V","^;D"],["^1@","com/cognitect/transit/eq.js"],[1482686437866,"^V","^=S"],["^;E","~$cljs.core.async.impl.ioc-macros"],[1516100900000],["^1@","goog/debug/debug.js"],[1508737613441,"^V","^;Q","~$goog.debug.errorcontext","^;S"],["^1@","clojure/zip.cljs"],[1537260906289,"^V","^U"],["^1@","goog/string/stringbuffer.js"],[1508737613441,"^V"],["^1@","goog/math/coordinate.js"],[1508737613441,"^V","~$goog.math"],["^1@","goog/debug/errorcontext.js"],[1508737613441,"^V"],["^1@","cljs/tools/reader/reader_types.cljs"],[1537358547920,"^V","^U","^<K","^;D","^<N"],["^1@","goog/iter/iter.js"],[1508737613441,"^V","^;Q","^;R","^=8","^>E"],["^1@","goog/async/nexttick.js"],[1508737613441,"^V","^<E","^=I","^=8","^<:","^<;"],["^1@","goog/html/uncheckedconversions.js"],[1508737613441,"^V","^;R","^=B","^=C","^=D","^=E","^=F","^;V","^;D","^;Y"],["^1@","goog/debug/logger.js"],[1508737613441,"^V","^;Q","^;R","^>8","~$goog.debug.LogBuffer","^>2"],["^1@","com/cognitect/transit/caching.js"],[1482686437866,"^V","^=T"],["^;[","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1537358551000,1529417620000,"^<0"],["^1@","goog/module/moduleloader.js"],[1508737613441,"^V","^<O","^;Q","^=6","^=7","~$goog.events.EventHandler","~$goog.events.EventId","^;L","~$goog.html.legacyconversions","^<:","^<Q","^=1","~$goog.net.BulkLoader","^<S","~$goog.net.jsloader","^;S","~$goog.userAgent.product"],["^1@","goog/events/event.js"],[1508737613441,"^V","^;M","^>H"],["^1@","cljs/tools/reader/impl/commons.cljs"],[1537358547920,"^V","^U","^<J","^<>","^<K"],["^1@","goog/events/eventhandler.js"],[1508737613441,"^V","^;M","^=6","^;T"],["^1@","goog/dom/htmlelement.js"],[1508737613441,"^V"],["^1@","cljs/core.cljs"],[1537260906289,"^>A","~$goog.math.Integer","^;D","^;T","^;Q","^;O","^<N"],["^1@","com/cognitect/transit.js"],[1482686437866,"^V","^=S","~$com.cognitect.transit.impl.reader","~$com.cognitect.transit.impl.writer","^=U","^>B","^<B","^<C"],["^1@","goog/html/safescript.js"],[1508737613441,"^V","^;R","^;Y","^;Z"],["^1@","goog/log/log.js"],[1508737613441,"^V","^>8","~$goog.debug.LogManager","^>2","^=K"],["^1@","fulcro/logging.cljc"],[1537260907310,"^V","^U","^;P","^?","^<Q","^;T","~$goog.debug.Logger.Level","~$goog.debug.Console"],["^1@","goog/html/safestylesheet.js"],[1508737613441,"^V","^;Q","^;R","^=D","^;T","^;D","^;Y","^;Z"],["^1@","goog/events/browserevent.js"],[1508737613441,"^V","^<G","^=7","~$goog.events.EventType","^<=","^;S"],["^1@","goog/math/integer.js"],[1508737613441,"^V"],["^1@","goog/debug/console.js"],[1508737613441,"^V","^>P","^=K","~$goog.debug.TextFormatter"],["^1@","goog/structs/simplepool.js"],[1508737613441,"^V","^;M"],["^1@","goog/dom/browserfeature.js"],[1508737613441,"^V","^;S"],["^1@","goog/net/bulkloader.js"],[1508737613441,"^V","^>G","^;L","^<Q","~$goog.net.BulkLoaderHelper","^<S","~$goog.net.XhrIo"],["^1@","clojure/set.cljs"],[1537260906289,"^V","^U"],["^1@","goog/uri/utils.js"],[1508737613441,"^V","^;Q","^;R","^;D"],["^1@","goog/string/const.js"],[1508737613441,"^V","^;R","^;Z"],["^1@","goog/json/json.js"],[1508737613441,"^V"],["^1@","goog/events/listenable.js"],[1508737613441,"^V","^>H"],["^1@","com/cognitect/transit/impl/writer.js"],[1482686437866,"^V","^=S","^<C","~$com.cognitect.transit.handlers","^=U","^=T","^>A"],["^1@","goog/net/xmlhttpfactory.js"],[1508737613441,"^V","^=4"],["^1@","goog/net/xmlhttp.js"],[1508737613441,"^V","^;R","~$goog.net.WrapperXmlHttpFactory","^=5"],["^1@","fulcro/client/impl/parser.cljc"],[1537260907310,"^V","^U","^L","^N","^X"],["^1@","goog/net/xhrlike.js"],[1508737613441,"^V"],["^1@","goog/mochikit/async/deferred.js"],[1508737611097,"^V","^;K","^>:","^;Q","^;R","^=G"],["^1@","cognitect/transit.cljs"],[1537260903184,"^V","^U","^=@","^=U","^>B","^>A"],["^;E","^>3"],[1537260906000]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",1,"^8",5,"^9",1,"^:",34],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",null,"^C",["^D",[]],"^E","^F","^I",null,"^J",["^ ","^K","^L","^@","^A","^M","^N","^O","^P","^Q","^Q","~$p","^R","^S","^T","^N","^N","^U","^U","^V","^V","^W","^W","^T","^T","^X","^X","^Y","^Z","^L","^L","~$m","^W","^[","^X","~$s","^A","^A","^A","^10","^10","^P","^P","^Z","^Z","^R","^R"],"^11",["^D",["^12"]],"~:shadow/js-access-global",["^D",["Error"]],"^13",["^ ","^14","^Q","^15","^10"],"~:defs",["^ ","~$set-failed!",["^ ","~:protocol-inline",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",423,"^8",9,"^9",423,"^:",20,"~:arglists",["^18",["~$quote",["^18",[["~$state"],["^?4","~$params"]]]]],"~:doc","Returns a marker (based on the input state) that is in the error state","~:top-fn",["^ ","~:variadic",false,"~:max-fixed-arity",2,"~:method-params",["^18",[["^?4"],["^?4","^?5"]]],"^?2",["^18",[["^?4"],["^?4","^?5"]]],"~:arglists-meta",["^18",[null,null]]]],"^E","~$fulcro.client.impl.data-fetch/set-failed!","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",20,"^?7",["^ ","^?8",false,"^?9",2,"^?:",["^18",[["^?4"],["^?4","^?5"]]],"^?2",["^18",[["^?4"],["^?4","^?5"]]],"^?;",["^18",[null,null]]],"^?:",["^18",[["^?4"],["^?4","^?5"]]],"~:protocol-impl",null,"^?;",["^18",[null,null]],"^8",3,"^7",423,"^9",423,"^?9",2,"~:fn-var",true,"^?2",["^18",[["^?4"],["^?4","^?5"]]],"^?6","Returns a marker (based on the input state) that is in the error state"],"~$special-target?",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",443,"^8",7,"^9",443,"^:",22,"^?2",["^18",["^?3",["^18",[["~$t"]]]]]],"^E","~$fulcro.client.impl.data-fetch/special-target?","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",22,"^?:",["^18",[["~$t"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",443,"^9",443,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["~$t"]]]]]],"~$mark-parallel-loading!",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",101,"^8",7,"^9",101,"^:",29,"^?2",["^18",["^?3",["^18",[["~$remote-name","~$reconciler"]]]]],"^?6","Marks all of the items in the ready-to-load state as loading, places the loading markers in the appropriate locations\n  in the app state, and return maps with the keys:\n\n  `query` : The full query to send to the server.\n  `on-load` : The function to call to merge a response. Detects missing data and sets failure markers for those.\n  `on-error` : The function to call to set network/server error(s) in place of loading markers.\n  `load-descriptors` : Args to pass back to on-load and on-error. These are separated\n    so that `rewrite-tempids-in-request-queue` can rewrite tempids for merge and\n    error callbacks\n\n  response-channel will have the response posted to it when the request is done.\n  ."],"^E","~$fulcro.client.impl.data-fetch/mark-parallel-loading!","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",29,"^?:",["^18",[["^?B","^?C"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",101,"^9",101,"^?9",2,"^?>",true,"^?2",["^18",["^?3",["^18",[["^?B","^?C"]]]]],"^?6","Marks all of the items in the ready-to-load state as loading, places the loading markers in the appropriate locations\n  in the app state, and return maps with the keys:\n\n  `query` : The full query to send to the server.\n  `on-load` : The function to call to merge a response. Detects missing data and sets failure markers for those.\n  `on-error` : The function to call to set network/server error(s) in place of loading markers.\n  `load-descriptors` : Args to pass back to on-load and on-error. These are separated\n    so that `rewrite-tempids-in-request-queue` can rewrite tempids for merge and\n    error callbacks\n\n  response-channel will have the response posted to it when the request is done.\n  ."],"~$data-target",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",355,"^8",7,"^9",355,"^:",18,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Return the ident (if any) of the component related to the query in the data state marker. An ident is required\n  to be present if the marker is targeting a field."],"^E","~$fulcro.client.impl.data-fetch/data-target","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",18,"^?:",["^18",[["^?4"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",355,"^9",355,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Return the ident (if any) of the component related to the query in the data state marker. An ident is required\n  to be present if the marker is targeting a field."],"~$is-deferred-transaction?",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",587,"^8",7,"^9",587,"^:",31,"^?2",["^18",["^?3",["^18",[["~$query"]]]]],"^?6","Returns true if the outgoing query is just a placeholder indicator for a deferred transaction in the load queue."],"^E","~$fulcro.client.impl.data-fetch/is-deferred-transaction?","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",31,"^?:",["^18",[["^?H"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",587,"^9",587,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["^?H"]]]]],"^?6","Returns true if the outgoing query is just a placeholder indicator for a deferred transaction in the load queue."],"~$failed?",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",59,"^8",9,"^9",59,"^:",16,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Test if the given item is a data state marker in the failed state"],"^E","~$fulcro.client.impl.data-fetch/failed?","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",16,"^?:",["^18",[["^?4"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",3,"^7",59,"^9",59,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Test if the given item is a data state marker in the failed state"],"~$relocate-targeted-results!",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",447,"^8",7,"^9",447,"^:",33,"^?2",["^18",["^?3",["^18",[["~$state-atom","~$items"]]]]],"^?6","For items that are manually targeted, move them in app state from their result location to their target location."],"^E","~$fulcro.client.impl.data-fetch/relocate-targeted-results!","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",33,"^?:",["^18",[["^?M","^?N"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",447,"^9",447,"^?9",2,"^?>",true,"^?2",["^18",["^?3",["^18",[["^?M","^?N"]]]]],"^?6","For items that are manually targeted, move them in app state from their result location to their target location."],"~$split-items-ready-to-load",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",163,"^8",7,"^9",163,"^:",32,"^?2",["^18",["^?3",["^18",[["~$items-ready-to-load"]]]]],"^?6","This function is used to split accidental colliding queries into separate network\n  requests. The most general description of this issue is\n  from two unrelated `load` calls when black-box composing functions. The two\n  separate queries: One issues `[{:entitlements [:foo]}]`, and the other\n  asks for `[{:entitlements [:bar]}]`. Fulcro merges these into a single query\n  [{:entitlements [:foo]} {:entitlements [:bar]}]. However, the response to a query\n  is a map, and such a query would result in the backend parser being called twice (once per key in the subquery)\n  but one would stomp on the other.\n\n  The other potential collision is if a load includes an abort ID. In this case such a load should not be batched\n  with others because aborting it would take others down with it.\n\n  Thus, this function ensures such accidental collisions are not combined into a single network request.\n\n  This functions returns a list of the load items that can be batched (from the beginning, in order) and the\n  remainder of the items which must be deferred to another request."],"^E","~$fulcro.client.impl.data-fetch/split-items-ready-to-load","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",32,"^?:",["^18",[["^?Q"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",163,"^9",163,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["^?Q"]]]]],"^?6","This function is used to split accidental colliding queries into separate network\n  requests. The most general description of this issue is\n  from two unrelated `load` calls when black-box composing functions. The two\n  separate queries: One issues `[{:entitlements [:foo]}]`, and the other\n  asks for `[{:entitlements [:bar]}]`. Fulcro merges these into a single query\n  [{:entitlements [:foo]} {:entitlements [:bar]}]. However, the response to a query\n  is a map, and such a query would result in the backend parser being called twice (once per key in the subquery)\n  but one would stomp on the other.\n\n  The other potential collision is if a load includes an abort ID. In this case such a load should not be batched\n  with others because aborting it would take others down with it.\n\n  Thus, this function ensures such accidental collisions are not combined into a single network request.\n\n  This functions returns a list of the load items that can be batched (from the beginning, in order) and the\n  remainder of the items which must be deferred to another request."],"~$data-state?",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",45,"^8",7,"^9",45,"^:",18,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Test if the given bit of state is a data fetch state-tracking marker"],"^E","~$fulcro.client.impl.data-fetch/data-state?","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",18,"^?:",["^18",[["^?4"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",45,"^9",45,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Test if the given bit of state is a data fetch state-tracking marker"],"~$ready?",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",53,"^8",9,"^9",53,"^:",15,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Test if the given item is a data state marker that is in the ready state"],"^E","~$fulcro.client.impl.data-fetch/ready?","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",15,"^?:",["^18",[["^?4"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",3,"^7",53,"^9",53,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Test if the given item is a data state marker that is in the ready state"],"~$prepend-target?",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",440,"^8",7,"^9",440,"^:",22,"^?2",["^18",["^?3",["^18",[["~$t"]]]]]],"^E","~$fulcro.client.impl.data-fetch/prepend-target?","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",22,"^?:",["^18",[["~$t"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",440,"^9",440,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["~$t"]]]]]],"~$ready-state",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",303,"^8",7,"^9",303,"^:",18,"^?2",["^18",["^?3",["^18",[[["^ ","~:keys",["~$ident","~$field","^?5","~$remote","~$without","^?H","~$post-mutation","~$post-mutation-params","~$fallback","~$parallel","~$refresh","~$marker","~$target","~$env","~$initialize","~$abort-id"],"~:or",["^ ","^@1","~:remote","^@2",["^D",[]],"^@7",[],"^@8",true]]]]]]],"^?6","Generate a ready-to-load state with all of the necessary details to do\n  remoting and merging."],"^E","~$fulcro.client.impl.data-fetch/ready-state","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",18,"^?:",["^18",[["~$p__40918"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",303,"^9",303,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[[["^ ","^?Z",["^?[","^@0","^?5","^@1","^@2","^?H","^@3","^@4","^@5","^@6","^@7","^@8","^@9","^@:","^@;","^@<"],"^@=",["^ ","^@1","^@>","^@2",["^D",[]],"^@7",[],"^@8",true]]]]]]],"^?6","Generate a ready-to-load state with all of the necessary details to do\n  remoting and merging."],"~$set-loading!",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",418,"^8",9,"^9",418,"^:",21,"^?2",["^18",["^?3",["^18",[["^?4"],["^?4","^?5"]]]]],"^?6","Returns a marker (based on the input state) that is in the loading state (and ensures that it has a UUID)","^?7",["^ ","^?8",false,"^?9",2,"^?:",["^18",[["^?4"],["^?4","^?5"]]],"^?2",["^18",[["^?4"],["^?4","^?5"]]],"^?;",["^18",[null,null]]]],"^E","~$fulcro.client.impl.data-fetch/set-loading!","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",21,"^?7",["^ ","^?8",false,"^?9",2,"^?:",["^18",[["^?4"],["^?4","^?5"]]],"^?2",["^18",[["^?4"],["^?4","^?5"]]],"^?;",["^18",[null,null]]],"^?:",["^18",[["^?4"],["^?4","^?5"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",3,"^7",418,"^9",418,"^?9",2,"^?>",true,"^?2",["^18",[["^?4"],["^?4","^?5"]]],"^?6","Returns a marker (based on the input state) that is in the loading state (and ensures that it has a UUID)"],"~$data-marker",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",375,"^8",7,"^9",375,"^:",18,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Returns the ID of the data marker, or nil/false if there isn't one. True means to use the old marker behavior of\n  replacing the data in app state with a marker (DEPRECATED)"],"^E","~$fulcro.client.impl.data-fetch/data-marker","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",18,"^?:",["^18",[["^?4"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",375,"^9",375,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Returns the ID of the data marker, or nil/false if there isn't one. True means to use the old marker behavior of\n  replacing the data in app state with a marker (DEPRECATED)"],"~$elide-ast-nodes",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",273,"^8",7,"^9",273,"^:",22,"^?2",["^18",["^?3",["^18",[[["^ ","^?Z",["~$key","~$union-key","~$children"],"^1:","~$ast"],"~$elision-set"]]]]],"^?6","Remove items from a query (AST) that have a key listed in the elision-set"],"^E","~$fulcro.client.impl.data-fetch/elide-ast-nodes","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",22,"^?:",["^18",[["~$p__40901","^@J"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",273,"^9",273,"^?9",2,"^?>",true,"^?2",["^18",["^?3",["^18",[[["^ ","^?Z",["^@F","^@G","^@H"],"^1:","^@I"],"^@J"]]]]],"^?6","Remove items from a query (AST) that have a key listed in the elision-set"],"~$data-marker?",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",379,"^8",7,"^9",379,"^:",19,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Test if the user desires a copy of the state marker to appear in the app state at the data path of the target data."],"^E","~$fulcro.client.impl.data-fetch/data-marker?","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",19,"^?:",["^18",[["^?4"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",379,"^9",379,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Test if the user desires a copy of the state marker to appear in the app state at the data path of the target data."],"~$replacement-target?",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",439,"^8",7,"^9",439,"^:",26,"^?2",["^18",["^?3",["^18",[["~$t"]]]]]],"^E","~$fulcro.client.impl.data-fetch/replacement-target?","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",26,"^?:",["^18",[["~$t"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",439,"^9",439,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["~$t"]]]]]],"~$place-load-marker",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",71,"^8",8,"^9",71,"^:",25,"~:private",true,"^?2",["^18",["^?3",["^18",[["~$state-map","^@8"]]]]]],"^@R",true,"^E","~$fulcro.client.impl.data-fetch/place-load-marker","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",25,"^?:",["^18",[["^@S","^@8"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",71,"^9",71,"^?9",2,"^?>",true,"^?2",["^18",["^?3",["^18",[["^@S","^@8"]]]]]],"~$data-path",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",396,"^8",7,"^9",396,"^:",16,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Get the app-state database path of the target of the load that the given data state marker is trying to load."],"^E","~$fulcro.client.impl.data-fetch/data-path","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",16,"^?:",["^18",[["^?4"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",396,"^9",396,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Get the app-state database path of the target of the load that the given data state marker is trying to load."],"~$inject-query-params",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",283,"^8",7,"^9",283,"^:",26,"^?2",["^18",["^?3",["^18",[["^@I","^?5"]]]]],"^?6","Inject parameters into elements of the top-level query.\n\n  `params` is a map from keyword (on the query in the AST) to parameter maps. So, given the AST for this query:\n\n  ```\n  [:a :b :c]\n  ```\n\n  and a `params` of `{:a {:x 1} :c {:y 2}}` you'll get an AST representing:\n\n  ```\n  [(:a {:x 1}) :b (:c {:y 2})]\n  ```\n  "],"^E","~$fulcro.client.impl.data-fetch/inject-query-params","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",26,"^?:",["^18",[["^@I","^?5"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",283,"^9",283,"^?9",2,"^?>",true,"^?2",["^18",["^?3",["^18",[["^@I","^?5"]]]]],"^?6","Inject parameters into elements of the top-level query.\n\n  `params` is a map from keyword (on the query in the AST) to parameter maps. So, given the AST for this query:\n\n  ```\n  [:a :b :c]\n  ```\n\n  and a `params` of `{:a {:x 1} :c {:y 2}}` you'll get an AST representing:\n\n  ```\n  [(:a {:x 1}) :b (:c {:y 2})]\n  ```\n  "],"~$mark-loading",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",207,"^8",7,"^9",207,"^:",19,"^?2",["^18",["^?3",["^18",[["^@1","^?C"]]]]],"^?6","Marks all of the items in the ready-to-load state as loading, places the loading markers in the appropriate locations\n  in the app state, and returns a map with the keys:\n\n  `query` : The full query to send to the server.\n  `on-load` : The function to call to merge a response. Detects missing data and sets failure markers for those.\n  `on-error` : The function to call to set network/server error(s) in place of loading markers.\n  `load-descriptors` : Args to pass back to on-load and on-error. These are separated\n    so that `rewrite-tempids-in-request-queue` can rewrite tempids for merge and\n    error callbacks\n\n  response-channel will have the response posted to it when the request is done.\n  ."],"^E","~$fulcro.client.impl.data-fetch/mark-loading","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",19,"^?:",["^18",[["^@1","^?C"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",207,"^9",207,"^?9",2,"^?>",true,"^?2",["^18",["^?3",["^18",[["^@1","^?C"]]]]],"^?6","Marks all of the items in the ready-to-load state as loading, places the loading markers in the appropriate locations\n  in the app state, and returns a map with the keys:\n\n  `query` : The full query to send to the server.\n  `on-load` : The function to call to merge a response. Detects missing data and sets failure markers for those.\n  `on-error` : The function to call to set network/server error(s) in place of loading markers.\n  `load-descriptors` : Args to pass back to on-load and on-error. These are separated\n    so that `rewrite-tempids-in-request-queue` can rewrite tempids for merge and\n    error callbacks\n\n  response-channel will have the response posted to it when the request is done.\n  ."],"~$dedupe-by",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",143,"^8",7,"^9",143,"^:",16,"^?2",["^18",["^?3",["^18",[["~$keys-fn"],["^A0","~$coll"]]]]],"^?6","Returns a lazy sequence of the elements of coll with dupes removed.\n   An element is a duplicate IFF (keys-fn element) has key collision with any prior element\n   to come before it. E.g. (dedupe-by identity [[:a] [:b] [:a] [:a :c]]) => [[:a] [:b]]\n   Returns a stateful transducer when no collection is provided.","^?7",["^ ","^?8",false,"^?9",2,"^?:",["^18",[["^A0"],["^A0","^A1"]]],"^?2",["^18",[["^A0"],["^A0","^A1"]]],"^?;",["^18",[null,null]]]],"^E","~$fulcro.client.impl.data-fetch/dedupe-by","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",16,"^?7",["^ ","^?8",false,"^?9",2,"^?:",["^18",[["^A0"],["^A0","^A1"]]],"^?2",["^18",[["^A0"],["^A0","^A1"]]],"^?;",["^18",[null,null]]],"^?:",["^18",[["^A0"],["^A0","^A1"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",143,"^9",143,"^?9",2,"^?>",true,"^?2",["^18",[["^A0"],["^A0","^A1"]]],"^?6","Returns a lazy sequence of the elements of coll with dupes removed.\n   An element is a duplicate IFF (keys-fn element) has key collision with any prior element\n   to come before it. E.g. (dedupe-by identity [[:a] [:b] [:a] [:a :c]]) => [[:a] [:b]]\n   Returns a stateful transducer when no collection is provided."],"~$earliest-load-time",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",95,"^8",7,"^9",95,"^:",25,"^?2",["^18",["^?3",["^18",[["~$load-markers"]]]]],"^?6","Given a sequence of load markers, returns the history tx-time of the earliest one. Returns hist/max-tx-time if there\n  are no markers or none have a time."],"^E","~$fulcro.client.impl.data-fetch/earliest-load-time","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",25,"^?:",["^18",[["^A4"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",95,"^9",95,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["^A4"]]]]],"^?6","Given a sequence of load markers, returns the history tx-time of the earliest one. Returns hist/max-tx-time if there\n  are no markers or none have a time."],"~$error-callback",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",546,"^8",8,"^9",546,"^:",22,"^@R",true,"^?2",["^18",["^?3",["^18",[["^?C"]]]]],"^?6","Generates a callback that is used whenever a hard server error occurs (status code 400+ or network error).\n\n  The generated callback:\n\n  - Replaces affected loading markers with error markers (if :marker is true on the load item)\n  - Runs fallbacks associated with the loads\n  - Sets the global error marker (:fulcro/server-error)\n  - Refreshes UI (from root if there were fallbacks)\n  "],"^@R",true,"^E","~$fulcro.client.impl.data-fetch/error-callback","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",22,"^?:",["^18",[["^?C"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",546,"^9",546,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["^?C"]]]]],"^?6","Generates a callback that is used whenever a hard server error occurs (status code 400+ or network error).\n\n  The generated callback:\n\n  - Replaces affected loading markers with error markers (if :marker is true on the load item)\n  - Runs fallbacks associated with the loads\n  - Sets the global error marker (:fulcro/server-error)\n  - Refreshes UI (from root if there were fallbacks)\n  "],"~$loading?",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",56,"^8",9,"^9",56,"^:",17,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Test if the given item is a data state marker in the loading state"],"^E","~$fulcro.client.impl.data-fetch/loading?","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",17,"^?:",["^18",[["^?4"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",3,"^7",56,"^9",56,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Test if the given item is a data state marker in the loading state"],"~$data-field",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",369,"^8",7,"^9",369,"^:",17,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Get the target field (if any) from the data state marker"],"^E","~$fulcro.client.impl.data-fetch/data-field","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",17,"^?:",["^18",[["^?4"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",369,"^9",369,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Get the target field (if any) from the data state marker"],"~$data-remote",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",385,"^8",7,"^9",385,"^:",18,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Get the remote that this marker is meant to talk to"],"^E","~$fulcro.client.impl.data-fetch/data-remote","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",18,"^?:",["^18",[["^?4"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",385,"^9",385,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Get the remote that this marker is meant to talk to"],"~$multiple-targets?",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",442,"^8",7,"^9",442,"^:",24,"^?2",["^18",["^?3",["^18",[["~$t"]]]]]],"^E","~$fulcro.client.impl.data-fetch/multiple-targets?","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",24,"^?:",["^18",[["~$t"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",442,"^9",442,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["~$t"]]]]]],"~$callback-env",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",476,"^8",7,"^9",476,"^:",19,"^?2",["^18",["^?3",["^18",[["^?C","~$load-request","~$original-env"]]]]],"^?6","Build a callback env for post mutations and fallbacks"],"^E","~$fulcro.client.impl.data-fetch/callback-env","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",19,"^?:",["^18",[["^?C","^AA","^AB"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",476,"^9",476,"^?9",3,"^?>",true,"^?2",["^18",["^?3",["^18",[["^?C","^AA","^AB"]]]]],"^?6","Build a callback env for post mutations and fallbacks"],"~$data-refresh",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",382,"^8",7,"^9",382,"^:",19,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Get the list of query keywords that should be refreshed (re-rendered) when this load completes."],"^E","~$fulcro.client.impl.data-fetch/data-refresh","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",19,"^?:",["^18",[["^?4"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",382,"^9",382,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Get the list of query keywords that should be refreshed (re-rendered) when this load completes."],"~$mark-ready",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",342,"^8",7,"^9",342,"^:",17,"^?2",["^18",["^?3",["^18",[[["^ ","^?Z",["^@:"],"^1:","~$config"]]]]]],"^?6","Place a ready-to-load marker into the application state. This should be done from\n  a mutate function that is abstractly loading something. This is intended for internal use.\n\n  See the `load` and `load-field` functions in `fulcro.client.data-fetch` for the public API."],"^E","~$fulcro.client.impl.data-fetch/mark-ready","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",17,"^?:",["^18",[["~$p__40950"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",342,"^9",342,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[[["^ ","^?Z",["^@:"],"^1:","^AG"]]]]]],"^?6","Place a ready-to-load marker into the application state. This should be done from\n  a mutate function that is abstractly loading something. This is intended for internal use.\n\n  See the `load` and `load-field` functions in `fulcro.client.data-fetch` for the public API."],"~$data-query-key",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",388,"^8",7,"^9",388,"^:",21,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Get the 'primary' query key of the data fetch. This is defined as the first keyword of the overall query (which might\n  be a simple prop or join key for example)"],"^E","~$fulcro.client.impl.data-fetch/data-query-key","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",21,"^?:",["^18",[["^?4"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",388,"^9",388,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Get the 'primary' query key of the data fetch. This is defined as the first keyword of the overall query (which might\n  be a simple prop or join key for example)"],"~$make-data-state",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",258,"^8",7,"^9",258,"^:",22,"^?2",["^18",["^?3",["^18",[["~$type"],["^AM","^?5"]]]]],"^?6","This is just a testing function -- using ready-state as public interface and call the\n  `set-{type}!` functions to change it as needed.","^?7",["^ ","^?8",false,"^?9",2,"^?:",["^18",[["^AM"],["^AM","^?5"]]],"^?2",["^18",[["^AM"],["^AM","^?5"]]],"^?;",["^18",[null,null]]]],"^E","~$fulcro.client.impl.data-fetch/make-data-state","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",22,"^?7",["^ ","^?8",false,"^?9",2,"^?:",["^18",[["^AM"],["^AM","^?5"]]],"^?2",["^18",[["^AM"],["^AM","^?5"]]],"^?;",["^18",[null,null]]],"^?:",["^18",[["^AM"],["^AM","^?5"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",258,"^9",258,"^?9",2,"^?>",true,"^?2",["^18",[["^AM"],["^AM","^?5"]]],"^?6","This is just a testing function -- using ready-state as public interface and call the\n  `set-{type}!` functions to change it as needed."],"~$marker-table",["^ ","^E","~$fulcro.client.impl.data-fetch/marker-table","^6","fulcro/client/impl/data_fetch.cljc","^7",68,"^8",1,"^9",68,"^:",18,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",68,"^8",6,"^9",68,"^:",18],"~:tag","~$cljs.core/Keyword"],"~$tick!",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",490,"^8",8,"^9",490,"^:",13,"^@R",true,"^?2",["^18",["^?3",["^18",[["~$r"]]]]],"^?6","Ability to mock in tests"],"^@R",true,"^E","~$fulcro.client.impl.data-fetch/tick!","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",13,"^?:",["^18",[["~$r"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",490,"^9",490,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["~$r"]]]]],"^?6","Ability to mock in tests"],"~$data-uuid",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",372,"^8",7,"^9",372,"^:",16,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Get the UUID of the data fetch"],"^E","~$fulcro.client.impl.data-fetch/data-uuid","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",16,"^?:",["^18",[["^?4"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",372,"^9",372,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Get the UUID of the data fetch"],"~$set-ready!",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",414,"^8",9,"^9",414,"^:",19,"^?2",["^18",["^?3",["^18",[["^?4"],["^?4","^?5"]]]]],"^?6","Returns a state (based on the input state) that is in the 'ready' to load state.","^?7",["^ ","^?8",false,"^?9",2,"^?:",["^18",[["^?4"],["^?4","^?5"]]],"^?2",["^18",[["^?4"],["^?4","^?5"]]],"^?;",["^18",[null,null]]]],"^E","~$fulcro.client.impl.data-fetch/set-ready!","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",19,"^?7",["^ ","^?8",false,"^?9",2,"^?:",["^18",[["^?4"],["^?4","^?5"]]],"^?2",["^18",[["^?4"],["^?4","^?5"]]],"^?;",["^18",[null,null]]],"^?:",["^18",[["^?4"],["^?4","^?5"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",3,"^7",414,"^9",414,"^?9",2,"^?>",true,"^?2",["^18",[["^?4"],["^?4","^?5"]]],"^?6","Returns a state (based on the input state) that is in the 'ready' to load state."],"~$place-load-markers",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",82,"^8",8,"^9",82,"^:",26,"^@R",true,"^?2",["^18",["^?3",["^18",[["^@S","~$items-to-load"]]]]],"^?6","Place load markers in the app state at their data paths so that UI rendering can see them."],"^@R",true,"^E","~$fulcro.client.impl.data-fetch/place-load-markers","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",26,"^?:",["^18",[["^@S","^AZ"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",82,"^9",82,"^?9",2,"^?>",true,"^?2",["^18",["^?3",["^18",[["^@S","^AZ"]]]]],"^?6","Place load markers in the app state at their data paths so that UI rendering can see them."],"~$loaded-callback",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",494,"^8",8,"^9",494,"^:",23,"^@R",true,"^?2",["^18",["^?3",["^18",[["^?C"]]]]],"^?6","Generates a callback that processes all of the post-processing steps once a remote ***load*** has completed. This includes:\n\n  - Marking the items that were queried for but not returned as 'missing' (see documentation on mark and sweep of db)\n  - Refreshing elements of the UI that were included in the data fetch :refresh option\n  - Removing loading markers related to the executed loads that were not overwritten by incoming data\n  - Merging the incoming data into the normalized database\n  - Running post-mutations for any fetches that completed\n  - Updating the global loading marker\n  - Triggering re-render for all data item refresh lists\n  - Removing the activity from history tracking\n  "],"^@R",true,"^E","~$fulcro.client.impl.data-fetch/loaded-callback","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",23,"^?:",["^18",[["^?C"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",494,"^9",494,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["^?C"]]]]],"^?6","Generates a callback that processes all of the post-processing steps once a remote ***load*** has completed. This includes:\n\n  - Marking the items that were queried for but not returned as 'missing' (see documentation on mark and sweep of db)\n  - Refreshing elements of the UI that were included in the data fetch :refresh option\n  - Removing loading markers related to the executed loads that were not overwritten by incoming data\n  - Merging the incoming data into the normalized database\n  - Running post-mutations for any fetches that completed\n  - Updating the global loading marker\n  - Triggering re-render for all data item refresh lists\n  - Removing the activity from history tracking\n  "],"~$remove-marker",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",462,"^8",8,"^9",462,"^:",21,"^@R",true,"^?2",["^18",["^?3",["^18",[["~$app-state","~$item"]]]]],"^?6","Returns app-state without the load marker for the given item."],"^@R",true,"^E","~$fulcro.client.impl.data-fetch/remove-marker","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",21,"^?:",["^18",[["^B3","^B4"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",462,"^9",462,"^?9",2,"^?>",true,"^?2",["^18",["^?3",["^18",[["^B3","^B4"]]]]],"^?6","Returns app-state without the load marker for the given item."],"~$is-direct-table-load?",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",63,"^8",7,"^9",63,"^:",28,"^?2",["^18",["^?3",["^18",[["~$load-marker"]]]]]],"^E","~$fulcro.client.impl.data-fetch/is-direct-table-load?","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",28,"^?:",["^18",[["^B7"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",63,"^9",63,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["^B7"]]]]]],"~$data-ident",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",359,"^8",7,"^9",359,"^:",17,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Return the ident (if any) of the component related to the query in the data state marker. An ident is required\n  to be present if the marker is targeting a field."],"^E","~$fulcro.client.impl.data-fetch/data-ident","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",17,"^?:",["^18",[["^?4"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",359,"^9",359,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Return the ident (if any) of the component related to the query in the data state marker. An ident is required\n  to be present if the marker is targeting a field."],"~$data-query",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",363,"^8",7,"^9",363,"^:",17,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Get the query that will be sent to the server as a result of the given data state marker"],"^E","~$fulcro.client.impl.data-fetch/data-query","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",17,"^?:",["^18",[["^?4"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",363,"^9",363,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Get the query that will be sent to the server as a result of the given data state marker"],"~$data-params",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",406,"^8",7,"^9",406,"^:",18,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Get the parameters that the user wants to add to the first join/keyword of the data fetch query."],"^E","~$fulcro.client.impl.data-fetch/data-params","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",18,"^?:",["^18",[["^?4"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",406,"^9",406,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["^?4"]]]]],"^?6","Get the parameters that the user wants to add to the first join/keyword of the data fetch query."],"~$optional",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",16,"^8",7,"^9",16,"^:",15,"^?2",["^18",["^?3",["^18",[["~$pred"]]]]]],"^E","~$fulcro.client.impl.data-fetch/optional","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",15,"^?:",["^18",[["^B@"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",16,"^9",16,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["^B@"]]]]]],"~$valid-types",["^ ","^E","~$fulcro.client.impl.data-fetch/valid-types","^6","fulcro/client/impl/data_fetch.cljc","^7",256,"^8",1,"^9",256,"^:",17,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",256,"^8",6,"^9",256,"^:",17],"^AQ","~$cljs.core/ISet"],"~$process-target",["^ ","^E","~$fulcro.client.impl.data-fetch/process-target","^6","fulcro/client/impl/data_fetch.cljc","^7",445,"^8",1,"^9",445,"^:",20,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",445,"^8",6,"^9",445,"^:",20]],"~$append-target?",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",441,"^8",7,"^9",441,"^:",21,"^?2",["^18",["^?3",["^18",[["~$t"]]]]]],"^E","~$fulcro.client.impl.data-fetch/append-target?","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",21,"^?:",["^18",[["~$t"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",441,"^9",441,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["~$t"]]]]]],"~$set-global-loading!",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",433,"^8",8,"^9",433,"^:",27,"^@R",true,"^?2",["^18",["^?3",["^18",[["^?C"]]]]]],"^@R",true,"^E","~$fulcro.client.impl.data-fetch/set-global-loading!","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",27,"^?:",["^18",[["^?C"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",433,"^9",433,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["^?C"]]]]]],"~$full-query",["^ ","^?1",null,"^5",["^ ","^6","fulcro/client/impl/data_fetch.cljc","^7",429,"^8",7,"^9",429,"^:",17,"^?2",["^18",["^?3",["^18",[["^?N"]]]]],"^?6","Composes together the queries of a sequence of data states into a single query."],"^E","~$fulcro.client.impl.data-fetch/full-query","^?8",false,"^6","fulcro/client/impl/data_fetch.cljc","^:",17,"^?:",["^18",[["^?N"]]],"^?=",null,"^?;",["^18",[null,null]],"^8",1,"^7",429,"^9",429,"^?9",1,"^?>",true,"^?2",["^18",["^?3",["^18",[["^?N"]]]]],"^?6","Composes together the queries of a sequence of data states into a single query."]],"^16",["^ ","^@","^A","^M","^N","^S","^T","^N","^N","^U","^U","^W","^W","^T","^T","~$m","^W","~$s","^A","^A","^A"],"~:cljs.analyzer/constants",["^ ","^11",["^D",["~:args","~:nothing","~:req-un","~:opt-un","^@>","~$cljs.core/boolean?","~:fulcro/force-root","~:ret","~:gfn","~:children","~:union-key","~$cljs.core/keyword?","~:pred-exprs","~:keys-pred","~:ready","~:fulcro.history/history-atom","~$cljs.core/vector?","~:fulcro.client.impl.data-fetch/initialize","~:opt-keys","~:fulcro.client.network/abort-id","~:key","~:refresh","~:else","~$cljs.spec.alpha/coll-of","~:ui/fetch-state","~$cljs.spec.alpha/cat","~:cljs.spec.alpha/kind-form","~:parallel","~:fulcro.history/tx-time","~:fulcro.client.impl.data-fetch/uuid","~:fulcro.client.impl.data-fetch/network-error","~:warn","~:fallback","~:marker","~$cljs.core/string?","~:fulcro.client.impl.data-fetch/network-result","~:current-keys","~:req-specs","~$cljs.spec.alpha/or","~:value","^6","~:reconciler","~:current-abort-id","^A[","~:params","~:fulcro.client.impl.data-fetch/parallel","~$cljs.spec.alpha/fspec","~:field","~:fulcro.client.impl.data-fetch/target","^B@","~:fulcro.client.impl.data-fetch/original-env","~:state","~:false","~:fulcro.client.impl.data-fetch/on-error","~$cljs.core/contains?","~$cljs.core/map?","~:env","~:cljs.spec.alpha/cpred","~:ui.fulcro.client.data-fetch.load-markers/by-id","~$%","~:post-mutation","~:otherwise","~$cljs.core/fn?","~:fulcro/loads-in-progress","~$cljs.core/true?","~:without","~$cljs.spec.alpha/keys","~:fulcro.client.impl.data-fetch/load-marker","~:initialize","^BA","~:reference","~:req","~:fulcro.client.primitives/ident","~$fulcro.client.primitives/reconciler?","^7","~:loading","~:load-request","^?D","~:fulcro.client.primitives/remote","~:nil","~$cljs.core/nil?","~:req-keys","~:ident","~$cljs.core/false?","~:fulcro.client.primitives/query","~$cljs.core/fn","~:dispatch-key","~:opt-specs","~:fulcro.client.impl.data-fetch/params","~:post-mutation-params","~:fulcro.client.impl.data-fetch/payload","~:pred-forms","~:action","~:fulcro.client.impl.data-fetch/load-descriptors","~:error","~:fulcro.client.impl.data-fetch/refresh","~:fulcro/ready-to-load","~:ui/loading-data","^@Z","~:fulcro.client.impl.data-fetch/type","~:legacy","~:target","~:fulcro.client.impl.data-fetch/deferred-transaction","~$cljs.core/symbol?","~:items","~:query","~:abort-id","~:fulcro/server-error","~:fulcro.client.impl.data-fetch/post-mutation-params","~:cljs.spec.alpha/conform-all","~:fulcro.client.impl.data-fetch/on-load","~:always","~:failed","~$cljs.core/any?","~:fulcro.client.impl.data-fetch/fallback","~:fulcro.client.impl.data-fetch/marker","~:fulcro.client.impl.data-fetch/post-mutation","~:server-query","~:cljs.spec.alpha/describe","~:opt","~:fulcro.client.impl.data-fetch/field"]],"~:order",["^BO","^CH","^D>","^B@","^DP","^BX","^C>","^CC","^CO","^BA","^C1","^E9","^E5","^DT","^DY","^CU","^DM","^E4","^CG","^D6","^E2","^DQ","^D1","^D=","^CR","^DA","^CL","^BR","^E3","^CP","^D4","^D3","^D7","^DB","^C=","^E8","^D<","^D8","^C4","^BP","^BQ","^BU","^BY","^BZ","^C3","^CF","^D?","^DE","^DI","^DC","~~:ns-specs",["^ ","^C>","^CC","^C?","^E2","^CD",["^18",["^D3","^E8",["^DK","^C?"]]],"^A[",["^18",["^CM","^BN",["^18",["^C:","^CQ","^CU","^DU","^DK"]],"^BT","^CU"]],"^CL",["^18",["^BA","^BR"]],"^CO",["^18",["^BA","^C1"]],"^CP","^CU","^CS","^C[","^D4",["^18",["^D3","^D7",["^DP","^C>","^DB","^CP","^C="],"^E8",["^CO","^D<","^D8","^E9","^DY","^E5","^DM","^E4","^CL","^E3","^C4"]]],"^?D",["^18",["^CM","^BN",["^18",["^C:","^@>","^BX","^CI","^D9"]],"^BT","^DK"]],"^DH",["^18",["^D3","^D7",["^DB","^D[","^CS","^C0","^C="],"^E8",["^DK"]]],"^DK",["^18",["^C8","^D4"]],"^DM",["^18",["^BA","^C1"]],"^@Z",["^18",["^CM","^BN",["^18",["^C:","^@>","^BX","^CI","^D9"]],"^BT","^DH"]],"^DP","^BX","^DY",["^18",["^BA","^CU"]],"^D[","^C[","^E3",["^18",["^BA","^DT"]],"^E4",["^18",["^CG","^D6","^E2","^DQ","^D1","^BO",["^18",["^CG","^D=","^D>","^CR","^DA"]]]],"^E5",["^18",["^BA","^DT"]],"^E9",["^18",["^BA","^BX"]]],"~:ns-speced-vars",["^A[","^?D","^@Z"],"~:compiler-options",["^;@",[["^E=","~:static-fns"],true,["^E=","~:elide-asserts"],false,["^E=","~:optimize-constants"],null,["^E=","~:external-config"],null,["^E=","~:tooling-config"],null,["^E=","~:emit-constants"],null,["^E=","~:infer-externs"],true,["^E=","^1E"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^E=","~:fn-invoke-direct"],null,["^E=","^1G"],"/dev/null"]]]