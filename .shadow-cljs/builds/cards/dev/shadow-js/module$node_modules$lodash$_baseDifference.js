["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/_baseDifference.js"],"~:js","shadow$provide.module$node_modules$lodash$_baseDifference=function(global,process,require,module,exports,shadow$shims){var SetCache=require(\"module$node_modules$lodash$_SetCache\"),arrayIncludes=require(\"module$node_modules$lodash$_arrayIncludes\"),arrayIncludesWith=require(\"module$node_modules$lodash$_arrayIncludesWith\"),arrayMap=require(\"module$node_modules$lodash$_arrayMap\"),baseUnary=require(\"module$node_modules$lodash$_baseUnary\"),cacheHas=require(\"module$node_modules$lodash$_cacheHas\");module.exports=\nfunction(array,values,iteratee,comparator){var index=-1,includes=arrayIncludes,isCommon=!0,length=array.length,result=[],valuesLength=values.length;if(!length)return result;iteratee&&(values=arrayMap(values,baseUnary(iteratee)));comparator?(includes=arrayIncludesWith,isCommon=!1):200<=values.length&&(includes=cacheHas,isCommon=!1,values=new SetCache(values));a:for(;++index<length;){var value=array[index],computed=null==iteratee?value:iteratee(value);value=comparator||0!==value?value:0;if(isCommon&&\ncomputed===computed){for(var valuesIndex=valuesLength;valuesIndex--;)if(values[valuesIndex]===computed)continue a;result.push(value)}else includes(values,computed,comparator)||result.push(value)}return result}}","~:source","shadow$provide[\"module$node_modules$lodash$_baseDifference\"] = function(global,process,require,module,exports,shadow$shims) {\nvar SetCache = require('./_SetCache'),\n    arrayIncludes = require('./_arrayIncludes'),\n    arrayIncludesWith = require('./_arrayIncludesWith'),\n    arrayMap = require('./_arrayMap'),\n    baseUnary = require('./_baseUnary'),\n    cacheHas = require('./_cacheHas');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee == null ? value : iteratee(value);\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseDifference;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$lodash$_baseUnary","~$shadow.js","~$module$node_modules$lodash$_arrayIncludesWith","~$module$node_modules$lodash$_SetCache","~$module$node_modules$lodash$_arrayIncludes","~$module$node_modules$lodash$_cacheHas","~$module$node_modules$lodash$_arrayMap"]],"~:properties",["^5",[]],"~:compiled-at",1537360506063,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$_baseDifference.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,2CAAA,CAA+D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAAA,IACxHC,SAAWJ,OAAA,CAAQ,sCAAR,CAD6G,CAExHK,cAAgBL,OAAA,CAAQ,2CAAR,CAFwG,CAGxHM,kBAAoBN,OAAA,CAAQ,+CAAR,CAHoG,CAIxHO,SAAWP,OAAA,CAAQ,sCAAR,CAJ6G,CAKxHQ,UAAYR,OAAA,CAAQ,uCAAR,CAL4G,CAMxHS,SAAWT,OAAA,CAAQ,sCAAR,CA6DfC,OAAAC,QAAA;AA7CAQ,QAAuB,CAACC,KAAD,CAAQC,MAAR,CAAgBC,QAAhB,CAA0BC,UAA1B,CAAsC,CAAA,IACvDC,MAAS,EAD8C,CAEvDC,SAAWX,aAF4C,CAGvDY,SAAW,CAAA,CAH4C,CAIvDC,OAASP,KAAAO,OAJ8C,CAKvDC,OAAS,EAL8C,CAMvDC,aAAeR,MAAAM,OAEnB,IAAI,CAACA,MAAL,CACE,MAAOC,OAELN,SAAJ,GACED,MADF,CACWL,QAAA,CAASK,MAAT,CAAiBJ,SAAA,CAAUK,QAAV,CAAjB,CADX,CAGIC,WAAJ,EACEE,QACA,CADWV,iBACX,CAAAW,QAAA,CAAW,CAAA,CAFb,EA3BqBI,GA2BrB,EAIST,MAAAM,OAJT,GAKEF,QAEA,CAFWP,QAEX,CADAQ,QACA,CADW,CAAA,CACX,CAAAL,MAAA,CAAS,IAAIR,QAAJ,CAAaQ,MAAb,CAPX,CASA,EAAA,CACA,IAAA,CAAO,EAAEG,KAAT,CAAiBG,MAAjB,CAAA,CAAyB,CAAA,IACnBI,MAAQX,KAAA,CAAMI,KAAN,CADW,CAEnBQ,SAAuB,IAAZ,EAAAV,QAAA,CAAmBS,KAAnB,CAA2BT,QAAA,CAASS,KAAT,CAE1CA,MAAA,CAASR,UAAD,EAAyB,CAAzB,GAAeQ,KAAf,CAA8BA,KAA9B,CAAsC,CAC9C,IAAIL,QAAJ;AAAgBM,QAAhB,GAA6BA,QAA7B,CAAuC,CAErC,IADA,IAAIC,YAAcJ,YAClB,CAAOI,WAAA,EAAP,CAAA,CACE,GAAIZ,MAAA,CAAOY,WAAP,CAAJ,GAA4BD,QAA5B,CACE,SAAS,CAGbJ,OAAAM,KAAA,CAAYH,KAAZ,CAPqC,CAAvC,IASUN,SAAA,CAASJ,MAAT,CAAiBW,QAAjB,CAA2BT,UAA3B,CAAL,EACHK,MAAAM,KAAA,CAAYH,KAAZ,CAfqB,CAkBzB,MAAOH,OA1CoD,CAtB+D;\",\n\"sources\":[\"node_modules/lodash/_baseDifference.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$_baseDifference\\\"] = function(global,process,require,module,exports,shadow$shims) {\\nvar SetCache = require('./_SetCache'),\\n    arrayIncludes = require('./_arrayIncludes'),\\n    arrayIncludesWith = require('./_arrayIncludesWith'),\\n    arrayMap = require('./_arrayMap'),\\n    baseUnary = require('./_baseUnary'),\\n    cacheHas = require('./_cacheHas');\\n\\n/** Used as the size to enable large array optimizations. */\\nvar LARGE_ARRAY_SIZE = 200;\\n\\n/**\\n * The base implementation of methods like `_.difference` without support\\n * for excluding multiple arrays or iteratee shorthands.\\n *\\n * @private\\n * @param {Array} array The array to inspect.\\n * @param {Array} values The values to exclude.\\n * @param {Function} [iteratee] The iteratee invoked per element.\\n * @param {Function} [comparator] The comparator invoked per element.\\n * @returns {Array} Returns the new array of filtered values.\\n */\\nfunction baseDifference(array, values, iteratee, comparator) {\\n  var index = -1,\\n      includes = arrayIncludes,\\n      isCommon = true,\\n      length = array.length,\\n      result = [],\\n      valuesLength = values.length;\\n\\n  if (!length) {\\n    return result;\\n  }\\n  if (iteratee) {\\n    values = arrayMap(values, baseUnary(iteratee));\\n  }\\n  if (comparator) {\\n    includes = arrayIncludesWith;\\n    isCommon = false;\\n  }\\n  else if (values.length >= LARGE_ARRAY_SIZE) {\\n    includes = cacheHas;\\n    isCommon = false;\\n    values = new SetCache(values);\\n  }\\n  outer:\\n  while (++index < length) {\\n    var value = array[index],\\n        computed = iteratee == null ? value : iteratee(value);\\n\\n    value = (comparator || value !== 0) ? value : 0;\\n    if (isCommon && computed === computed) {\\n      var valuesIndex = valuesLength;\\n      while (valuesIndex--) {\\n        if (values[valuesIndex] === computed) {\\n          continue outer;\\n        }\\n      }\\n      result.push(value);\\n    }\\n    else if (!includes(values, computed, comparator)) {\\n      result.push(value);\\n    }\\n  }\\n  return result;\\n}\\n\\nmodule.exports = baseDifference;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"SetCache\",\"arrayIncludes\",\"arrayIncludesWith\",\"arrayMap\",\"baseUnary\",\"cacheHas\",\"baseDifference\",\"array\",\"values\",\"iteratee\",\"comparator\",\"index\",\"includes\",\"isCommon\",\"length\",\"result\",\"valuesLength\",\"LARGE_ARRAY_SIZE\",\"value\",\"computed\",\"valuesIndex\",\"push\"]\n}\n"]