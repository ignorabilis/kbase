["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/_createRound.js"],"~:js","shadow$provide.module$node_modules$lodash$_createRound=function(global,process,require,module,exports,shadow$shims){var toInteger=require(\"module$node_modules$lodash$toInteger\"),toNumber=require(\"module$node_modules$lodash$toNumber\"),toString=require(\"module$node_modules$lodash$toString\"),nativeMin=Math.min;module.exports=function(methodName){var func=Math[methodName];return function(number,precision){number=toNumber(number);return(precision=null==precision?0:nativeMin(toInteger(precision),292))?\n(number=(toString(number)+\"e\").split(\"e\"),number=func(number[0]+\"e\"+(+number[1]+precision)),number=(toString(number)+\"e\").split(\"e\"),+(number[0]+\"e\"+(+number[1]-precision))):func(number)}}}","~:source","shadow$provide[\"module$node_modules$lodash$_createRound\"] = function(global,process,require,module,exports,shadow$shims) {\nvar toInteger = require('./toInteger'),\n    toNumber = require('./toNumber'),\n    toString = require('./toString');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Creates a function like `_.round`.\n *\n * @private\n * @param {string} methodName The name of the `Math` method to use when rounding.\n * @returns {Function} Returns the new round function.\n */\nfunction createRound(methodName) {\n  var func = Math[methodName];\n  return function(number, precision) {\n    number = toNumber(number);\n    precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\n    if (precision) {\n      // Shift with exponential notation to avoid floating-point issues.\n      // See [MDN](https://mdn.io/round#Examples) for more details.\n      var pair = (toString(number) + 'e').split('e'),\n          value = func(pair[0] + 'e' + (+pair[1] + precision));\n\n      pair = (toString(value) + 'e').split('e');\n      return +(pair[0] + 'e' + (+pair[1] - precision));\n    }\n    return func(number);\n  };\n}\n\nmodule.exports = createRound;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$lodash$toInteger","~$module$node_modules$lodash$toNumber","~$module$node_modules$lodash$toString"]],"~:properties",["^5",[]],"~:compiled-at",1537360506325,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$_createRound.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,wCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAAA,IACrHC,UAAYJ,OAAA,CAAQ,sCAAR,CADyG,CAErHK,SAAWL,OAAA,CAAQ,qCAAR,CAF0G,CAGrHM,SAAWN,OAAA,CAAQ,qCAAR,CAH0G,CAMrHO,UAAYC,IAAAC,IA2BhBR,OAAAC,QAAA,CAlBAQ,QAAoB,CAACC,UAAD,CAAa,CAC/B,IAAIC,KAAOJ,IAAA,CAAKG,UAAL,CACX,OAAO,SAAQ,CAACE,MAAD,CAASC,SAAT,CAAoB,CACjCD,MAAA,CAASR,QAAA,CAASQ,MAAT,CAET,OAAA,CADAC,SACA,CADyB,IAAb,EAAAA,SAAA,CAAoB,CAApB,CAAwBP,SAAA,CAAUH,SAAA,CAAUU,SAAV,CAAV,CAAgC,GAAhC,CACpC;CAGMC,MAIG,CAJIC,CAACV,QAAA,CAASO,MAAT,CAADG,CAAoB,GAApBA,OAAA,CAA+B,GAA/B,CAIJ,CAHHC,MAGG,CAHKL,IAAA,CAAKG,MAAA,CAAK,CAAL,CAAL,CAAe,GAAf,EAAsB,CAACA,MAAA,CAAK,CAAL,CAAvB,CAAiCD,SAAjC,EAGL,CADPC,MACO,CADAC,CAACV,QAAA,CAASW,MAAT,CAADD,CAAmB,GAAnBA,OAAA,CAA8B,GAA9B,CACA,CAAA,EAAED,MAAA,CAAK,CAAL,CAAF,CAAY,GAAZ,EAAmB,CAACA,MAAA,CAAK,CAAL,CAApB,CAA8BD,SAA9B,EAPT,EASOF,IAAA,CAAKC,MAAL,CAZ0B,CAFJ,CAfwF;\",\n\"sources\":[\"node_modules/lodash/_createRound.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$_createRound\\\"] = function(global,process,require,module,exports,shadow$shims) {\\nvar toInteger = require('./toInteger'),\\n    toNumber = require('./toNumber'),\\n    toString = require('./toString');\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeMin = Math.min;\\n\\n/**\\n * Creates a function like `_.round`.\\n *\\n * @private\\n * @param {string} methodName The name of the `Math` method to use when rounding.\\n * @returns {Function} Returns the new round function.\\n */\\nfunction createRound(methodName) {\\n  var func = Math[methodName];\\n  return function(number, precision) {\\n    number = toNumber(number);\\n    precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);\\n    if (precision) {\\n      // Shift with exponential notation to avoid floating-point issues.\\n      // See [MDN](https://mdn.io/round#Examples) for more details.\\n      var pair = (toString(number) + 'e').split('e'),\\n          value = func(pair[0] + 'e' + (+pair[1] + precision));\\n\\n      pair = (toString(value) + 'e').split('e');\\n      return +(pair[0] + 'e' + (+pair[1] - precision));\\n    }\\n    return func(number);\\n  };\\n}\\n\\nmodule.exports = createRound;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"toInteger\",\"toNumber\",\"toString\",\"nativeMin\",\"Math\",\"min\",\"createRound\",\"methodName\",\"func\",\"number\",\"precision\",\"pair\",\"split\",\"value\"]\n}\n"]