["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/_updateWrapDetails.js"],"~:js","shadow$provide.module$node_modules$lodash$_updateWrapDetails=function(global,process,require,module,exports,shadow$shims){var arrayEach=require(\"module$node_modules$lodash$_arrayEach\"),arrayIncludes=require(\"module$node_modules$lodash$_arrayIncludes\"),wrapFlags=[[\"ary\",128],[\"bind\",1],[\"bindKey\",2],[\"curry\",8],[\"curryRight\",16],[\"flip\",512],[\"partial\",32],[\"partialRight\",64],[\"rearg\",256]];module.exports=function(details,bitmask){arrayEach(wrapFlags,function(pair){var value=\"_.\"+pair[0];bitmask&pair[1]&&\n!arrayIncludes(details,value)&&details.push(value)});return details.sort()}}","~:source","shadow$provide[\"module$node_modules$lodash$_updateWrapDetails\"] = function(global,process,require,module,exports,shadow$shims) {\nvar arrayEach = require('./_arrayEach'),\n    arrayIncludes = require('./_arrayIncludes');\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_CURRY_RIGHT_FLAG = 16,\n    WRAP_PARTIAL_FLAG = 32,\n    WRAP_PARTIAL_RIGHT_FLAG = 64,\n    WRAP_ARY_FLAG = 128,\n    WRAP_REARG_FLAG = 256,\n    WRAP_FLIP_FLAG = 512;\n\n/** Used to associate wrap methods with their bit flags. */\nvar wrapFlags = [\n  ['ary', WRAP_ARY_FLAG],\n  ['bind', WRAP_BIND_FLAG],\n  ['bindKey', WRAP_BIND_KEY_FLAG],\n  ['curry', WRAP_CURRY_FLAG],\n  ['curryRight', WRAP_CURRY_RIGHT_FLAG],\n  ['flip', WRAP_FLIP_FLAG],\n  ['partial', WRAP_PARTIAL_FLAG],\n  ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\n  ['rearg', WRAP_REARG_FLAG]\n];\n\n/**\n * Updates wrapper `details` based on `bitmask` flags.\n *\n * @private\n * @returns {Array} details The details to modify.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @returns {Array} Returns `details`.\n */\nfunction updateWrapDetails(details, bitmask) {\n  arrayEach(wrapFlags, function(pair) {\n    var value = '_.' + pair[0];\n    if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n      details.push(value);\n    }\n  });\n  return details.sort();\n}\n\nmodule.exports = updateWrapDetails;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$lodash$_arrayEach","~$module$node_modules$lodash$_arrayIncludes"]],"~:properties",["^5",[]],"~:compiled-at",1537360506105,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$_updateWrapDetails.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,8CAAA,CAAkE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAAA,IAC3HC,UAAYJ,OAAA,CAAQ,uCAAR,CAD+G,CAE3HK,cAAgBL,OAAA,CAAQ,2CAAR,CAF2G,CAgB3HM,UAAY,CACd,CAAC,KAAD,CANkBC,GAMlB,CADc,CAEd,CAAC,MAAD,CAbmBC,CAanB,CAFc,CAGd,CAAC,SAAD,CAbuBC,CAavB,CAHc,CAId,CAAC,OAAD,CAboBC,CAapB,CAJc,CAKd,CAAC,YAAD,CAb0BC,EAa1B,CALc,CAMd,CAAC,MAAD,CATmBC,GASnB,CANc,CAOd,CAAC,SAAD,CAdsBC,EActB,CAPc,CAQd,CAAC,cAAD,CAd4BC,EAc5B,CARc,CASd,CAAC,OAAD,CAboBC,GAapB,CATc,CA8BhBd,OAAAC,QAAA,CAVAc,QAA0B,CAACC,OAAD,CAAUC,OAAV,CAAmB,CAC3Cd,SAAA,CAAUE,SAAV,CAAqB,QAAQ,CAACa,IAAD,CAAO,CAClC,IAAIC,MAAQ,IAARA,CAAeD,IAAA,CAAK,CAAL,CACdD,QAAL,CAAeC,IAAA,CAAK,CAAL,CAAf;AAA2B,CAACd,aAAA,CAAcY,OAAd,CAAuBG,KAAvB,CAA5B,EACEH,OAAAI,KAAA,CAAaD,KAAb,CAHgC,CAApC,CAMA,OAAOH,QAAAK,KAAA,EAPoC,CApCkF;\",\n\"sources\":[\"node_modules/lodash/_updateWrapDetails.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$_updateWrapDetails\\\"] = function(global,process,require,module,exports,shadow$shims) {\\nvar arrayEach = require('./_arrayEach'),\\n    arrayIncludes = require('./_arrayIncludes');\\n\\n/** Used to compose bitmasks for function metadata. */\\nvar WRAP_BIND_FLAG = 1,\\n    WRAP_BIND_KEY_FLAG = 2,\\n    WRAP_CURRY_FLAG = 8,\\n    WRAP_CURRY_RIGHT_FLAG = 16,\\n    WRAP_PARTIAL_FLAG = 32,\\n    WRAP_PARTIAL_RIGHT_FLAG = 64,\\n    WRAP_ARY_FLAG = 128,\\n    WRAP_REARG_FLAG = 256,\\n    WRAP_FLIP_FLAG = 512;\\n\\n/** Used to associate wrap methods with their bit flags. */\\nvar wrapFlags = [\\n  ['ary', WRAP_ARY_FLAG],\\n  ['bind', WRAP_BIND_FLAG],\\n  ['bindKey', WRAP_BIND_KEY_FLAG],\\n  ['curry', WRAP_CURRY_FLAG],\\n  ['curryRight', WRAP_CURRY_RIGHT_FLAG],\\n  ['flip', WRAP_FLIP_FLAG],\\n  ['partial', WRAP_PARTIAL_FLAG],\\n  ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\\n  ['rearg', WRAP_REARG_FLAG]\\n];\\n\\n/**\\n * Updates wrapper `details` based on `bitmask` flags.\\n *\\n * @private\\n * @returns {Array} details The details to modify.\\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\\n * @returns {Array} Returns `details`.\\n */\\nfunction updateWrapDetails(details, bitmask) {\\n  arrayEach(wrapFlags, function(pair) {\\n    var value = '_.' + pair[0];\\n    if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\\n      details.push(value);\\n    }\\n  });\\n  return details.sort();\\n}\\n\\nmodule.exports = updateWrapDetails;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"arrayEach\",\"arrayIncludes\",\"wrapFlags\",\"WRAP_ARY_FLAG\",\"WRAP_BIND_FLAG\",\"WRAP_BIND_KEY_FLAG\",\"WRAP_CURRY_FLAG\",\"WRAP_CURRY_RIGHT_FLAG\",\"WRAP_FLIP_FLAG\",\"WRAP_PARTIAL_FLAG\",\"WRAP_PARTIAL_RIGHT_FLAG\",\"WRAP_REARG_FLAG\",\"updateWrapDetails\",\"details\",\"bitmask\",\"pair\",\"value\",\"push\",\"sort\"]\n}\n"]