["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/_baseClamp.js"],"~:js","shadow$provide.module$node_modules$lodash$_baseClamp=function(global,process,require,module,exports,shadow$shims){module.exports=function(number,lower,upper){number===number&&(void 0!==upper&&(number=number<=upper?number:upper),void 0!==lower&&(number=number>=lower?number:lower));return number}}","~:source","shadow$provide[\"module$node_modules$lodash$_baseClamp\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * The base implementation of `_.clamp` which doesn't coerce arguments.\n *\n * @private\n * @param {number} number The number to clamp.\n * @param {number} [lower] The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the clamped number.\n */\nfunction baseClamp(number, lower, upper) {\n  if (number === number) {\n    if (upper !== undefined) {\n      number = number <= upper ? number : upper;\n    }\n    if (lower !== undefined) {\n      number = number >= lower ? number : lower;\n    }\n  }\n  return number;\n}\n\nmodule.exports = baseClamp;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",[]],"~:compiled-at",1537360506065,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$_baseClamp.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,sCAAA,CAA0D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAsBvHF,MAAAC,QAAA,CAZAE,QAAkB,CAACC,MAAD,CAASC,KAAT,CAAgBC,KAAhB,CAAuB,CACnCF,MAAJ,GAAeA,MAAf,GACgBG,IAAAA,EAGd,GAHID,KAGJ,GAFEF,MAEF,CAFWA,MAAA,EAAUE,KAAV,CAAkBF,MAAlB,CAA2BE,KAEtC,EAAcC,IAAAA,EAAd,GAAIF,KAAJ,GACED,MADF,CACWA,MAAA,EAAUC,KAAV,CAAkBD,MAAlB,CAA2BC,KADtC,CAJF,CAQA,OAAOD,OATgC,CAV8E;\",\n\"sources\":[\"node_modules/lodash/_baseClamp.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$_baseClamp\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * The base implementation of `_.clamp` which doesn't coerce arguments.\\n *\\n * @private\\n * @param {number} number The number to clamp.\\n * @param {number} [lower] The lower bound.\\n * @param {number} upper The upper bound.\\n * @returns {number} Returns the clamped number.\\n */\\nfunction baseClamp(number, lower, upper) {\\n  if (number === number) {\\n    if (upper !== undefined) {\\n      number = number <= upper ? number : upper;\\n    }\\n    if (lower !== undefined) {\\n      number = number >= lower ? number : lower;\\n    }\\n  }\\n  return number;\\n}\\n\\nmodule.exports = baseClamp;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"baseClamp\",\"number\",\"lower\",\"upper\",\"undefined\"]\n}\n"]