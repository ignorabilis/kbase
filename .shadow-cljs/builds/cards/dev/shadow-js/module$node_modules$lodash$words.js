["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/words.js"],"~:js","shadow$provide.module$node_modules$lodash$words=function(global,process,require,module,exports,shadow$shims){var asciiWords=require(\"module$node_modules$lodash$_asciiWords\"),hasUnicodeWord=require(\"module$node_modules$lodash$_hasUnicodeWord\"),toString=require(\"module$node_modules$lodash$toString\"),unicodeWords=require(\"module$node_modules$lodash$_unicodeWords\");module.exports=function(string,pattern,guard){string=toString(string);pattern=guard?void 0:pattern;return void 0===pattern?hasUnicodeWord(string)?\nunicodeWords(string):asciiWords(string):string.match(pattern)||[]}}","~:source","shadow$provide[\"module$node_modules$lodash$words\"] = function(global,process,require,module,exports,shadow$shims) {\nvar asciiWords = require('./_asciiWords'),\n    hasUnicodeWord = require('./_hasUnicodeWord'),\n    toString = require('./toString'),\n    unicodeWords = require('./_unicodeWords');\n\n/**\n * Splits `string` into an array of its words.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * _.words('fred, barney, & pebbles');\n * // => ['fred', 'barney', 'pebbles']\n *\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\n * // => ['fred', 'barney', '&', 'pebbles']\n */\nfunction words(string, pattern, guard) {\n  string = toString(string);\n  pattern = guard ? undefined : pattern;\n\n  if (pattern === undefined) {\n    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n  }\n  return string.match(pattern) || [];\n}\n\nmodule.exports = words;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$lodash$_unicodeWords","~$shadow.js","~$module$node_modules$lodash$_asciiWords","~$module$node_modules$lodash$_hasUnicodeWord","~$module$node_modules$lodash$toString"]],"~:properties",["^5",[]],"~:compiled-at",1537360506206,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$words.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,iCAAA,CAAqD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAAA,IAC9GC,WAAaJ,OAAA,CAAQ,wCAAR,CADiG,CAE9GK,eAAiBL,OAAA,CAAQ,4CAAR,CAF6F,CAG9GM,SAAWN,OAAA,CAAQ,qCAAR,CAHmG,CAI9GO,aAAeP,OAAA,CAAQ,0CAAR,CA+BnBC,OAAAC,QAAA,CAVAM,QAAc,CAACC,MAAD,CAASC,OAAT,CAAkBC,KAAlB,CAAyB,CACrCF,MAAA,CAASH,QAAA,CAASG,MAAT,CACTC,QAAA,CAAUC,KAAA,CAAQC,IAAAA,EAAR,CAAoBF,OAE9B,OAAgBE,KAAAA,EAAhB,GAAIF,OAAJ,CACSL,cAAA,CAAeI,MAAf,CAAA;AAAyBF,YAAA,CAAaE,MAAb,CAAzB,CAAgDL,UAAA,CAAWK,MAAX,CADzD,CAGOA,MAAAI,MAAA,CAAaH,OAAb,CAHP,EAGgC,EAPK,CAzB2E;\",\n\"sources\":[\"node_modules/lodash/words.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$words\\\"] = function(global,process,require,module,exports,shadow$shims) {\\nvar asciiWords = require('./_asciiWords'),\\n    hasUnicodeWord = require('./_hasUnicodeWord'),\\n    toString = require('./toString'),\\n    unicodeWords = require('./_unicodeWords');\\n\\n/**\\n * Splits `string` into an array of its words.\\n *\\n * @static\\n * @memberOf _\\n * @since 3.0.0\\n * @category String\\n * @param {string} [string=''] The string to inspect.\\n * @param {RegExp|string} [pattern] The pattern to match words.\\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\\n * @returns {Array} Returns the words of `string`.\\n * @example\\n *\\n * _.words('fred, barney, & pebbles');\\n * // => ['fred', 'barney', 'pebbles']\\n *\\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\\n * // => ['fred', 'barney', '&', 'pebbles']\\n */\\nfunction words(string, pattern, guard) {\\n  string = toString(string);\\n  pattern = guard ? undefined : pattern;\\n\\n  if (pattern === undefined) {\\n    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\\n  }\\n  return string.match(pattern) || [];\\n}\\n\\nmodule.exports = words;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"asciiWords\",\"hasUnicodeWord\",\"toString\",\"unicodeWords\",\"words\",\"string\",\"pattern\",\"guard\",\"undefined\",\"match\"]\n}\n"]