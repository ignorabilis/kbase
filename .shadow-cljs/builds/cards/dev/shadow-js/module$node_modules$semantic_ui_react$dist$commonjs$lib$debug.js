["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/semantic-ui-react/dist/commonjs/lib/debug.js"],"~:js","shadow$provide.module$node_modules$semantic_ui_react$dist$commonjs$lib$debug=function(global,process,require,module,exports,shadow$shims){global=require(\"module$node_modules$$babel$runtime$helpers$interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:!0});exports.debug=exports.makeDebugger=void 0;require=global(require(\"module$node_modules$semantic_ui_react$dist$commonjs$lib$isBrowser\"));(0,require.default)();exports.makeDebugger=function(namespace){};exports.debug=void 0}","~:source","shadow$provide[\"module$node_modules$semantic_ui_react$dist$commonjs$lib$debug\"] = function(global,process,require,module,exports,shadow$shims) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.debug = exports.makeDebugger = void 0;\n\nvar _isBrowser = _interopRequireDefault(require(\"./isBrowser\"));\n\nif ((0, _isBrowser.default)() && process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {\n  // Heads Up!\n  // https://github.com/visionmedia/debug/pull/331\n  //\n  // debug now clears storage on load, grab the debug settings before require('debug').\n  // We try/catch here as Safari throws on localStorage access in private mode or with cookies disabled.\n  var DEBUG;\n\n  try {\n    DEBUG = window.localStorage.debug;\n  } catch (e) {\n    /* eslint-disable no-console */\n    console.error('Semantic-UI-React could not enable debug.');\n    console.error(e);\n    /* eslint-enable no-console */\n  } // enable what ever settings we got from storage\n\n}\n/**\n * Create a namespaced debug function.\n * @param {String} namespace Usually a component name.\n * @example\n * import { makeDebugger } from 'src/lib'\n * const debug = makeDebugger('namespace')\n *\n * debug('Some message')\n * @returns {Function}\n */\n\n\nvar makeDebugger = function makeDebugger(namespace) {};\n/**\n * Default debugger, simple log.\n * @example\n * import { debug } from 'src/lib'\n * debug('Some message')\n */\n\n\nexports.makeDebugger = makeDebugger;\nvar debug = makeDebugger('log');\nexports.debug = debug;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$babel$runtime$helpers$interopRequireDefault","~$shadow.js","~$module$node_modules$semantic_ui_react$dist$commonjs$lib$isBrowser"]],"~:properties",["^5",["__esModule","value","debug","makeDebugger"]],"~:compiled-at",1537360506146,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$semantic_ui_react$dist$commonjs$lib$debug.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,8DAAA,CAAkF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAG3IC,MAAAA,CAAyBJ,OAAA,CAAQ,kEAAR,CAE7BK,OAAAC,eAAA,CAAsBJ,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CK,MAAO,CAAA,CADoC,CAA7C,CAGAL,QAAAM,MAAA,CAAgBN,OAAAO,aAAhB,CAAuC,IAAK,EAExCC,QAAAA,CAAaN,MAAA,CAAuBJ,OAAA,CAAQ,mEAAR,CAAvB,CAEb,EAAC,CAAA,CAAGU,OAAAC,QAAJ,GAuCJT,QAAAO,aAAA,CATmBA,QAAqB,CAACG,SAAD,CAAY,EAWpDV,QAAAM,MAAA,CAXoDA,IAAA,EA1C2F;\",\n\"sources\":[\"node_modules/semantic-ui-react/dist/commonjs/lib/debug.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$semantic_ui_react$dist$commonjs$lib$debug\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n\\\"use strict\\\";\\n\\nvar _interopRequireDefault = require(\\\"@babel/runtime/helpers/interopRequireDefault\\\");\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.debug = exports.makeDebugger = void 0;\\n\\nvar _isBrowser = _interopRequireDefault(require(\\\"./isBrowser\\\"));\\n\\nif ((0, _isBrowser.default)() && process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {\\n  // Heads Up!\\n  // https://github.com/visionmedia/debug/pull/331\\n  //\\n  // debug now clears storage on load, grab the debug settings before require('debug').\\n  // We try/catch here as Safari throws on localStorage access in private mode or with cookies disabled.\\n  var DEBUG;\\n\\n  try {\\n    DEBUG = window.localStorage.debug;\\n  } catch (e) {\\n    /* eslint-disable no-console */\\n    console.error('Semantic-UI-React could not enable debug.');\\n    console.error(e);\\n    /* eslint-enable no-console */\\n  } // enable what ever settings we got from storage\\n\\n}\\n/**\\n * Create a namespaced debug function.\\n * @param {String} namespace Usually a component name.\\n * @example\\n * import { makeDebugger } from 'src/lib'\\n * const debug = makeDebugger('namespace')\\n *\\n * debug('Some message')\\n * @returns {Function}\\n */\\n\\n\\nvar makeDebugger = function makeDebugger(namespace) {};\\n/**\\n * Default debugger, simple log.\\n * @example\\n * import { debug } from 'src/lib'\\n * debug('Some message')\\n */\\n\\n\\nexports.makeDebugger = makeDebugger;\\nvar debug = makeDebugger('log');\\nexports.debug = debug;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"_interopRequireDefault\",\"Object\",\"defineProperty\",\"value\",\"debug\",\"makeDebugger\",\"_isBrowser\",\"default\",\"namespace\"]\n}\n"]