["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/semantic-ui-react/dist/commonjs/lib/classNameBuilders.js"],"~:js","shadow$provide.module$node_modules$semantic_ui_react$dist$commonjs$lib$classNameBuilders=function(global,process,require,module,exports,shadow$shims){global=require(\"module$node_modules$$babel$runtime$helpers$interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:!0});exports.useWidthProp=exports.useVerticalAlignProp=exports.useTextAlignProp=exports.useMultipleProp=exports.useKeyOrValueAndKey=exports.useValueAndKey=exports.useKeyOnly=void 0;var _typeof2=global(require(\"module$node_modules$$babel$runtime$helpers$typeof\")),\n_numberToWord=require(\"module$node_modules$semantic_ui_react$dist$commonjs$lib$numberToWord\");exports.useKeyOnly=function(val,key){return val&&key};var useValueAndKey=function(val,key){return val&&!0!==val&&\"\".concat(val,\" \").concat(key)};exports.useValueAndKey=useValueAndKey;exports.useKeyOrValueAndKey=function(val,key){return val&&(!0===val?key:\"\".concat(val,\" \").concat(key))};exports.useMultipleProp=function(val,key){return val&&!0!==val?val.replace(\"large screen\",\"large-screen\").replace(/ vertically/g,\n\"-vertically\").split(\" \").map(function(prop){return\"\".concat(prop.replace(\"-\",\" \"),\" \").concat(key)}).join(\" \"):null};exports.useTextAlignProp=function(val){return\"justified\"===val?\"justified\":useValueAndKey(val,\"aligned\")};exports.useVerticalAlignProp=function(val){return useValueAndKey(val,\"aligned\")};exports.useWidthProp=function(val){var widthClass=1<arguments.length&&void 0!==arguments[1]?arguments[1]:\"\";if(2<arguments.length&&void 0!==arguments[2]&&arguments[2]&&\"equal\"===val)return\"equal width\";\nvar valType=(0,_typeof2.default)(val);return\"string\"!==valType&&\"number\"!==valType||!widthClass?(0,_numberToWord.numberToWord)(val):\"\".concat((0,_numberToWord.numberToWord)(val),\" \").concat(widthClass)}}","~:source","shadow$provide[\"module$node_modules$semantic_ui_react$dist$commonjs$lib$classNameBuilders\"] = function(global,process,require,module,exports,shadow$shims) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useWidthProp = exports.useVerticalAlignProp = exports.useTextAlignProp = exports.useMultipleProp = exports.useKeyOrValueAndKey = exports.useValueAndKey = exports.useKeyOnly = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _numberToWord = require(\"./numberToWord\");\n\n/*\n * There are 3 prop patterns used to build up the className for a component.\n * Each utility here is meant for use in a classnames() argument.\n *\n * There is no util for valueOnly() because it would simply return val.\n * Use the prop value inline instead.\n *   <Label size='big' />\n *   <div class=\"ui big label\"></div>\n */\n\n/**\n * Props where only the prop key is used in the className.\n * @param {*} val A props value\n * @param {string} key A props key\n *\n * @example\n * <Label tag />\n * <div class=\"ui tag label\"></div>\n */\nvar useKeyOnly = function useKeyOnly(val, key) {\n  return val && key;\n};\n/**\n * Props that require both a key and value to create a className.\n * @param {*} val A props value\n * @param {string} key A props key\n *\n * @example\n * <Label corner='left' />\n * <div class=\"ui left corner label\"></div>\n */\n\n\nexports.useKeyOnly = useKeyOnly;\n\nvar useValueAndKey = function useValueAndKey(val, key) {\n  return val && val !== true && \"\".concat(val, \" \").concat(key);\n};\n/**\n * Props whose key will be used in className, or value and key.\n * @param {*} val A props value\n * @param {string} key A props key\n *\n * @example Key Only\n * <Label pointing />\n * <div class=\"ui pointing label\"></div>\n *\n * @example Key and Value\n * <Label pointing='left' />\n * <div class=\"ui left pointing label\"></div>\n */\n\n\nexports.useValueAndKey = useValueAndKey;\n\nvar useKeyOrValueAndKey = function useKeyOrValueAndKey(val, key) {\n  return val && (val === true ? key : \"\".concat(val, \" \").concat(key));\n}; //\n// Prop to className exceptions\n//\n\n/**\n * The \"multiple\" prop implements control of visibility and reserved classes for Grid subcomponents.\n *\n * @param {*} val The value of the \"multiple\" prop\n * @param {*} key A props key\n *\n * @example\n * <Grid.Row only='mobile' />\n * <Grid.Row only='mobile tablet' />\n * <div class=\"mobile only row\"></div>\n * <div class=\"mobile only tablet only row\"></div>\n */\n\n\nexports.useKeyOrValueAndKey = useKeyOrValueAndKey;\n\nvar useMultipleProp = function useMultipleProp(val, key) {\n  if (!val || val === true) return null;\n  return val.replace('large screen', 'large-screen').replace(/ vertically/g, '-vertically').split(' ').map(function (prop) {\n    return \"\".concat(prop.replace('-', ' '), \" \").concat(key);\n  }).join(' ');\n};\n/**\n * The \"textAlign\" prop follows the useValueAndKey except when the value is \"justified'.\n * In this case, only the class \"justified\" is used, ignoring the \"aligned\" class.\n * @param {*} val The value of the \"textAlign\" prop\n *\n * @example\n * <Container textAlign='justified' />\n * <div class=\"ui justified container\"></div>\n *\n * @example\n * <Container textAlign='left' />\n * <div class=\"ui left aligned container\"></div>\n */\n\n\nexports.useMultipleProp = useMultipleProp;\n\nvar useTextAlignProp = function useTextAlignProp(val) {\n  return val === 'justified' ? 'justified' : useValueAndKey(val, 'aligned');\n};\n/**\n * The \"verticalAlign\" prop follows the useValueAndKey.\n *\n * @param {*} val The value of the \"verticalAlign\" prop\n *\n * @example\n * <Grid verticalAlign='middle' />\n * <div class=\"ui middle aligned grid\"></div>\n */\n\n\nexports.useTextAlignProp = useTextAlignProp;\n\nvar useVerticalAlignProp = function useVerticalAlignProp(val) {\n  return useValueAndKey(val, 'aligned');\n};\n/**\n * Create \"X\", \"X wide\" and \"equal width\" classNames.\n * \"X\" is a numberToWord value and \"wide\" is configurable.\n * @param {*} val The prop value\n * @param {string} [widthClass=''] The class\n * @param {boolean} [canEqual=false] Flag that indicates possibility of \"equal\" value\n *\n * @example\n * <Grid columns='equal' />\n * <div class=\"ui equal width grid\"></div>\n *\n * <Form widths='equal' />\n * <div class=\"ui equal width form\"></div>\n *\n * <FieldGroup widths='equal' />\n * <div class=\"equal width fields\"></div>\n *\n * @example\n * <Grid columns={4} />\n * <div class=\"ui four column grid\"></div>\n */\n\n\nexports.useVerticalAlignProp = useVerticalAlignProp;\n\nvar useWidthProp = function useWidthProp(val) {\n  var widthClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var canEqual = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (canEqual && val === 'equal') {\n    return 'equal width';\n  }\n\n  var valType = (0, _typeof2.default)(val);\n\n  if ((valType === 'string' || valType === 'number') && widthClass) {\n    return \"\".concat((0, _numberToWord.numberToWord)(val), \" \").concat(widthClass);\n  }\n\n  return (0, _numberToWord.numberToWord)(val);\n};\n\nexports.useWidthProp = useWidthProp;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$semantic_ui_react$dist$commonjs$lib$numberToWord","~$module$node_modules$$babel$runtime$helpers$interopRequireDefault","~$shadow.js","~$module$node_modules$$babel$runtime$helpers$typeof"]],"~:properties",["^5",["__esModule","useVerticalAlignProp","useValueAndKey","value","useWidthProp","useTextAlignProp","useKeyOnly","useMultipleProp","useKeyOrValueAndKey"]],"~:compiled-at",1537360506093,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$semantic_ui_react$dist$commonjs$lib$classNameBuilders.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/semantic-ui-react/dist/commonjs/lib/classNameBuilders.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$semantic_ui_react$dist$commonjs$lib$classNameBuilders\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n\\\"use strict\\\";\\n\\nvar _interopRequireDefault = require(\\\"@babel/runtime/helpers/interopRequireDefault\\\");\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.useWidthProp = exports.useVerticalAlignProp = exports.useTextAlignProp = exports.useMultipleProp = exports.useKeyOrValueAndKey = exports.useValueAndKey = exports.useKeyOnly = void 0;\\n\\nvar _typeof2 = _interopRequireDefault(require(\\\"@babel/runtime/helpers/typeof\\\"));\\n\\nvar _numberToWord = require(\\\"./numberToWord\\\");\\n\\n/*\\n * There are 3 prop patterns used to build up the className for a component.\\n * Each utility here is meant for use in a classnames() argument.\\n *\\n * There is no util for valueOnly() because it would simply return val.\\n * Use the prop value inline instead.\\n *   <Label size='big' />\\n *   <div class=\\\"ui big label\\\"></div>\\n */\\n\\n/**\\n * Props where only the prop key is used in the className.\\n * @param {*} val A props value\\n * @param {string} key A props key\\n *\\n * @example\\n * <Label tag />\\n * <div class=\\\"ui tag label\\\"></div>\\n */\\nvar useKeyOnly = function useKeyOnly(val, key) {\\n  return val && key;\\n};\\n/**\\n * Props that require both a key and value to create a className.\\n * @param {*} val A props value\\n * @param {string} key A props key\\n *\\n * @example\\n * <Label corner='left' />\\n * <div class=\\\"ui left corner label\\\"></div>\\n */\\n\\n\\nexports.useKeyOnly = useKeyOnly;\\n\\nvar useValueAndKey = function useValueAndKey(val, key) {\\n  return val && val !== true && \\\"\\\".concat(val, \\\" \\\").concat(key);\\n};\\n/**\\n * Props whose key will be used in className, or value and key.\\n * @param {*} val A props value\\n * @param {string} key A props key\\n *\\n * @example Key Only\\n * <Label pointing />\\n * <div class=\\\"ui pointing label\\\"></div>\\n *\\n * @example Key and Value\\n * <Label pointing='left' />\\n * <div class=\\\"ui left pointing label\\\"></div>\\n */\\n\\n\\nexports.useValueAndKey = useValueAndKey;\\n\\nvar useKeyOrValueAndKey = function useKeyOrValueAndKey(val, key) {\\n  return val && (val === true ? key : \\\"\\\".concat(val, \\\" \\\").concat(key));\\n}; //\\n// Prop to className exceptions\\n//\\n\\n/**\\n * The \\\"multiple\\\" prop implements control of visibility and reserved classes for Grid subcomponents.\\n *\\n * @param {*} val The value of the \\\"multiple\\\" prop\\n * @param {*} key A props key\\n *\\n * @example\\n * <Grid.Row only='mobile' />\\n * <Grid.Row only='mobile tablet' />\\n * <div class=\\\"mobile only row\\\"></div>\\n * <div class=\\\"mobile only tablet only row\\\"></div>\\n */\\n\\n\\nexports.useKeyOrValueAndKey = useKeyOrValueAndKey;\\n\\nvar useMultipleProp = function useMultipleProp(val, key) {\\n  if (!val || val === true) return null;\\n  return val.replace('large screen', 'large-screen').replace(/ vertically/g, '-vertically').split(' ').map(function (prop) {\\n    return \\\"\\\".concat(prop.replace('-', ' '), \\\" \\\").concat(key);\\n  }).join(' ');\\n};\\n/**\\n * The \\\"textAlign\\\" prop follows the useValueAndKey except when the value is \\\"justified'.\\n * In this case, only the class \\\"justified\\\" is used, ignoring the \\\"aligned\\\" class.\\n * @param {*} val The value of the \\\"textAlign\\\" prop\\n *\\n * @example\\n * <Container textAlign='justified' />\\n * <div class=\\\"ui justified container\\\"></div>\\n *\\n * @example\\n * <Container textAlign='left' />\\n * <div class=\\\"ui left aligned container\\\"></div>\\n */\\n\\n\\nexports.useMultipleProp = useMultipleProp;\\n\\nvar useTextAlignProp = function useTextAlignProp(val) {\\n  return val === 'justified' ? 'justified' : useValueAndKey(val, 'aligned');\\n};\\n/**\\n * The \\\"verticalAlign\\\" prop follows the useValueAndKey.\\n *\\n * @param {*} val The value of the \\\"verticalAlign\\\" prop\\n *\\n * @example\\n * <Grid verticalAlign='middle' />\\n * <div class=\\\"ui middle aligned grid\\\"></div>\\n */\\n\\n\\nexports.useTextAlignProp = useTextAlignProp;\\n\\nvar useVerticalAlignProp = function useVerticalAlignProp(val) {\\n  return useValueAndKey(val, 'aligned');\\n};\\n/**\\n * Create \\\"X\\\", \\\"X wide\\\" and \\\"equal width\\\" classNames.\\n * \\\"X\\\" is a numberToWord value and \\\"wide\\\" is configurable.\\n * @param {*} val The prop value\\n * @param {string} [widthClass=''] The class\\n * @param {boolean} [canEqual=false] Flag that indicates possibility of \\\"equal\\\" value\\n *\\n * @example\\n * <Grid columns='equal' />\\n * <div class=\\\"ui equal width grid\\\"></div>\\n *\\n * <Form widths='equal' />\\n * <div class=\\\"ui equal width form\\\"></div>\\n *\\n * <FieldGroup widths='equal' />\\n * <div class=\\\"equal width fields\\\"></div>\\n *\\n * @example\\n * <Grid columns={4} />\\n * <div class=\\\"ui four column grid\\\"></div>\\n */\\n\\n\\nexports.useVerticalAlignProp = useVerticalAlignProp;\\n\\nvar useWidthProp = function useWidthProp(val) {\\n  var widthClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\\n  var canEqual = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\\n\\n  if (canEqual && val === 'equal') {\\n    return 'equal width';\\n  }\\n\\n  var valType = (0, _typeof2.default)(val);\\n\\n  if ((valType === 'string' || valType === 'number') && widthClass) {\\n    return \\\"\\\".concat((0, _numberToWord.numberToWord)(val), \\\" \\\").concat(widthClass);\\n  }\\n\\n  return (0, _numberToWord.numberToWord)(val);\\n};\\n\\nexports.useWidthProp = useWidthProp;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"_interopRequireDefault\",\"Object\",\"defineProperty\",\"value\",\"useWidthProp\",\"useVerticalAlignProp\",\"useTextAlignProp\",\"useMultipleProp\",\"useKeyOrValueAndKey\",\"useValueAndKey\",\"useKeyOnly\",\"_typeof2\",\"_numberToWord\",\"val\",\"key\",\"concat\",\"replace\",\"split\",\"map\",\"prop\",\"join\",\"widthClass\",\"arguments\",\"length\",\"undefined\",\"valType\",\"default\",\"numberToWord\"]\n}\n"]