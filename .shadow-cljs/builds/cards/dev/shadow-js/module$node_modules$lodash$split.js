["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/split.js"],"~:js","shadow$provide.module$node_modules$lodash$split=function(global,process,require,module,exports,shadow$shims){var baseToString=require(\"module$node_modules$lodash$_baseToString\"),castSlice=require(\"module$node_modules$lodash$_castSlice\"),hasUnicode=require(\"module$node_modules$lodash$_hasUnicode\"),isIterateeCall=require(\"module$node_modules$lodash$_isIterateeCall\"),isRegExp=require(\"module$node_modules$lodash$isRegExp\"),stringToArray=require(\"module$node_modules$lodash$_stringToArray\"),toString=require(\"module$node_modules$lodash$toString\");\nmodule.exports=function(string,separator,limit){limit&&\"number\"!=typeof limit&&isIterateeCall(string,separator,limit)&&(separator=limit=void 0);limit=void 0===limit?4294967295:limit>>>0;return limit?(string=toString(string))&&(\"string\"==typeof separator||null!=separator&&!isRegExp(separator))&&(separator=baseToString(separator),!separator&&hasUnicode(string))?castSlice(stringToArray(string),0,limit):string.split(separator,limit):[]}}","~:source","shadow$provide[\"module$node_modules$lodash$split\"] = function(global,process,require,module,exports,shadow$shims) {\nvar baseToString = require('./_baseToString'),\n    castSlice = require('./_castSlice'),\n    hasUnicode = require('./_hasUnicode'),\n    isIterateeCall = require('./_isIterateeCall'),\n    isRegExp = require('./isRegExp'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/**\n * Splits `string` by `separator`.\n *\n * **Note:** This method is based on\n * [`String#split`](https://mdn.io/String/split).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to split.\n * @param {RegExp|string} separator The separator pattern to split by.\n * @param {number} [limit] The length to truncate results to.\n * @returns {Array} Returns the string segments.\n * @example\n *\n * _.split('a-b-c', '-', 2);\n * // => ['a', 'b']\n */\nfunction split(string, separator, limit) {\n  if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\n    separator = limit = undefined;\n  }\n  limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\n  if (!limit) {\n    return [];\n  }\n  string = toString(string);\n  if (string && (\n        typeof separator == 'string' ||\n        (separator != null && !isRegExp(separator))\n      )) {\n    separator = baseToString(separator);\n    if (!separator && hasUnicode(string)) {\n      return castSlice(stringToArray(string), 0, limit);\n    }\n  }\n  return string.split(separator, limit);\n}\n\nmodule.exports = split;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$lodash$isRegExp","~$module$node_modules$lodash$_isIterateeCall","~$shadow.js","~$module$node_modules$lodash$_hasUnicode","~$module$node_modules$lodash$_castSlice","~$module$node_modules$lodash$_baseToString","~$module$node_modules$lodash$_stringToArray","~$module$node_modules$lodash$toString"]],"~:properties",["^5",[]],"~:compiled-at",1537360506194,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$split.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,iCAAA,CAAqD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAAA,IAC9GC,aAAeJ,OAAA,CAAQ,0CAAR,CAD+F,CAE9GK,UAAYL,OAAA,CAAQ,uCAAR,CAFkG,CAG9GM,WAAaN,OAAA,CAAQ,wCAAR,CAHiG,CAI9GO,eAAiBP,OAAA,CAAQ,4CAAR,CAJ6F,CAK9GQ,SAAWR,OAAA,CAAQ,qCAAR,CALmG,CAM9GS,cAAgBT,OAAA,CAAQ,2CAAR,CAN8F,CAO9GU,SAAWV,OAAA,CAAQ,qCAAR,CA6CfC;MAAAC,QAAA,CArBAS,QAAc,CAACC,MAAD,CAASC,SAAT,CAAoBC,KAApB,CAA2B,CACnCA,KAAJ,EAA6B,QAA7B,EAAa,MAAOA,MAApB,EAAyCP,cAAA,CAAeK,MAAf,CAAuBC,SAAvB,CAAkCC,KAAlC,CAAzC,GACED,SADF,CACcC,KADd,CACsBC,IAAAA,EADtB,CAGAD,MAAA,CAAkBC,IAAAA,EAAV,GAAAD,KAAA,CAzBaE,UAyBb,CAAyCF,KAAzC,GAAmD,CAC3D,OAAKA,MAAL,CAIA,CADAF,MACA,CADSF,QAAA,CAASE,MAAT,CACT,IAC0B,QAD1B,EACM,MAAOC,UADb,EAEoB,IAFpB,EAEOA,SAFP,EAE4B,CAACL,QAAA,CAASK,SAAT,CAF7B,IAIEA,SACI,CADQT,YAAA,CAAaS,SAAb,CACR,CAAA,CAACA,SAAD,EAAcP,UAAA,CAAWM,MAAX,CALpB,EAMWP,SAAA,CAAUI,aAAA,CAAcG,MAAd,CAAV,CAAiC,CAAjC,CAAoCE,KAApC,CANX,CASOF,MAAAD,MAAA,CAAaE,SAAb,CAAwBC,KAAxB,CAbP,CACS,EAN8B,CA/ByE;\",\n\"sources\":[\"node_modules/lodash/split.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$split\\\"] = function(global,process,require,module,exports,shadow$shims) {\\nvar baseToString = require('./_baseToString'),\\n    castSlice = require('./_castSlice'),\\n    hasUnicode = require('./_hasUnicode'),\\n    isIterateeCall = require('./_isIterateeCall'),\\n    isRegExp = require('./isRegExp'),\\n    stringToArray = require('./_stringToArray'),\\n    toString = require('./toString');\\n\\n/** Used as references for the maximum length and index of an array. */\\nvar MAX_ARRAY_LENGTH = 4294967295;\\n\\n/**\\n * Splits `string` by `separator`.\\n *\\n * **Note:** This method is based on\\n * [`String#split`](https://mdn.io/String/split).\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category String\\n * @param {string} [string=''] The string to split.\\n * @param {RegExp|string} separator The separator pattern to split by.\\n * @param {number} [limit] The length to truncate results to.\\n * @returns {Array} Returns the string segments.\\n * @example\\n *\\n * _.split('a-b-c', '-', 2);\\n * // => ['a', 'b']\\n */\\nfunction split(string, separator, limit) {\\n  if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {\\n    separator = limit = undefined;\\n  }\\n  limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;\\n  if (!limit) {\\n    return [];\\n  }\\n  string = toString(string);\\n  if (string && (\\n        typeof separator == 'string' ||\\n        (separator != null && !isRegExp(separator))\\n      )) {\\n    separator = baseToString(separator);\\n    if (!separator && hasUnicode(string)) {\\n      return castSlice(stringToArray(string), 0, limit);\\n    }\\n  }\\n  return string.split(separator, limit);\\n}\\n\\nmodule.exports = split;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"baseToString\",\"castSlice\",\"hasUnicode\",\"isIterateeCall\",\"isRegExp\",\"stringToArray\",\"toString\",\"split\",\"string\",\"separator\",\"limit\",\"undefined\",\"MAX_ARRAY_LENGTH\"]\n}\n"]