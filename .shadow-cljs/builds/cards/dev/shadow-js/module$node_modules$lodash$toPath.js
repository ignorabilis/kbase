["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/toPath.js"],"~:js","shadow$provide.module$node_modules$lodash$toPath=function(global,process,require,module,exports,shadow$shims){var arrayMap=require(\"module$node_modules$lodash$_arrayMap\"),copyArray=require(\"module$node_modules$lodash$_copyArray\"),isArray=require(\"module$node_modules$lodash$isArray\"),isSymbol=require(\"module$node_modules$lodash$isSymbol\"),stringToPath=require(\"module$node_modules$lodash$_stringToPath\"),toKey=require(\"module$node_modules$lodash$_toKey\"),toString=require(\"module$node_modules$lodash$toString\");\nmodule.exports=function(value){return isArray(value)?arrayMap(value,toKey):isSymbol(value)?[value]:copyArray(stringToPath(toString(value)))}}","~:source","shadow$provide[\"module$node_modules$lodash$toPath\"] = function(global,process,require,module,exports,shadow$shims) {\nvar arrayMap = require('./_arrayMap'),\n    copyArray = require('./_copyArray'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol'),\n    stringToPath = require('./_stringToPath'),\n    toKey = require('./_toKey'),\n    toString = require('./toString');\n\n/**\n * Converts `value` to a property path array.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Util\n * @param {*} value The value to convert.\n * @returns {Array} Returns the new property path array.\n * @example\n *\n * _.toPath('a.b.c');\n * // => ['a', 'b', 'c']\n *\n * _.toPath('a[0].b.c');\n * // => ['a', '0', 'b', 'c']\n */\nfunction toPath(value) {\n  if (isArray(value)) {\n    return arrayMap(value, toKey);\n  }\n  return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));\n}\n\nmodule.exports = toPath;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$lodash$_toKey","~$module$node_modules$lodash$_stringToPath","~$shadow.js","~$module$node_modules$lodash$_copyArray","~$module$node_modules$lodash$isSymbol","~$module$node_modules$lodash$_arrayMap","~$module$node_modules$lodash$isArray","~$module$node_modules$lodash$toString"]],"~:properties",["^5",[]],"~:compiled-at",1537360506117,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$toPath.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,kCAAA,CAAsD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAAA,IAC/GC,SAAWJ,OAAA,CAAQ,sCAAR,CADoG,CAE/GK,UAAYL,OAAA,CAAQ,uCAAR,CAFmG,CAG/GM,QAAUN,OAAA,CAAQ,oCAAR,CAHqG,CAI/GO,SAAWP,OAAA,CAAQ,qCAAR,CAJoG,CAK/GQ,aAAeR,OAAA,CAAQ,0CAAR,CALgG,CAM/GS,MAAQT,OAAA,CAAQ,mCAAR,CANuG,CAO/GU,SAAWV,OAAA,CAAQ,qCAAR,CA0BfC;MAAAC,QAAA,CAPAS,QAAe,CAACC,KAAD,CAAQ,CACrB,MAAIN,QAAA,CAAQM,KAAR,CAAJ,CACSR,QAAA,CAASQ,KAAT,CAAgBH,KAAhB,CADT,CAGOF,QAAA,CAASK,KAAT,CAAA,CAAkB,CAACA,KAAD,CAAlB,CAA4BP,SAAA,CAAUG,YAAA,CAAaE,QAAA,CAASE,KAAT,CAAb,CAAV,CAJd,CA1B4F;\",\n\"sources\":[\"node_modules/lodash/toPath.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$toPath\\\"] = function(global,process,require,module,exports,shadow$shims) {\\nvar arrayMap = require('./_arrayMap'),\\n    copyArray = require('./_copyArray'),\\n    isArray = require('./isArray'),\\n    isSymbol = require('./isSymbol'),\\n    stringToPath = require('./_stringToPath'),\\n    toKey = require('./_toKey'),\\n    toString = require('./toString');\\n\\n/**\\n * Converts `value` to a property path array.\\n *\\n * @static\\n * @memberOf _\\n * @since 4.0.0\\n * @category Util\\n * @param {*} value The value to convert.\\n * @returns {Array} Returns the new property path array.\\n * @example\\n *\\n * _.toPath('a.b.c');\\n * // => ['a', 'b', 'c']\\n *\\n * _.toPath('a[0].b.c');\\n * // => ['a', '0', 'b', 'c']\\n */\\nfunction toPath(value) {\\n  if (isArray(value)) {\\n    return arrayMap(value, toKey);\\n  }\\n  return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));\\n}\\n\\nmodule.exports = toPath;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"arrayMap\",\"copyArray\",\"isArray\",\"isSymbol\",\"stringToPath\",\"toKey\",\"toString\",\"toPath\",\"value\"]\n}\n"]