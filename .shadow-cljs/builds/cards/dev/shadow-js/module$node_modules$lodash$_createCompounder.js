["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/_createCompounder.js"],"~:js","shadow$provide.module$node_modules$lodash$_createCompounder=function(global,process,require,module,exports,shadow$shims){var arrayReduce=require(\"module$node_modules$lodash$_arrayReduce\"),deburr=require(\"module$node_modules$lodash$deburr\"),words=require(\"module$node_modules$lodash$words\"),reApos=/['â€™]/g;module.exports=function(callback){return function(string){return arrayReduce(words(deburr(string).replace(reApos,\"\")),callback,\"\")}}}","~:source","shadow$provide[\"module$node_modules$lodash$_createCompounder\"] = function(global,process,require,module,exports,shadow$shims) {\nvar arrayReduce = require('./_arrayReduce'),\n    deburr = require('./deburr'),\n    words = require('./words');\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\";\n\n/** Used to match apostrophes. */\nvar reApos = RegExp(rsApos, 'g');\n\n/**\n * Creates a function like `_.camelCase`.\n *\n * @private\n * @param {Function} callback The function to combine each word.\n * @returns {Function} Returns the new compounder function.\n */\nfunction createCompounder(callback) {\n  return function(string) {\n    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n  };\n}\n\nmodule.exports = createCompounder;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$lodash$deburr","~$shadow.js","~$module$node_modules$lodash$_arrayReduce","~$module$node_modules$lodash$words"]],"~:properties",["^5",[]],"~:compiled-at",1537360506206,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$_createCompounder.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,6CAAA,CAAiE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAAA,IAC1HC,YAAcJ,OAAA,CAAQ,yCAAR,CAD4G,CAE1HK,OAASL,OAAA,CAAQ,mCAAR,CAFiH,CAG1HM,MAAQN,OAAA,CAAQ,kCAAR,CAHkH,CAS1HO,OAAS,OAebN,OAAAC,QAAA,CANAM,QAAyB,CAACC,QAAD,CAAW,CAClC,MAAO,SAAQ,CAACC,MAAD,CAAS,CACtB,MAAON,YAAA,CAAYE,KAAA,CAAMD,MAAA,CAAOK,MAAP,CAAAC,QAAA,CAAuBJ,MAAvB,CAA+B,EAA/B,CAAN,CAAZ,CAAuDE,QAAvD,CAAiE,EAAjE,CADe,CADU,CAlB0F;\",\n\"sources\":[\"node_modules/lodash/_createCompounder.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$_createCompounder\\\"] = function(global,process,require,module,exports,shadow$shims) {\\nvar arrayReduce = require('./_arrayReduce'),\\n    deburr = require('./deburr'),\\n    words = require('./words');\\n\\n/** Used to compose unicode capture groups. */\\nvar rsApos = \\\"['\\\\u2019]\\\";\\n\\n/** Used to match apostrophes. */\\nvar reApos = RegExp(rsApos, 'g');\\n\\n/**\\n * Creates a function like `_.camelCase`.\\n *\\n * @private\\n * @param {Function} callback The function to combine each word.\\n * @returns {Function} Returns the new compounder function.\\n */\\nfunction createCompounder(callback) {\\n  return function(string) {\\n    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\\n  };\\n}\\n\\nmodule.exports = createCompounder;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"arrayReduce\",\"deburr\",\"words\",\"reApos\",\"createCompounder\",\"callback\",\"string\",\"replace\"]\n}\n"]