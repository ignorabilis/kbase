["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/trim.js"],"~:js","shadow$provide.module$node_modules$lodash$trim=function(global,process,require,module,exports,shadow$shims){var baseToString=require(\"module$node_modules$lodash$_baseToString\"),castSlice=require(\"module$node_modules$lodash$_castSlice\"),charsEndIndex=require(\"module$node_modules$lodash$_charsEndIndex\"),charsStartIndex=require(\"module$node_modules$lodash$_charsStartIndex\"),stringToArray=require(\"module$node_modules$lodash$_stringToArray\"),toString=require(\"module$node_modules$lodash$toString\"),reTrim=\n/^\\s+|\\s+$/g;module.exports=function(string,chars,guard){if((string=toString(string))&&(guard||void 0===chars))return string.replace(reTrim,\"\");if(!string||!(chars=baseToString(chars)))return string;string=stringToArray(string);guard=stringToArray(chars);chars=charsStartIndex(string,guard);guard=charsEndIndex(string,guard)+1;return castSlice(string,chars,guard).join(\"\")}}","~:source","shadow$provide[\"module$node_modules$lodash$trim\"] = function(global,process,require,module,exports,shadow$shims) {\nvar baseToString = require('./_baseToString'),\n    castSlice = require('./_castSlice'),\n    charsEndIndex = require('./_charsEndIndex'),\n    charsStartIndex = require('./_charsStartIndex'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/**\n * Removes leading and trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trim('  abc  ');\n * // => 'abc'\n *\n * _.trim('-_-abc-_-', '_-');\n * // => 'abc'\n *\n * _.map(['  foo  ', '  bar  '], _.trim);\n * // => ['foo', 'bar']\n */\nfunction trim(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return string.replace(reTrim, '');\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      chrSymbols = stringToArray(chars),\n      start = charsStartIndex(strSymbols, chrSymbols),\n      end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n  return castSlice(strSymbols, start, end).join('');\n}\n\nmodule.exports = trim;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$lodash$_charsEndIndex","~$shadow.js","~$module$node_modules$lodash$_charsStartIndex","~$module$node_modules$lodash$_castSlice","~$module$node_modules$lodash$_baseToString","~$module$node_modules$lodash$_stringToArray","~$module$node_modules$lodash$toString"]],"~:properties",["^5",[]],"~:compiled-at",1537360506132,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$trim.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,gCAAA,CAAoD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAAA,IAC7GC,aAAeJ,OAAA,CAAQ,0CAAR,CAD8F,CAE7GK,UAAYL,OAAA,CAAQ,uCAAR,CAFiG,CAG7GM,cAAgBN,OAAA,CAAQ,2CAAR,CAH6F,CAI7GO,gBAAkBP,OAAA,CAAQ,6CAAR,CAJ2F,CAK7GQ,cAAgBR,OAAA,CAAQ,2CAAR,CAL6F,CAM7GS,SAAWT,OAAA,CAAQ,qCAAR,CANkG,CAS7GU;AAAS,YAwCbT,OAAAC,QAAA,CAhBAS,QAAa,CAACC,MAAD,CAASC,KAAT,CAAgBC,KAAhB,CAAuB,CAElC,IADAF,MACA,CADSH,QAAA,CAASG,MAAT,CACT,IAAeE,KAAf,EAAkCC,IAAAA,EAAlC,GAAwBF,KAAxB,EACE,MAAOD,OAAAI,QAAA,CAAeN,MAAf,CAAuB,EAAvB,CAET,IAAI,CAACE,MAAL,EAAe,EAAEC,KAAF,CAAUT,YAAA,CAAaS,KAAb,CAAV,CAAf,CACE,MAAOD,OAELK,OAAAA,CAAaT,aAAA,CAAcI,MAAd,CACbM,MAAAA,CAAaV,aAAA,CAAcK,KAAd,CACbM,MAAAA,CAAQZ,eAAA,CAAgBU,MAAhB,CAA4BC,KAA5B,CACRE,MAAAA,CAAMd,aAAA,CAAcW,MAAd,CAA0BC,KAA1B,CAANE,CAA8C,CAElD,OAAOf,UAAA,CAAUY,MAAV,CAAsBE,KAAtB,CAA6BC,KAA7B,CAAAC,KAAA,CAAuC,EAAvC,CAb2B,CAjC6E;\",\n\"sources\":[\"node_modules/lodash/trim.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$trim\\\"] = function(global,process,require,module,exports,shadow$shims) {\\nvar baseToString = require('./_baseToString'),\\n    castSlice = require('./_castSlice'),\\n    charsEndIndex = require('./_charsEndIndex'),\\n    charsStartIndex = require('./_charsStartIndex'),\\n    stringToArray = require('./_stringToArray'),\\n    toString = require('./toString');\\n\\n/** Used to match leading and trailing whitespace. */\\nvar reTrim = /^\\\\s+|\\\\s+$/g;\\n\\n/**\\n * Removes leading and trailing whitespace or specified characters from `string`.\\n *\\n * @static\\n * @memberOf _\\n * @since 3.0.0\\n * @category String\\n * @param {string} [string=''] The string to trim.\\n * @param {string} [chars=whitespace] The characters to trim.\\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\\n * @returns {string} Returns the trimmed string.\\n * @example\\n *\\n * _.trim('  abc  ');\\n * // => 'abc'\\n *\\n * _.trim('-_-abc-_-', '_-');\\n * // => 'abc'\\n *\\n * _.map(['  foo  ', '  bar  '], _.trim);\\n * // => ['foo', 'bar']\\n */\\nfunction trim(string, chars, guard) {\\n  string = toString(string);\\n  if (string && (guard || chars === undefined)) {\\n    return string.replace(reTrim, '');\\n  }\\n  if (!string || !(chars = baseToString(chars))) {\\n    return string;\\n  }\\n  var strSymbols = stringToArray(string),\\n      chrSymbols = stringToArray(chars),\\n      start = charsStartIndex(strSymbols, chrSymbols),\\n      end = charsEndIndex(strSymbols, chrSymbols) + 1;\\n\\n  return castSlice(strSymbols, start, end).join('');\\n}\\n\\nmodule.exports = trim;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"baseToString\",\"castSlice\",\"charsEndIndex\",\"charsStartIndex\",\"stringToArray\",\"toString\",\"reTrim\",\"trim\",\"string\",\"chars\",\"guard\",\"undefined\",\"replace\",\"strSymbols\",\"chrSymbols\",\"start\",\"end\",\"join\"]\n}\n"]