["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/_baseInRange.js"],"~:js","shadow$provide.module$node_modules$lodash$_baseInRange=function(global,process,require,module,exports,shadow$shims){var nativeMax=Math.max,nativeMin=Math.min;module.exports=function(number,start,end){return number>=nativeMin(start,end)&&number<nativeMax(start,end)}}","~:source","shadow$provide[\"module$node_modules$lodash$_baseInRange\"] = function(global,process,require,module,exports,shadow$shims) {\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * The base implementation of `_.inRange` which doesn't coerce arguments.\n *\n * @private\n * @param {number} number The number to check.\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n */\nfunction baseInRange(number, start, end) {\n  return number >= nativeMin(start, end) && number < nativeMax(start, end);\n}\n\nmodule.exports = baseInRange;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",[]],"~:compiled-at",1537360506158,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$_baseInRange.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,wCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAAA,IAErHC,UAAYC,IAAAC,IAFyG,CAGrHC,UAAYF,IAAAG,IAehBP,OAAAC,QAAA,CAJAO,QAAoB,CAACC,MAAD,CAASC,KAAT,CAAgBC,GAAhB,CAAqB,CACvC,MAAOF,OAAP,EAAiBH,SAAA,CAAUI,KAAV,CAAiBC,GAAjB,CAAjB,EAA0CF,MAA1C,CAAmDN,SAAA,CAAUO,KAAV,CAAiBC,GAAjB,CADZ,CAdgF;\",\n\"sources\":[\"node_modules/lodash/_baseInRange.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$_baseInRange\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeMax = Math.max,\\n    nativeMin = Math.min;\\n\\n/**\\n * The base implementation of `_.inRange` which doesn't coerce arguments.\\n *\\n * @private\\n * @param {number} number The number to check.\\n * @param {number} start The start of the range.\\n * @param {number} end The end of the range.\\n * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\\n */\\nfunction baseInRange(number, start, end) {\\n  return number >= nativeMin(start, end) && number < nativeMax(start, end);\\n}\\n\\nmodule.exports = baseInRange;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"nativeMax\",\"Math\",\"max\",\"nativeMin\",\"min\",\"baseInRange\",\"number\",\"start\",\"end\"]\n}\n"]