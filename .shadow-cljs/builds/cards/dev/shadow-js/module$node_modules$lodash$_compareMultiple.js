["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/_compareMultiple.js"],"~:js","shadow$provide.module$node_modules$lodash$_compareMultiple=function(global,process,require,module,exports,shadow$shims){var compareAscending=require(\"module$node_modules$lodash$_compareAscending\");module.exports=function(object,other,orders){for(var index=-1,objCriteria=object.criteria,othCriteria=other.criteria,length=objCriteria.length,ordersLength=orders.length;++index<length;){var result=compareAscending(objCriteria[index],othCriteria[index]);if(result)return index>=ordersLength?result:result*\n(\"desc\"==orders[index]?-1:1)}return object.index-other.index}}","~:source","shadow$provide[\"module$node_modules$lodash$_compareMultiple\"] = function(global,process,require,module,exports,shadow$shims) {\nvar compareAscending = require('./_compareAscending');\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nmodule.exports = compareMultiple;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$lodash$_compareAscending"]],"~:properties",["^5",[]],"~:compiled-at",1537360506138,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$_compareMultiple.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,4CAAA,CAAgE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAC7H,IAAIC,iBAAmBJ,OAAA,CAAQ,8CAAR,CA2CvBC,OAAAC,QAAA,CA3BAG,QAAwB,CAACC,MAAD,CAASC,KAAT,CAAgBC,MAAhB,CAAwB,CAO9C,IAP8C,IAC1CC,MAAS,EADiC,CAE1CC,YAAcJ,MAAAK,SAF4B,CAG1CC,YAAcL,KAAAI,SAH4B,CAI1CE,OAASH,WAAAG,OAJiC,CAK1CC,aAAeN,MAAAK,OAEnB,CAAO,EAAEJ,KAAT,CAAiBI,MAAjB,CAAA,CAAyB,CACvB,IAAIE,OAASX,gBAAA,CAAiBM,WAAA,CAAYD,KAAZ,CAAjB,CAAqCG,WAAA,CAAYH,KAAZ,CAArC,CACb,IAAIM,MAAJ,CACE,MAAIN,MAAJ,EAAaK,YAAb,CACSC,MADT,CAIOA,MAJP;CAI0B,MAAT,EADLP,MAAAQ,CAAOP,KAAPO,CACK,CAAmB,EAAnB,CAAuB,CAJxC,CAHqB,CAiBzB,MAAOV,OAAAG,MAAP,CAAsBF,KAAAE,MAxBwB,CAjB6E;\",\n\"sources\":[\"node_modules/lodash/_compareMultiple.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$_compareMultiple\\\"] = function(global,process,require,module,exports,shadow$shims) {\\nvar compareAscending = require('./_compareAscending');\\n\\n/**\\n * Used by `_.orderBy` to compare multiple properties of a value to another\\n * and stable sort them.\\n *\\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\\n * specify an order of \\\"desc\\\" for descending or \\\"asc\\\" for ascending sort order\\n * of corresponding values.\\n *\\n * @private\\n * @param {Object} object The object to compare.\\n * @param {Object} other The other object to compare.\\n * @param {boolean[]|string[]} orders The order to sort by for each property.\\n * @returns {number} Returns the sort order indicator for `object`.\\n */\\nfunction compareMultiple(object, other, orders) {\\n  var index = -1,\\n      objCriteria = object.criteria,\\n      othCriteria = other.criteria,\\n      length = objCriteria.length,\\n      ordersLength = orders.length;\\n\\n  while (++index < length) {\\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\\n    if (result) {\\n      if (index >= ordersLength) {\\n        return result;\\n      }\\n      var order = orders[index];\\n      return result * (order == 'desc' ? -1 : 1);\\n    }\\n  }\\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\\n  // that causes it, under certain circumstances, to provide the same value for\\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\\n  // for more details.\\n  //\\n  // This also ensures a stable sort in V8 and other engines.\\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\\n  return object.index - other.index;\\n}\\n\\nmodule.exports = compareMultiple;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"compareAscending\",\"compareMultiple\",\"object\",\"other\",\"orders\",\"index\",\"objCriteria\",\"criteria\",\"othCriteria\",\"length\",\"ordersLength\",\"result\",\"order\"]\n}\n"]