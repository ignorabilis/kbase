["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/_baseIntersection.js"],"~:js","shadow$provide.module$node_modules$lodash$_baseIntersection=function(global,process,require,module,exports,shadow$shims){var SetCache=require(\"module$node_modules$lodash$_SetCache\"),arrayIncludes=require(\"module$node_modules$lodash$_arrayIncludes\"),arrayIncludesWith=require(\"module$node_modules$lodash$_arrayIncludesWith\"),arrayMap=require(\"module$node_modules$lodash$_arrayMap\"),baseUnary=require(\"module$node_modules$lodash$_baseUnary\"),cacheHas=require(\"module$node_modules$lodash$_cacheHas\"),nativeMin=\nMath.min;module.exports=function(arrays,iteratee,comparator){for(var includes=comparator?arrayIncludesWith:arrayIncludes,length=arrays[0].length,othLength=arrays.length,othIndex=othLength,caches=Array(othLength),maxLength=Infinity,result=[];othIndex--;){var array=arrays[othIndex];othIndex&&iteratee&&(array=arrayMap(array,baseUnary(iteratee)));maxLength=nativeMin(array.length,maxLength);caches[othIndex]=!comparator&&(iteratee||120<=length&&120<=array.length)?new SetCache(othIndex&&array):void 0}array=\narrays[0];var index=-1,seen=caches[0];a:for(;++index<length&&result.length<maxLength;){var value=array[index],computed=iteratee?iteratee(value):value;value=comparator||0!==value?value:0;if(seen?!cacheHas(seen,computed):!includes(result,computed,comparator)){for(othIndex=othLength;--othIndex;){var cache=caches[othIndex];if(cache?!cacheHas(cache,computed):!includes(arrays[othIndex],computed,comparator))continue a}seen&&seen.push(computed);result.push(value)}}return result}}","~:source","shadow$provide[\"module$node_modules$lodash$_baseIntersection\"] = function(global,process,require,module,exports,shadow$shims) {\nvar SetCache = require('./_SetCache'),\n    arrayIncludes = require('./_arrayIncludes'),\n    arrayIncludesWith = require('./_arrayIncludesWith'),\n    arrayMap = require('./_arrayMap'),\n    baseUnary = require('./_baseUnary'),\n    cacheHas = require('./_cacheHas');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * The base implementation of methods like `_.intersection`, without support\n * for iteratee shorthands, that accepts an array of arrays to inspect.\n *\n * @private\n * @param {Array} arrays The arrays to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of shared values.\n */\nfunction baseIntersection(arrays, iteratee, comparator) {\n  var includes = comparator ? arrayIncludesWith : arrayIncludes,\n      length = arrays[0].length,\n      othLength = arrays.length,\n      othIndex = othLength,\n      caches = Array(othLength),\n      maxLength = Infinity,\n      result = [];\n\n  while (othIndex--) {\n    var array = arrays[othIndex];\n    if (othIndex && iteratee) {\n      array = arrayMap(array, baseUnary(iteratee));\n    }\n    maxLength = nativeMin(array.length, maxLength);\n    caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\n      ? new SetCache(othIndex && array)\n      : undefined;\n  }\n  array = arrays[0];\n\n  var index = -1,\n      seen = caches[0];\n\n  outer:\n  while (++index < length && result.length < maxLength) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (!(seen\n          ? cacheHas(seen, computed)\n          : includes(result, computed, comparator)\n        )) {\n      othIndex = othLength;\n      while (--othIndex) {\n        var cache = caches[othIndex];\n        if (!(cache\n              ? cacheHas(cache, computed)\n              : includes(arrays[othIndex], computed, comparator))\n            ) {\n          continue outer;\n        }\n      }\n      if (seen) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseIntersection;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$lodash$_baseUnary","~$shadow.js","~$module$node_modules$lodash$_arrayIncludesWith","~$module$node_modules$lodash$_SetCache","~$module$node_modules$lodash$_arrayIncludes","~$module$node_modules$lodash$_cacheHas","~$module$node_modules$lodash$_arrayMap"]],"~:properties",["^5",[]],"~:compiled-at",1537360506085,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$_baseIntersection.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,6CAAA,CAAiE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAAA,IAC1HC,SAAWJ,OAAA,CAAQ,sCAAR,CAD+G,CAE1HK,cAAgBL,OAAA,CAAQ,2CAAR,CAF0G,CAG1HM,kBAAoBN,OAAA,CAAQ,+CAAR,CAHsG,CAI1HO,SAAWP,OAAA,CAAQ,sCAAR,CAJ+G,CAK1HQ,UAAYR,OAAA,CAAQ,uCAAR,CAL8G,CAM1HS,SAAWT,OAAA,CAAQ,sCAAR,CAN+G,CAS1HU;AAAYC,IAAAC,IAiEhBX,OAAAC,QAAA,CArDAW,QAAyB,CAACC,MAAD,CAASC,QAAT,CAAmBC,UAAnB,CAA+B,CAStD,IATsD,IAClDC,SAAWD,UAAA,CAAaV,iBAAb,CAAiCD,aADM,CAElDa,OAASJ,MAAA,CAAO,CAAP,CAAAI,OAFyC,CAGlDC,UAAYL,MAAAI,OAHsC,CAIlDE,SAAWD,SAJuC,CAKlDE,OAASC,KAAA,CAAMH,SAAN,CALyC,CAMlDI,UAAYC,QANsC,CAOlDC,OAAS,EAEb,CAAOL,QAAA,EAAP,CAAA,CAAmB,CACjB,IAAIM,MAAQZ,MAAA,CAAOM,QAAP,CACRA,SAAJ,EAAgBL,QAAhB,GACEW,KADF,CACUnB,QAAA,CAASmB,KAAT,CAAgBlB,SAAA,CAAUO,QAAV,CAAhB,CADV,CAGAQ,UAAA,CAAYb,SAAA,CAAUgB,KAAAR,OAAV,CAAwBK,SAAxB,CACZF,OAAA,CAAOD,QAAP,CAAA,CAAmB,CAACJ,UAAD,GAAgBD,QAAhB,EAAuC,GAAvC,EAA6BG,MAA7B,EAA8D,GAA9D,EAA8CQ,KAAAR,OAA9C,EACf,IAAId,QAAJ,CAAagB,QAAb,EAAyBM,KAAzB,CADe,CAEfC,IAAAA,EARa,CAUnBD,KAAA;AAAQZ,MAAA,CAAO,CAAP,CAnB8C,KAqBlDc,MAAS,EArByC,CAsBlDC,KAAOR,MAAA,CAAO,CAAP,CAEX,EAAA,CACA,IAAA,CAAO,EAAEO,KAAT,CAAiBV,MAAjB,EAA2BO,MAAAP,OAA3B,CAA2CK,SAA3C,CAAA,CAAsD,CAAA,IAChDO,MAAQJ,KAAA,CAAME,KAAN,CADwC,CAEhDG,SAAWhB,QAAA,CAAWA,QAAA,CAASe,KAAT,CAAX,CAA6BA,KAE5CA,MAAA,CAASd,UAAD,EAAyB,CAAzB,GAAec,KAAf,CAA8BA,KAA9B,CAAsC,CAC9C,IAAMD,IAAA,CACE,CAAApB,QAAA,CAASoB,IAAT,CAAeE,QAAf,CADF,CAEE,CAAAd,QAAA,CAASQ,MAAT,CAAiBM,QAAjB,CAA2Bf,UAA3B,CAFR,CAGO,CAEL,IADAI,QACA,CADWD,SACX,CAAO,EAAEC,QAAT,CAAA,CAAmB,CACjB,IAAIY,MAAQX,MAAA,CAAOD,QAAP,CACZ,IAAMY,KAAA,CACE,CAAAvB,QAAA,CAASuB,KAAT,CAAgBD,QAAhB,CADF,CAEE,CAAAd,QAAA,CAASH,MAAA,CAAOM,QAAP,CAAT,CAA2BW,QAA3B,CAAqCf,UAArC,CAFR,CAIE,SAAS,CANM,CASfa,IAAJ,EACEA,IAAAI,KAAA,CAAUF,QAAV,CAEFN,OAAAQ,KAAA,CAAYH,KAAZ,CAdK,CAR6C,CAyBtD,MAAOL,OAlD+C,CArBsE;\",\n\"sources\":[\"node_modules/lodash/_baseIntersection.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$_baseIntersection\\\"] = function(global,process,require,module,exports,shadow$shims) {\\nvar SetCache = require('./_SetCache'),\\n    arrayIncludes = require('./_arrayIncludes'),\\n    arrayIncludesWith = require('./_arrayIncludesWith'),\\n    arrayMap = require('./_arrayMap'),\\n    baseUnary = require('./_baseUnary'),\\n    cacheHas = require('./_cacheHas');\\n\\n/* Built-in method references for those with the same name as other `lodash` methods. */\\nvar nativeMin = Math.min;\\n\\n/**\\n * The base implementation of methods like `_.intersection`, without support\\n * for iteratee shorthands, that accepts an array of arrays to inspect.\\n *\\n * @private\\n * @param {Array} arrays The arrays to inspect.\\n * @param {Function} [iteratee] The iteratee invoked per element.\\n * @param {Function} [comparator] The comparator invoked per element.\\n * @returns {Array} Returns the new array of shared values.\\n */\\nfunction baseIntersection(arrays, iteratee, comparator) {\\n  var includes = comparator ? arrayIncludesWith : arrayIncludes,\\n      length = arrays[0].length,\\n      othLength = arrays.length,\\n      othIndex = othLength,\\n      caches = Array(othLength),\\n      maxLength = Infinity,\\n      result = [];\\n\\n  while (othIndex--) {\\n    var array = arrays[othIndex];\\n    if (othIndex && iteratee) {\\n      array = arrayMap(array, baseUnary(iteratee));\\n    }\\n    maxLength = nativeMin(array.length, maxLength);\\n    caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))\\n      ? new SetCache(othIndex && array)\\n      : undefined;\\n  }\\n  array = arrays[0];\\n\\n  var index = -1,\\n      seen = caches[0];\\n\\n  outer:\\n  while (++index < length && result.length < maxLength) {\\n    var value = array[index],\\n        computed = iteratee ? iteratee(value) : value;\\n\\n    value = (comparator || value !== 0) ? value : 0;\\n    if (!(seen\\n          ? cacheHas(seen, computed)\\n          : includes(result, computed, comparator)\\n        )) {\\n      othIndex = othLength;\\n      while (--othIndex) {\\n        var cache = caches[othIndex];\\n        if (!(cache\\n              ? cacheHas(cache, computed)\\n              : includes(arrays[othIndex], computed, comparator))\\n            ) {\\n          continue outer;\\n        }\\n      }\\n      if (seen) {\\n        seen.push(computed);\\n      }\\n      result.push(value);\\n    }\\n  }\\n  return result;\\n}\\n\\nmodule.exports = baseIntersection;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"SetCache\",\"arrayIncludes\",\"arrayIncludesWith\",\"arrayMap\",\"baseUnary\",\"cacheHas\",\"nativeMin\",\"Math\",\"min\",\"baseIntersection\",\"arrays\",\"iteratee\",\"comparator\",\"includes\",\"length\",\"othLength\",\"othIndex\",\"caches\",\"Array\",\"maxLength\",\"Infinity\",\"result\",\"array\",\"undefined\",\"index\",\"seen\",\"value\",\"computed\",\"cache\",\"push\"]\n}\n"]