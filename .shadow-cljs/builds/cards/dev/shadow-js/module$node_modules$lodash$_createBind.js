["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/_createBind.js"],"~:js","shadow$provide.module$node_modules$lodash$_createBind=function(global,process,require,module,exports,shadow$shims){var createCtor=require(\"module$node_modules$lodash$_createCtor\"),root=require(\"module$node_modules$lodash$_root\");module.exports=function(func,bitmask,thisArg){function wrapper(){return(this&&this!==root&&this instanceof wrapper?Ctor:func).apply(isBind?thisArg:this,arguments)}var isBind=bitmask&1,Ctor=createCtor(func);return wrapper}}","~:source","shadow$provide[\"module$node_modules$lodash$_createBind\"] = function(global,process,require,module,exports,shadow$shims) {\nvar createCtor = require('./_createCtor'),\n    root = require('./_root');\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1;\n\n/**\n * Creates a function that wraps `func` to invoke it with the optional `this`\n * binding of `thisArg`.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @param {*} [thisArg] The `this` binding of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createBind(func, bitmask, thisArg) {\n  var isBind = bitmask & WRAP_BIND_FLAG,\n      Ctor = createCtor(func);\n\n  function wrapper() {\n    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n    return fn.apply(isBind ? thisArg : this, arguments);\n  }\n  return wrapper;\n}\n\nmodule.exports = createBind;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$lodash$_root","~$module$node_modules$lodash$_createCtor"]],"~:properties",["^5",[]],"~:compiled-at",1537360506099,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$_createBind.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,uCAAA,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAAA,IACpHC,WAAaJ,OAAA,CAAQ,wCAAR,CADuG,CAEpHK,KAAOL,OAAA,CAAQ,kCAAR,CA0BXC,OAAAC,QAAA,CAXAI,QAAmB,CAACC,IAAD,CAAOC,OAAP,CAAgBC,OAAhB,CAAyB,CAI1CC,QAASA,QAAO,EAAG,CAEjB,MAAOC,CADG,IAADC,EAAS,IAATA,GAAkBP,IAAlBO,EAA0B,IAA1BA,WAA0CF,QAA1CE,CAAqDC,IAArDD,CAA4DL,IAC9DI,OAAA,CAASG,MAAA,CAASL,OAAT,CAAmB,IAA5B,CAAkCM,SAAlC,CAFU,CAJuB,IACtCD,OAASN,OAATM,CAbeE,CAYuB,CAEtCH,KAAOT,UAAA,CAAWG,IAAX,CAMX,OAAOG,QARmC,CAjB4E;\",\n\"sources\":[\"node_modules/lodash/_createBind.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$_createBind\\\"] = function(global,process,require,module,exports,shadow$shims) {\\nvar createCtor = require('./_createCtor'),\\n    root = require('./_root');\\n\\n/** Used to compose bitmasks for function metadata. */\\nvar WRAP_BIND_FLAG = 1;\\n\\n/**\\n * Creates a function that wraps `func` to invoke it with the optional `this`\\n * binding of `thisArg`.\\n *\\n * @private\\n * @param {Function} func The function to wrap.\\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\\n * @param {*} [thisArg] The `this` binding of `func`.\\n * @returns {Function} Returns the new wrapped function.\\n */\\nfunction createBind(func, bitmask, thisArg) {\\n  var isBind = bitmask & WRAP_BIND_FLAG,\\n      Ctor = createCtor(func);\\n\\n  function wrapper() {\\n    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\\n    return fn.apply(isBind ? thisArg : this, arguments);\\n  }\\n  return wrapper;\\n}\\n\\nmodule.exports = createBind;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"createCtor\",\"root\",\"createBind\",\"func\",\"bitmask\",\"thisArg\",\"wrapper\",\"apply\",\"fn\",\"Ctor\",\"isBind\",\"arguments\",\"WRAP_BIND_FLAG\"]\n}\n"]