["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/inRange.js"],"~:js","shadow$provide.module$node_modules$lodash$inRange=function(global,process,require,module,exports,shadow$shims){var baseInRange=require(\"module$node_modules$lodash$_baseInRange\"),toFinite=require(\"module$node_modules$lodash$toFinite\"),toNumber=require(\"module$node_modules$lodash$toNumber\");module.exports=function(number,start,end){start=toFinite(start);void 0===end?(end=start,start=0):end=toFinite(end);number=toNumber(number);return baseInRange(number,start,end)}}","~:source","shadow$provide[\"module$node_modules$lodash$inRange\"] = function(global,process,require,module,exports,shadow$shims) {\nvar baseInRange = require('./_baseInRange'),\n    toFinite = require('./toFinite'),\n    toNumber = require('./toNumber');\n\n/**\n * Checks if `n` is between `start` and up to, but not including, `end`. If\n * `end` is not specified, it's set to `start` with `start` then set to `0`.\n * If `start` is greater than `end` the params are swapped to support\n * negative ranges.\n *\n * @static\n * @memberOf _\n * @since 3.3.0\n * @category Number\n * @param {number} number The number to check.\n * @param {number} [start=0] The start of the range.\n * @param {number} end The end of the range.\n * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n * @see _.range, _.rangeRight\n * @example\n *\n * _.inRange(3, 2, 4);\n * // => true\n *\n * _.inRange(4, 8);\n * // => true\n *\n * _.inRange(4, 2);\n * // => false\n *\n * _.inRange(2, 2);\n * // => false\n *\n * _.inRange(1.2, 2);\n * // => true\n *\n * _.inRange(5.2, 4);\n * // => false\n *\n * _.inRange(-3, -2, -6);\n * // => true\n */\nfunction inRange(number, start, end) {\n  start = toFinite(start);\n  if (end === undefined) {\n    end = start;\n    start = 0;\n  } else {\n    end = toFinite(end);\n  }\n  number = toNumber(number);\n  return baseInRange(number, start, end);\n}\n\nmodule.exports = inRange;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$lodash$toFinite","~$module$node_modules$lodash$toNumber","~$module$node_modules$lodash$_baseInRange"]],"~:properties",["^5",[]],"~:compiled-at",1537360506158,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$inRange.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,mCAAA,CAAuD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAAA,IAChHC,YAAcJ,OAAA,CAAQ,yCAAR,CADkG,CAEhHK,SAAWL,OAAA,CAAQ,qCAAR,CAFqG,CAGhHM,SAAWN,OAAA,CAAQ,qCAAR,CAoDfC,OAAAC,QAAA,CAZAK,QAAgB,CAACC,MAAD,CAASC,KAAT,CAAgBC,GAAhB,CAAqB,CACnCD,KAAA,CAAQJ,QAAA,CAASI,KAAT,CACIE,KAAAA,EAAZ,GAAID,GAAJ,EACEA,GACA,CADMD,KACN,CAAAA,KAAA,CAAQ,CAFV,EAIEC,GAJF,CAIQL,QAAA,CAASK,GAAT,CAERF,OAAA,CAASF,QAAA,CAASE,MAAT,CACT,OAAOJ,YAAA,CAAYI,MAAZ,CAAoBC,KAApB,CAA2BC,GAA3B,CAT4B,CA3C+E;\",\n\"sources\":[\"node_modules/lodash/inRange.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$inRange\\\"] = function(global,process,require,module,exports,shadow$shims) {\\nvar baseInRange = require('./_baseInRange'),\\n    toFinite = require('./toFinite'),\\n    toNumber = require('./toNumber');\\n\\n/**\\n * Checks if `n` is between `start` and up to, but not including, `end`. If\\n * `end` is not specified, it's set to `start` with `start` then set to `0`.\\n * If `start` is greater than `end` the params are swapped to support\\n * negative ranges.\\n *\\n * @static\\n * @memberOf _\\n * @since 3.3.0\\n * @category Number\\n * @param {number} number The number to check.\\n * @param {number} [start=0] The start of the range.\\n * @param {number} end The end of the range.\\n * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\\n * @see _.range, _.rangeRight\\n * @example\\n *\\n * _.inRange(3, 2, 4);\\n * // => true\\n *\\n * _.inRange(4, 8);\\n * // => true\\n *\\n * _.inRange(4, 2);\\n * // => false\\n *\\n * _.inRange(2, 2);\\n * // => false\\n *\\n * _.inRange(1.2, 2);\\n * // => true\\n *\\n * _.inRange(5.2, 4);\\n * // => false\\n *\\n * _.inRange(-3, -2, -6);\\n * // => true\\n */\\nfunction inRange(number, start, end) {\\n  start = toFinite(start);\\n  if (end === undefined) {\\n    end = start;\\n    start = 0;\\n  } else {\\n    end = toFinite(end);\\n  }\\n  number = toNumber(number);\\n  return baseInRange(number, start, end);\\n}\\n\\nmodule.exports = inRange;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"baseInRange\",\"toFinite\",\"toNumber\",\"inRange\",\"number\",\"start\",\"end\",\"undefined\"]\n}\n"]