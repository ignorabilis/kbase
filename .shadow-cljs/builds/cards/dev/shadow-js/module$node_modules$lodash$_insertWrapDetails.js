["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/_insertWrapDetails.js"],"~:js","shadow$provide.module$node_modules$lodash$_insertWrapDetails=function(global,process,require,module,exports,shadow$shims){var reWrapComment=/\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/;module.exports=function(source,details){var length=details.length;if(!length)return source;var lastIndex=length-1;details[lastIndex]=(1<length?\"\\x26 \":\"\")+details[lastIndex];details=details.join(2<length?\", \":\" \");return source.replace(reWrapComment,\"{\\n/* [wrapped with \"+details+\"] */\\n\")}}","~:source","shadow$provide[\"module$node_modules$lodash$_insertWrapDetails\"] = function(global,process,require,module,exports,shadow$shims) {\n/** Used to match wrap detail comments. */\nvar reWrapComment = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/;\n\n/**\n * Inserts wrapper `details` in a comment at the top of the `source` body.\n *\n * @private\n * @param {string} source The source to modify.\n * @returns {Array} details The details to insert.\n * @returns {string} Returns the modified source.\n */\nfunction insertWrapDetails(source, details) {\n  var length = details.length;\n  if (!length) {\n    return source;\n  }\n  var lastIndex = length - 1;\n  details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];\n  details = details.join(length > 2 ? ', ' : ' ');\n  return source.replace(reWrapComment, '{\\n/* [wrapped with ' + details + '] */\\n');\n}\n\nmodule.exports = insertWrapDetails;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",[]],"~:compiled-at",1537360506105,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$_insertWrapDetails.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,8CAAA,CAAkE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAE/H,IAAIC,cAAgB,2CAqBpBH,OAAAC,QAAA,CAXAG,QAA0B,CAACC,MAAD,CAASC,OAAT,CAAkB,CAC1C,IAAIC,OAASD,OAAAC,OACb,IAAI,CAACA,MAAL,CACE,MAAOF,OAET,KAAIG,UAAYD,MAAZC,CAAqB,CACzBF,QAAA,CAAQE,SAAR,CAAA,EAA+B,CAAT,CAAAD,MAAA,CAAa,OAAb,CAAoB,EAA1C,EAAgDD,OAAA,CAAQE,SAAR,CAChDF,QAAA,CAAUA,OAAAG,KAAA,CAAsB,CAAT,CAAAF,MAAA,CAAa,IAAb,CAAoB,GAAjC,CACV,OAAOF,OAAAK,QAAA,CAAeP,aAAf,CAA8B,sBAA9B,CAAuDG,OAAvD,CAAiE,QAAjE,CARmC,CAZmF;\",\n\"sources\":[\"node_modules/lodash/_insertWrapDetails.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$_insertWrapDetails\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/** Used to match wrap detail comments. */\\nvar reWrapComment = /\\\\{(?:\\\\n\\\\/\\\\* \\\\[wrapped with .+\\\\] \\\\*\\\\/)?\\\\n?/;\\n\\n/**\\n * Inserts wrapper `details` in a comment at the top of the `source` body.\\n *\\n * @private\\n * @param {string} source The source to modify.\\n * @returns {Array} details The details to insert.\\n * @returns {string} Returns the modified source.\\n */\\nfunction insertWrapDetails(source, details) {\\n  var length = details.length;\\n  if (!length) {\\n    return source;\\n  }\\n  var lastIndex = length - 1;\\n  details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];\\n  details = details.join(length > 2 ? ', ' : ' ');\\n  return source.replace(reWrapComment, '{\\\\n/* [wrapped with ' + details + '] */\\\\n');\\n}\\n\\nmodule.exports = insertWrapDetails;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"reWrapComment\",\"insertWrapDetails\",\"source\",\"details\",\"length\",\"lastIndex\",\"join\",\"replace\"]\n}\n"]