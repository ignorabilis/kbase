["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/startsWith.js"],"~:js","shadow$provide.module$node_modules$lodash$startsWith=function(global,process,require,module,exports,shadow$shims){var baseClamp=require(\"module$node_modules$lodash$_baseClamp\"),baseToString=require(\"module$node_modules$lodash$_baseToString\"),toInteger=require(\"module$node_modules$lodash$toInteger\"),toString=require(\"module$node_modules$lodash$toString\");module.exports=function(string,target,position){string=toString(string);position=null==position?0:baseClamp(toInteger(position),0,string.length);\ntarget=baseToString(target);return string.slice(position,position+target.length)==target}}","~:source","shadow$provide[\"module$node_modules$lodash$startsWith\"] = function(global,process,require,module,exports,shadow$shims) {\nvar baseClamp = require('./_baseClamp'),\n    baseToString = require('./_baseToString'),\n    toInteger = require('./toInteger'),\n    toString = require('./toString');\n\n/**\n * Checks if `string` starts with the given target string.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {string} [target] The string to search for.\n * @param {number} [position=0] The position to search from.\n * @returns {boolean} Returns `true` if `string` starts with `target`,\n *  else `false`.\n * @example\n *\n * _.startsWith('abc', 'a');\n * // => true\n *\n * _.startsWith('abc', 'b');\n * // => false\n *\n * _.startsWith('abc', 'b', 1);\n * // => true\n */\nfunction startsWith(string, target, position) {\n  string = toString(string);\n  position = position == null\n    ? 0\n    : baseClamp(toInteger(position), 0, string.length);\n\n  target = baseToString(target);\n  return string.slice(position, position + target.length) == target;\n}\n\nmodule.exports = startsWith;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$lodash$_baseClamp","~$module$node_modules$lodash$toInteger","~$module$node_modules$lodash$_baseToString","~$module$node_modules$lodash$toString"]],"~:properties",["^5",[]],"~:compiled-at",1537360506067,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$startsWith.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,sCAAA,CAA0D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAAA,IACnHC,UAAYJ,OAAA,CAAQ,uCAAR,CADuG,CAEnHK,aAAeL,OAAA,CAAQ,0CAAR,CAFoG,CAGnHM,UAAYN,OAAA,CAAQ,sCAAR,CAHuG,CAInHO,SAAWP,OAAA,CAAQ,qCAAR,CAmCfC,OAAAC,QAAA,CAVAM,QAAmB,CAACC,MAAD,CAASC,MAAT,CAAiBC,QAAjB,CAA2B,CAC5CF,MAAA,CAASF,QAAA,CAASE,MAAT,CACTE,SAAA,CAAuB,IAAZ,EAAAA,QAAA,CACP,CADO,CAEPP,SAAA,CAAUE,SAAA,CAAUK,QAAV,CAAV,CAA+B,CAA/B,CAAkCF,MAAAG,OAAlC,CAEJF;MAAA,CAASL,YAAA,CAAaK,MAAb,CACT,OAAOD,OAAAI,MAAA,CAAaF,QAAb,CAAuBA,QAAvB,CAAkCD,MAAAE,OAAlC,CAAP,EAA2DF,MAPf,CA7ByE;\",\n\"sources\":[\"node_modules/lodash/startsWith.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$startsWith\\\"] = function(global,process,require,module,exports,shadow$shims) {\\nvar baseClamp = require('./_baseClamp'),\\n    baseToString = require('./_baseToString'),\\n    toInteger = require('./toInteger'),\\n    toString = require('./toString');\\n\\n/**\\n * Checks if `string` starts with the given target string.\\n *\\n * @static\\n * @memberOf _\\n * @since 3.0.0\\n * @category String\\n * @param {string} [string=''] The string to inspect.\\n * @param {string} [target] The string to search for.\\n * @param {number} [position=0] The position to search from.\\n * @returns {boolean} Returns `true` if `string` starts with `target`,\\n *  else `false`.\\n * @example\\n *\\n * _.startsWith('abc', 'a');\\n * // => true\\n *\\n * _.startsWith('abc', 'b');\\n * // => false\\n *\\n * _.startsWith('abc', 'b', 1);\\n * // => true\\n */\\nfunction startsWith(string, target, position) {\\n  string = toString(string);\\n  position = position == null\\n    ? 0\\n    : baseClamp(toInteger(position), 0, string.length);\\n\\n  target = baseToString(target);\\n  return string.slice(position, position + target.length) == target;\\n}\\n\\nmodule.exports = startsWith;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"baseClamp\",\"baseToString\",\"toInteger\",\"toString\",\"startsWith\",\"string\",\"target\",\"position\",\"length\",\"slice\"]\n}\n"]