["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/semantic-ui-react/dist/commonjs/addons/Radio/Radio.js"],"~:js","shadow$provide.module$node_modules$semantic_ui_react$dist$commonjs$addons$Radio$Radio=function(global,process,require,module,exports,shadow$shims){function Radio(props){var slider=props.slider,toggle=props.toggle,type=props.type;props=(0,_lib.getUnhandledProps)(Radio,props);var radio=!(slider||toggle)||void 0;return _react.default.createElement(_Checkbox.default,(0,_extends2.default)({},props,{type:type,radio:radio,slider:slider,toggle:toggle}))}global=require(\"module$node_modules$$babel$runtime$helpers$interopRequireDefault\");\nObject.defineProperty(exports,\"__esModule\",{value:!0});exports.default=void 0;var _extends2=global(require(\"module$node_modules$$babel$runtime$helpers$extends\")),_react=global(require(\"module$node_modules$react$index\")),_lib=require(\"module$node_modules$semantic_ui_react$dist$commonjs$lib$index\"),_Checkbox=global(require(\"module$node_modules$semantic_ui_react$dist$commonjs$modules$Checkbox$index\"));Radio.handledProps=[\"slider\",\"toggle\",\"type\"];Radio.propTypes={slider:_Checkbox.default.propTypes.slider,\ntoggle:_Checkbox.default.propTypes.toggle,type:_Checkbox.default.propTypes.type};Radio.defaultProps={type:\"radio\"};exports.default=Radio}","~:source","shadow$provide[\"module$node_modules$semantic_ui_react$dist$commonjs$addons$Radio$Radio\"] = function(global,process,require,module,exports,shadow$shims) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _lib = require(\"../../lib\");\n\nvar _Checkbox = _interopRequireDefault(require(\"../../modules/Checkbox\"));\n\n/**\n * A Radio is sugar for <Checkbox radio />.\n * Useful for exclusive groups of sliders or toggles.\n * @see Checkbox\n * @see Form\n */\nfunction Radio(props) {\n  var slider = props.slider,\n      toggle = props.toggle,\n      type = props.type;\n  var rest = (0, _lib.getUnhandledProps)(Radio, props); // const ElementType = getElementType(Radio, props)\n  // radio, slider, toggle are exclusive\n  // use an undefined radio if slider or toggle are present\n\n  var radio = !(slider || toggle) || undefined;\n  return _react.default.createElement(_Checkbox.default, (0, _extends2.default)({}, rest, {\n    type: type,\n    radio: radio,\n    slider: slider,\n    toggle: toggle\n  }));\n}\n\nRadio.handledProps = [\"slider\", \"toggle\", \"type\"];\nRadio.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** Format to emphasize the current selection state. */\n  slider: _Checkbox.default.propTypes.slider,\n\n  /** Format to show an on or off choice. */\n  toggle: _Checkbox.default.propTypes.toggle,\n\n  /** HTML input type, either checkbox or radio. */\n  type: _Checkbox.default.propTypes.type\n} : {};\nRadio.defaultProps = {\n  type: 'radio'\n};\nvar _default = Radio;\nexports.default = _default;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$babel$runtime$helpers$interopRequireDefault","~$module$node_modules$react$index","~$shadow.js","~$module$node_modules$$babel$runtime$helpers$extends","~$module$node_modules$semantic_ui_react$dist$commonjs$modules$Checkbox$index","~$module$node_modules$semantic_ui_react$dist$commonjs$lib$index"]],"~:properties",["^5",["__esModule","slider","propTypes","value","radio","defaultProps","toggle","type","handledProps","default"]],"~:compiled-at",1537360506226,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$semantic_ui_react$dist$commonjs$addons$Radio$Radio.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,uEAAA,CAA2F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAwBxJC,QAASA,MAAK,CAACC,KAAD,CAAQ,CAAA,IAChBC,OAASD,KAAAC,OADO,CAEhBC,OAASF,KAAAE,OAFO,CAGhBC,KAAOH,KAAAG,KACPC,MAAAA,CAAO,CAAC,CAAA,CAAGC,IAAAC,kBAAJ,EAA4BP,KAA5B,CAAmCC,KAAnC,CAIX,KAAIO,MAAQ,EAAEN,MAAF,EAAYC,MAAZ,CAARK,EAA+BC,IAAAA,EACnC,OAAOC,OAAAC,QAAAC,cAAA,CAA6BC,SAAAF,QAA7B,CAAgD,CAAC,CAAA,CAAGG,SAAAH,QAAJ,EAAuB,EAAvB,CAA2BN,KAA3B,CAAiC,CACtFD,KAAMA,IADgF,CAEtFI,MAAOA,KAF+E,CAGtFN,OAAQA,MAH8E,CAItFC,OAAQA,MAJ8E,CAAjC,CAAhD,CATa,CArBlBY,MAAAA,CAAyBnB,OAAA,CAAQ,kEAAR,CAE7BoB;MAAAC,eAAA,CAAsBnB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CoB,MAAO,CAAA,CADoC,CAA7C,CAGApB,QAAAa,QAAA,CAAkB,IAAK,EAEvB,KAAIG,UAAYC,MAAA,CAAuBnB,OAAA,CAAQ,oDAAR,CAAvB,CAAhB,CAEIc,OAASK,MAAA,CAAuBnB,OAAA,CAAQ,iCAAR,CAAvB,CAFb,CAIIU,KAAOV,OAAA,CAAQ,+DAAR,CAJX,CAMIiB,UAAYE,MAAA,CAAuBnB,OAAA,CAAQ,4EAAR,CAAvB,CAyBhBI,MAAAmB,aAAA,CAAqB,CAAC,QAAD,CAAW,QAAX,CAAqB,MAArB,CACrBnB,MAAAoB,UAAA,CAA0D,CAExDlB,OAAQW,SAAAF,QAAAS,UAAAlB,OAFgD;AAKxDC,OAAQU,SAAAF,QAAAS,UAAAjB,OALgD,CAQxDC,KAAMS,SAAAF,QAAAS,UAAAhB,KARkD,CAU1DJ,MAAAqB,aAAA,CAAqB,CACnBjB,KAAM,OADa,CAIrBN,QAAAa,QAAA,CADeX,KAvDyI;\",\n\"sources\":[\"node_modules/semantic-ui-react/dist/commonjs/addons/Radio/Radio.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$semantic_ui_react$dist$commonjs$addons$Radio$Radio\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n\\\"use strict\\\";\\n\\nvar _interopRequireDefault = require(\\\"@babel/runtime/helpers/interopRequireDefault\\\");\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = void 0;\\n\\nvar _extends2 = _interopRequireDefault(require(\\\"@babel/runtime/helpers/extends\\\"));\\n\\nvar _react = _interopRequireDefault(require(\\\"react\\\"));\\n\\nvar _lib = require(\\\"../../lib\\\");\\n\\nvar _Checkbox = _interopRequireDefault(require(\\\"../../modules/Checkbox\\\"));\\n\\n/**\\n * A Radio is sugar for <Checkbox radio />.\\n * Useful for exclusive groups of sliders or toggles.\\n * @see Checkbox\\n * @see Form\\n */\\nfunction Radio(props) {\\n  var slider = props.slider,\\n      toggle = props.toggle,\\n      type = props.type;\\n  var rest = (0, _lib.getUnhandledProps)(Radio, props); // const ElementType = getElementType(Radio, props)\\n  // radio, slider, toggle are exclusive\\n  // use an undefined radio if slider or toggle are present\\n\\n  var radio = !(slider || toggle) || undefined;\\n  return _react.default.createElement(_Checkbox.default, (0, _extends2.default)({}, rest, {\\n    type: type,\\n    radio: radio,\\n    slider: slider,\\n    toggle: toggle\\n  }));\\n}\\n\\nRadio.handledProps = [\\\"slider\\\", \\\"toggle\\\", \\\"type\\\"];\\nRadio.propTypes = process.env.NODE_ENV !== \\\"production\\\" ? {\\n  /** Format to emphasize the current selection state. */\\n  slider: _Checkbox.default.propTypes.slider,\\n\\n  /** Format to show an on or off choice. */\\n  toggle: _Checkbox.default.propTypes.toggle,\\n\\n  /** HTML input type, either checkbox or radio. */\\n  type: _Checkbox.default.propTypes.type\\n} : {};\\nRadio.defaultProps = {\\n  type: 'radio'\\n};\\nvar _default = Radio;\\nexports.default = _default;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"Radio\",\"props\",\"slider\",\"toggle\",\"type\",\"rest\",\"_lib\",\"getUnhandledProps\",\"radio\",\"undefined\",\"_react\",\"default\",\"createElement\",\"_Checkbox\",\"_extends2\",\"_interopRequireDefault\",\"Object\",\"defineProperty\",\"value\",\"handledProps\",\"propTypes\",\"defaultProps\"]\n}\n"]