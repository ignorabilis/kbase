["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/lodash/clone.js"],"~:js","shadow$provide.module$node_modules$lodash$clone=function(global,process,require,module,exports,shadow$shims){var baseClone=require(\"module$node_modules$lodash$_baseClone\");module.exports=function(value){return baseClone(value,4)}}","~:source","shadow$provide[\"module$node_modules$lodash$clone\"] = function(global,process,require,module,exports,shadow$shims) {\nvar baseClone = require('./_baseClone');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nmodule.exports = clone;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$lodash$_baseClone"]],"~:properties",["^5",[]],"~:compiled-at",1537360506115,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$lodash$clone.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,iCAAA,CAAqD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAClH,IAAIC,UAAYJ,OAAA,CAAQ,uCAAR,CAmChBC,OAAAC,QAAA,CAJAG,QAAc,CAACC,KAAD,CAAQ,CACpB,MAAOF,UAAA,CAAUE,KAAV,CA7BgBC,CA6BhB,CADa,CAhC4F;\",\n\"sources\":[\"node_modules/lodash/clone.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$lodash$clone\\\"] = function(global,process,require,module,exports,shadow$shims) {\\nvar baseClone = require('./_baseClone');\\n\\n/** Used to compose bitmasks for cloning. */\\nvar CLONE_SYMBOLS_FLAG = 4;\\n\\n/**\\n * Creates a shallow clone of `value`.\\n *\\n * **Note:** This method is loosely based on the\\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\\n * arrays. The own enumerable properties of `arguments` objects are cloned\\n * as plain objects. An empty object is returned for uncloneable values such\\n * as error objects, functions, DOM nodes, and WeakMaps.\\n *\\n * @static\\n * @memberOf _\\n * @since 0.1.0\\n * @category Lang\\n * @param {*} value The value to clone.\\n * @returns {*} Returns the cloned value.\\n * @see _.cloneDeep\\n * @example\\n *\\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\\n *\\n * var shallow = _.clone(objects);\\n * console.log(shallow[0] === objects[0]);\\n * // => true\\n */\\nfunction clone(value) {\\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\\n}\\n\\nmodule.exports = clone;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"baseClone\",\"clone\",\"value\",\"CLONE_SYMBOLS_FLAG\"]\n}\n"]